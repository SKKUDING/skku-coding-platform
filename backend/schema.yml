openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/admin/announcement/:
    get:
      operationId: api_admin_announcement_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_admin_announcement_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_admin_announcement_update
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_admin_announcement_destroy
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/admin/compile_spj/:
    get:
      operationId: api_admin_compile_spj_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_admin_compile_spj_create
      description: Uploading testcase
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: spj_code
        schema:
          type: string
        required: true
      - in: query
        name: spj_language
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/contest/:
    get:
      operationId: api_admin_contest_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_admin_contest_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_admin_contest_update
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/contest/acm_helper/:
    get:
      operationId: api_admin_contest_acm_helper_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_admin_contest_acm_helper_update
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/contest/add_problem_from_public/:
    get:
      operationId: api_admin_contest_add_problem_from_public_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_admin_contest_add_problem_from_public_create
      description: Add new problems into the contest.
      parameters:
      - in: query
        name: contest_id
        schema:
          type: integer
        required: true
      - in: query
        name: display_id
        schema:
          type: string
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: problem_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/contest/announcement/:
    get:
      operationId: api_admin_contest_announcement_retrieve
      description: Get one contest_announcement or contest_announcement list.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_admin_contest_announcement_create
      description: Create one contest_announcement.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_admin_contest_announcement_update
      description: update contest_announcement
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_admin_contest_announcement_destroy
      description: Delete one contest_announcement.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/admin/contest/problem/:
    get:
      operationId: api_admin_contest_problem_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: contest_id
        schema:
          type: integer
        description: Unique id of contest
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: id
        schema:
          type: integer
        description: Unique id of problem
      - in: query
        name: keyword
        schema:
          type: integer
        description: keyword of problem's title you want to search with
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_admin_contest_problem_create
      description: Create problems for contest.
      parameters:
      - in: query
        name: _id
        schema:
          type: string
          nullable: true
          maxLength: 32
        required: true
      - in: query
        name: contest_id
        schema:
          type: integer
        required: true
      - in: query
        name: description
        schema:
          type: string
        required: true
      - in: query
        name: difficulty
        schema:
          enum:
          - Level1
          - Level2
          - Level3
          - Level4
          - Level5
          - Level6
          - Level7
          type: string
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: hint
        schema:
          type: string
          nullable: true
        required: true
      - in: query
        name: input_description
        schema:
          type: string
        required: true
      - in: query
        name: io_mode
        schema:
          $ref: '#/components/schemas/ProblemIOMode'
        required: true
      - in: query
        name: languages
        schema:
          type: array
          items: {}
        required: true
      - in: query
        name: memory_limit
        schema:
          type: integer
          maximum: 1024
          minimum: 1
        required: true
      - in: query
        name: output_description
        schema:
          type: string
        required: true
      - in: query
        name: rule_type
        schema:
          enum:
          - ACM
          - OI
          type: string
        required: true
      - in: query
        name: samples
        schema:
          type: array
          items:
            $ref: '#/components/schemas/CreateSample'
        required: true
      - in: query
        name: share_submission
        schema:
          type: boolean
        required: true
      - in: query
        name: source
        schema:
          type: string
          nullable: true
          maxLength: 256
        required: true
      - in: query
        name: spj
        schema:
          type: boolean
        required: true
      - in: query
        name: spj_code
        schema:
          type: string
          nullable: true
        required: true
      - in: query
        name: spj_compile_ok
        schema:
          type: boolean
          default: false
      - in: query
        name: spj_language
        schema:
          type: string
          nullable: true
        required: true
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: string
        required: true
      - in: query
        name: template
        schema:
          type: object
          additionalProperties:
            type: string
        required: true
      - in: query
        name: test_case_id
        schema:
          type: string
          maxLength: 32
        required: true
      - in: query
        name: test_case_score
        schema:
          type: array
          items:
            $ref: '#/components/schemas/CreateTestCaseScore'
        required: true
      - in: query
        name: time_limit
        schema:
          type: integer
          maximum: 60000
          minimum: 1
        required: true
      - in: query
        name: title
        schema:
          type: string
          maxLength: 1024
        required: true
      - in: query
        name: visible
        schema:
          type: boolean
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_admin_contest_problem_update
      description: Edit problems of contest.
      parameters:
      - in: query
        name: _id
        schema:
          type: string
          nullable: true
          maxLength: 32
        required: true
      - in: query
        name: contest_id
        schema:
          type: integer
        required: true
      - in: query
        name: description
        schema:
          type: string
        required: true
      - in: query
        name: difficulty
        schema:
          enum:
          - Level1
          - Level2
          - Level3
          - Level4
          - Level5
          - Level6
          - Level7
          type: string
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: hint
        schema:
          type: string
          nullable: true
        required: true
      - in: query
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: input_description
        schema:
          type: string
        required: true
      - in: query
        name: io_mode
        schema:
          $ref: '#/components/schemas/ProblemIOMode'
        required: true
      - in: query
        name: languages
        schema:
          type: array
          items: {}
        required: true
      - in: query
        name: memory_limit
        schema:
          type: integer
          maximum: 1024
          minimum: 1
        required: true
      - in: query
        name: output_description
        schema:
          type: string
        required: true
      - in: query
        name: rule_type
        schema:
          enum:
          - ACM
          - OI
          type: string
        required: true
      - in: query
        name: samples
        schema:
          type: array
          items:
            $ref: '#/components/schemas/CreateSample'
        required: true
      - in: query
        name: share_submission
        schema:
          type: boolean
        required: true
      - in: query
        name: source
        schema:
          type: string
          nullable: true
          maxLength: 256
        required: true
      - in: query
        name: spj
        schema:
          type: boolean
        required: true
      - in: query
        name: spj_code
        schema:
          type: string
          nullable: true
        required: true
      - in: query
        name: spj_compile_ok
        schema:
          type: boolean
          default: false
      - in: query
        name: spj_language
        schema:
          type: string
          nullable: true
        required: true
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: string
        required: true
      - in: query
        name: template
        schema:
          type: object
          additionalProperties:
            type: string
        required: true
      - in: query
        name: test_case_id
        schema:
          type: string
          maxLength: 32
        required: true
      - in: query
        name: test_case_score
        schema:
          type: array
          items:
            $ref: '#/components/schemas/CreateTestCaseScore'
        required: true
      - in: query
        name: time_limit
        schema:
          type: integer
          maximum: 60000
          minimum: 1
        required: true
      - in: query
        name: title
        schema:
          type: string
          maxLength: 1024
        required: true
      - in: query
        name: visible
        schema:
          type: boolean
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_admin_contest_problem_destroy
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: id
        schema:
          type: integer
        description: Unique id of problem
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/admin/contest_problem/make_public/:
    get:
      operationId: api_admin_contest_problem_make_public_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_admin_contest_problem_make_public_create
      description: Make contest problems as public problems.
      parameters:
      - in: query
        name: display_id
        schema:
          type: string
          maxLength: 32
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/dashboard_info:
    get:
      operationId: api_admin_dashboard_info_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/download_submissions/:
    get:
      operationId: api_admin_download_submissions_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/export_problem/:
    get:
      operationId: api_admin_export_problem_retrieve
      description: Export problems as .zip file.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: problem_id
        schema:
          type: integer
        description: Unique id of problem.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/generate_user/:
    get:
      operationId: api_admin_generate_user_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_admin_generate_user_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/import_fps/:
    get:
      operationId: api_admin_import_fps_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_admin_import_fps_create
      description: tmp
      parameters:
      - in: query
        name: append
        schema:
          type: array
          items:
            type: object
            additionalProperties: {}
          nullable: true
        required: true
      - in: query
        name: description
        schema:
          type: string
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: hint
        schema:
          type: string
          nullable: true
        required: true
      - in: query
        name: input
        schema:
          type: string
        required: true
      - in: query
        name: memory_limit
        schema:
          $ref: '#/components/schemas/Unit'
        required: true
      - in: query
        name: output
        schema:
          type: string
        required: true
      - in: query
        name: prepend
        schema:
          type: array
          items:
            type: object
            additionalProperties: {}
          nullable: true
        required: true
      - in: query
        name: samples
        schema:
          type: array
          items:
            $ref: '#/components/schemas/CreateSample'
        required: true
      - in: query
        name: source
        schema:
          type: string
          nullable: true
          maxLength: 200
        required: true
      - in: query
        name: spj
        schema:
          allOf:
          - $ref: '#/components/schemas/SPJ'
          nullable: true
        required: true
      - in: query
        name: template
        schema:
          type: array
          items:
            type: object
            additionalProperties: {}
          nullable: true
        required: true
      - in: query
        name: time_limit
        schema:
          $ref: '#/components/schemas/Unit'
        required: true
      - in: query
        name: title
        schema:
          type: string
          maxLength: 128
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/import_problem/:
    get:
      operationId: api_admin_import_problem_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_admin_import_problem_create
      description: Import problems through .zip file
      parameters:
      - in: query
        name: answers
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        required: true
      - in: query
        name: description
        schema:
          $ref: '#/components/schemas/FormatValue'
        required: true
      - in: query
        name: display_id
        schema:
          type: string
          maxLength: 128
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: hint
        schema:
          $ref: '#/components/schemas/FormatValue'
        required: true
      - in: query
        name: input_description
        schema:
          $ref: '#/components/schemas/FormatValue'
        required: true
      - in: query
        name: memory_limit
        schema:
          type: integer
          maximum: 10240
          minimum: 1
        required: true
      - in: query
        name: output_description
        schema:
          $ref: '#/components/schemas/FormatValue'
        required: true
      - in: query
        name: rule_type
        schema:
          enum:
          - ACM
          - OI
          type: string
        required: true
      - in: query
        name: samples
        schema:
          type: array
          items:
            $ref: '#/components/schemas/CreateSample'
        required: true
      - in: query
        name: source
        schema:
          type: string
          nullable: true
          maxLength: 200
        required: true
      - in: query
        name: spj
        schema:
          allOf:
          - $ref: '#/components/schemas/SPJ'
          nullable: true
        required: true
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: string
        required: true
      - in: query
        name: template
        schema:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Template'
        required: true
      - in: query
        name: test_case_score
        schema:
          type: array
          items:
            $ref: '#/components/schemas/TestCaseScore'
          nullable: true
        required: true
      - in: query
        name: time_limit
        schema:
          type: integer
          maximum: 60000
          minimum: 1
        required: true
      - in: query
        name: title
        schema:
          type: string
          maxLength: 128
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/judge_server/:
    get:
      operationId: api_admin_judge_server_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_admin_judge_server_update
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_admin_judge_server_destroy
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/admin/problem/:
    get:
      operationId: api_admin_problem_retrieve
      description: Get problem list
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: id
        schema:
          type: integer
        description: Unique id of problem
      - in: query
        name: keyword
        schema:
          type: string
        description: keyword of problem's title you want to search with
      - in: query
        name: rule_type
        schema:
          type: integer
        description: 'Rule type of problem: ACM or OI'
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_admin_problem_create
      description: Uploading problem.
      parameters:
      - in: query
        name: _id
        schema:
          type: string
        required: true
      - in: query
        name: accepted_number
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
      - in: query
        name: contest
        schema:
          type: integer
          nullable: true
        required: true
      - in: query
        name: create_time
        schema:
          type: string
          format: date-time
        required: true
      - in: query
        name: created_by
        schema:
          $ref: '#/components/schemas/Username'
        required: true
      - in: query
        name: description
        schema:
          type: string
        required: true
      - in: query
        name: difficulty
        schema:
          type: string
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: hint
        schema:
          type: string
          nullable: true
      - in: query
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: input_description
        schema:
          type: string
        required: true
      - in: query
        name: io_mode
        schema:
          type: object
          additionalProperties: {}
      - in: query
        name: is_public
        schema:
          type: boolean
      - in: query
        name: languages
        schema:
          type: object
          additionalProperties: {}
        required: true
      - in: query
        name: last_update_time
        schema:
          type: string
          format: date-time
          nullable: true
      - in: query
        name: memory_limit
        schema:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        required: true
      - in: query
        name: output_description
        schema:
          type: string
        required: true
      - in: query
        name: rule_type
        schema:
          type: string
        required: true
      - in: query
        name: samples
        schema:
          type: object
          additionalProperties: {}
        required: true
      - in: query
        name: share_submission
        schema:
          type: boolean
      - in: query
        name: source
        schema:
          type: string
          nullable: true
      - in: query
        name: spj
        schema:
          type: boolean
      - in: query
        name: spj_code
        schema:
          type: string
          nullable: true
      - in: query
        name: spj_compile_ok
        schema:
          type: boolean
      - in: query
        name: spj_language
        schema:
          type: string
          nullable: true
      - in: query
        name: spj_version
        schema:
          type: string
          nullable: true
      - in: query
        name: statistic_info
        schema:
          type: object
          additionalProperties: {}
      - in: query
        name: submission_number
        schema:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: string
        required: true
      - in: query
        name: template
        schema:
          type: object
          additionalProperties: {}
        required: true
      - in: query
        name: test_case_id
        schema:
          type: string
        required: true
      - in: query
        name: test_case_score
        schema:
          type: object
          additionalProperties: {}
        required: true
      - in: query
        name: time_limit
        schema:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        required: true
      - in: query
        name: title
        schema:
          type: string
        required: true
      - in: query
        name: total_score
        schema:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
      - in: query
        name: visible
        schema:
          type: boolean
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_admin_problem_update
      description: Editing problem.
      parameters:
      - in: query
        name: _id
        schema:
          type: string
          nullable: true
          maxLength: 32
        required: true
      - in: query
        name: description
        schema:
          type: string
        required: true
      - in: query
        name: difficulty
        schema:
          enum:
          - Level1
          - Level2
          - Level3
          - Level4
          - Level5
          - Level6
          - Level7
          type: string
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: hint
        schema:
          type: string
          nullable: true
        required: true
      - in: query
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: input_description
        schema:
          type: string
        required: true
      - in: query
        name: io_mode
        schema:
          $ref: '#/components/schemas/ProblemIOMode'
        required: true
      - in: query
        name: languages
        schema:
          type: array
          items: {}
        required: true
      - in: query
        name: memory_limit
        schema:
          type: integer
          maximum: 1024
          minimum: 1
        required: true
      - in: query
        name: output_description
        schema:
          type: string
        required: true
      - in: query
        name: rule_type
        schema:
          enum:
          - ACM
          - OI
          type: string
        required: true
      - in: query
        name: samples
        schema:
          type: array
          items:
            $ref: '#/components/schemas/CreateSample'
        required: true
      - in: query
        name: share_submission
        schema:
          type: boolean
        required: true
      - in: query
        name: source
        schema:
          type: string
          nullable: true
          maxLength: 256
        required: true
      - in: query
        name: spj
        schema:
          type: boolean
        required: true
      - in: query
        name: spj_code
        schema:
          type: string
          nullable: true
        required: true
      - in: query
        name: spj_compile_ok
        schema:
          type: boolean
          default: false
      - in: query
        name: spj_language
        schema:
          type: string
          nullable: true
        required: true
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: string
        required: true
      - in: query
        name: template
        schema:
          type: object
          additionalProperties:
            type: string
        required: true
      - in: query
        name: test_case_id
        schema:
          type: string
          maxLength: 32
        required: true
      - in: query
        name: test_case_score
        schema:
          type: array
          items:
            $ref: '#/components/schemas/CreateTestCaseScore'
        required: true
      - in: query
        name: time_limit
        schema:
          type: integer
          maximum: 60000
          minimum: 1
        required: true
      - in: query
        name: title
        schema:
          type: string
          maxLength: 1024
        required: true
      - in: query
        name: visible
        schema:
          type: boolean
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_admin_problem_destroy
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: id
        schema:
          type: integer
        description: Unique id of problem
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/admin/prune_test_case/:
    get:
      operationId: api_admin_prune_test_case_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_admin_prune_test_case_destroy
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/admin/smtp/:
    get:
      operationId: api_admin_smtp_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_admin_smtp_create
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_admin_smtp_update
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/smtp_test/:
    get:
      operationId: api_admin_smtp_test_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_admin_smtp_test_create
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/submission/rejudge:
    get:
      operationId: api_admin_submission_rejudge_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/test_case/:
    get:
      operationId: api_admin_test_case_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: problem_id
        schema:
          type: integer
        description: Unique id of problem that you want to get test cases
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_admin_test_case_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/upload_file/:
    get:
      operationId: api_admin_upload_file_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_admin_upload_file_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/upload_image/:
    get:
      operationId: api_admin_upload_image_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_admin_upload_image_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/user/:
    get:
      operationId: api_admin_user_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_admin_user_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_admin_user_update
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_admin_user_destroy
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/admin/versions/:
    get:
      operationId: api_admin_versions_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/admin/website/:
    get:
      operationId: api_admin_website_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_admin_website_create
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/announcement/:
    get:
      operationId: api_announcement_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/apply_reset_password/:
    get:
      operationId: api_apply_reset_password_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_apply_reset_password_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/captcha/:
    get:
      operationId: api_captcha_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/change_email/:
    get:
      operationId: api_change_email_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_change_email_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/change_password/:
    get:
      operationId: api_change_password_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_change_password_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/check_username_or_email:
    get:
      operationId: api_check_username_or_email_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_check_username_or_email_create
      description: check username or email is duplicate
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/contest/:
    get:
      operationId: api_contest_retrieve
      description: More descriptive text
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: id
        schema:
          type: integer
        description: Unique id of contest
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/contest/access/:
    get:
      operationId: api_contest_access_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/contest/announcement/:
    get:
      operationId: api_contest_announcement_retrieve
      description: Get Contest Announcement List
      parameters:
      - in: query
        name: contest_id
        schema:
          type: integer
        description: Unique id of contest
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: max_id
        schema:
          type: integer
        description: Announcements posted later than id
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/contest/password/:
    get:
      operationId: api_contest_password_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_contest_password_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/contest/problem/:
    get:
      operationId: api_contest_problem_retrieve
      description: Get problem of specific contest. If 'problem_id' is not set, whole
        problems of the contest would be returned.
      parameters:
      - in: query
        name: contest_id
        schema:
          type: integer
        description: Unique id of contest
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: problem_id
        schema:
          type: integer
        description: Unique id of problem
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/contest_rank/:
    get:
      operationId: api_contest_rank_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/contest_submissions/:
    get:
      operationId: api_contest_submissions_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/contests/:
    get:
      operationId: api_contests_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/judge_server_heartbeat/:
    get:
      operationId: api_judge_server_heartbeat_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_judge_server_heartbeat_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/languages/:
    get:
      operationId: api_languages_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/login/:
    get:
      operationId: api_login_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_login_create
      description: User login api
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/logout/:
    get:
      operationId: api_logout_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/open_api_appkey/:
    get:
      operationId: api_open_api_appkey_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_open_api_appkey_create
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/pickone/:
    get:
      operationId: api_pickone_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/problem/:
    get:
      operationId: api_problem_list
      description: Get problems that satisfy specific condition(id, tag, keyword and
        so on..)
      parameters:
      - in: query
        name: Difficulty
        schema:
          type: string
        description: Difficulty of problem you want to search with.
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: keyword
        schema:
          type: string
        description: Keyword of problem's title you want to search with.
      - in: query
        name: limit
        schema:
          type: integer
        description: Maximun number of problem list. Working when 'problem_id' is
          not set.
        required: true
      - in: query
        name: offset
        schema:
          type: integer
        description: Start number of the problem in the list.
        required: true
      - in: query
        name: problem_id
        schema:
          type: integer
        description: Unique id of problem. It set, a specific problem is returned.
      - in: query
        name: tag
        schema:
          type: string
        description: Tag of problem you want to search with.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'
            application/yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'
            application/vnd.oai.openapi+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Problem'
          description: ''
  /api/problem/tags/:
    get:
      operationId: api_problem_tags_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/profile/:
    get:
      operationId: api_profile_retrieve
      description: Determine whether to log in, and return user information if logged
        in
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_profile_update
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/profile/fresh_display_id:
    get:
      operationId: api_profile_fresh_display_id_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/register/:
    get:
      operationId: api_register_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_register_create
      description: User register api
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/reset_password/:
    get:
      operationId: api_reset_password_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_reset_password_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/sessions/:
    get:
      operationId: api_sessions_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_sessions_destroy
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/sso:
    get:
      operationId: api_sso_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_sso_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/submission/:
    get:
      operationId: api_submission_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_submission_create
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_submission_update
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/submission_exists/:
    get:
      operationId: api_submission_exists_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/submissions/:
    get:
      operationId: api_submissions_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/tfa_required/:
    get:
      operationId: api_tfa_required_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_tfa_required_create
      description: Check TFA is required
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/two_factor_auth/:
    get:
      operationId: api_two_factor_auth_retrieve
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_two_factor_auth_create
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_two_factor_auth_update
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/upload_avatar/:
    get:
      operationId: api_upload_avatar_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - th
          - tr
          - tt
          - udm
          - uk
          - ur
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: api_upload_avatar_create
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/user_rank/:
    get:
      operationId: api_user_rank_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/website/:
    get:
      operationId: api_website_retrieve
      description: |-
        The parent class of Django view, and the usage of django-rest-framework is basically the same
          - request.data to get parsed json or urlencoded data, dict type
          - self.success, self.error and self.invalid_serializer can be modified according to industry needs,
            Written in the parent class is to develop a unified writing for different people, and no longer use your own success/error format
          - self.response returns a django HttpResponse, which is implemented in self.response_class
          - The parse request class needs to be defined in request_parser, currently only supports json and urlencoded types, used to parse the requested data
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_website_create
      description: |-
        partial(func, *args, **keywords) - new function with partial application
        of the given arguments and keywords.
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    Answer:
      type: object
      properties:
        code:
          type: string
        language:
          type: string
      required:
      - code
      - language
    CreateSample:
      type: object
      properties:
        input:
          type: string
        output:
          type: string
      required:
      - input
      - output
    CreateTestCaseScore:
      type: object
      properties:
        input_name:
          type: string
          maxLength: 32
        output_name:
          type: string
          maxLength: 32
        score:
          type: integer
          minimum: 0
      required:
      - input_name
      - output_name
      - score
    FormatEnum:
      enum:
      - html
      - markdown
      type: string
    FormatValue:
      type: object
      properties:
        format:
          $ref: '#/components/schemas/FormatEnum'
        value:
          type: string
      required:
      - format
      - value
    IoModeEnum:
      enum:
      - Standard IO
      - File IO
      type: string
    Problem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        tags:
          type: array
          items:
            type: string
          readOnly: true
        created_by:
          $ref: '#/components/schemas/Username'
        template:
          type: string
          readOnly: true
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        input_description:
          type: string
        output_description:
          type: string
        samples:
          type: object
          additionalProperties: {}
        hint:
          type: string
          nullable: true
        languages:
          type: object
          additionalProperties: {}
        create_time:
          type: string
          format: date-time
          readOnly: true
        last_update_time:
          type: string
          format: date-time
          nullable: true
        time_limit:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        memory_limit:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        io_mode:
          type: object
          additionalProperties: {}
        spj:
          type: boolean
        spj_language:
          type: string
          nullable: true
        rule_type:
          type: string
        difficulty:
          type: string
        source:
          type: string
          nullable: true
        total_score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        submission_number:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        accepted_number:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        statistic_info:
          type: object
          additionalProperties: {}
        share_submission:
          type: boolean
        contest:
          type: integer
          nullable: true
      required:
      - _id
      - contest
      - create_time
      - created_by
      - description
      - difficulty
      - id
      - input_description
      - languages
      - memory_limit
      - output_description
      - rule_type
      - samples
      - tags
      - template
      - time_limit
      - title
    ProblemIOMode:
      type: object
      properties:
        io_mode:
          $ref: '#/components/schemas/IoModeEnum'
        input:
          type: string
        output:
          type: string
      required:
      - input
      - io_mode
      - output
    SPJ:
      type: object
      properties:
        code:
          type: string
        language:
          type: string
      required:
      - code
      - language
    Template:
      type: object
      properties:
        prepend:
          type: string
        template:
          type: string
        append:
          type: string
      required:
      - append
      - prepend
      - template
    TestCaseScore:
      type: object
      properties:
        score:
          type: integer
          minimum: 1
        input_name:
          type: string
          maxLength: 32
        output_name:
          type: string
          maxLength: 32
      required:
      - input_name
      - output_name
      - score
    Unit:
      type: object
      properties:
        unit:
          $ref: '#/components/schemas/UnitEnum'
        value:
          type: integer
          maximum: 60000
          minimum: 1
      required:
      - unit
      - value
    UnitEnum:
      enum:
      - MB
      - s
      - ms
      type: string
    Username:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        real_name:
          type: string
          readOnly: true
      required:
      - id
      - real_name
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: Session
servers:
- url: http://localhost/
