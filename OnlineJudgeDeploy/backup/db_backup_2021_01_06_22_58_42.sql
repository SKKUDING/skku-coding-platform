--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Drop databases
--

DROP DATABASE onlinejudge;




--
-- Drop roles
--

DROP ROLE onlinejudge;


--
-- Roles
--

CREATE ROLE onlinejudge;
ALTER ROLE onlinejudge WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS PASSWORD 'md54827417b344ff91a2f608bbad9b4e488';






--
-- Database creation
--

CREATE DATABASE onlinejudge WITH TEMPLATE = template0 OWNER = onlinejudge;
REVOKE CONNECT,TEMPORARY ON DATABASE template1 FROM PUBLIC;
GRANT CONNECT ON DATABASE template1 TO PUBLIC;


\connect onlinejudge

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

-- Dumped from database version 10.15
-- Dumped by pg_dump version 10.15

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: acm_contest_rank; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.acm_contest_rank (
    id integer NOT NULL,
    submission_number integer NOT NULL,
    accepted_number integer NOT NULL,
    total_time integer NOT NULL,
    submission_info jsonb NOT NULL,
    contest_id integer NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.acm_contest_rank OWNER TO onlinejudge;

--
-- Name: acm_contest_rank_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.acm_contest_rank_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.acm_contest_rank_id_seq OWNER TO onlinejudge;

--
-- Name: acm_contest_rank_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.acm_contest_rank_id_seq OWNED BY public.acm_contest_rank.id;


--
-- Name: announcement; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.announcement (
    id integer NOT NULL,
    title text NOT NULL,
    content text NOT NULL,
    create_time timestamp with time zone NOT NULL,
    last_update_time timestamp with time zone NOT NULL,
    visible boolean NOT NULL,
    created_by_id integer NOT NULL
);


ALTER TABLE public.announcement OWNER TO onlinejudge;

--
-- Name: announcement_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.announcement_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.announcement_id_seq OWNER TO onlinejudge;

--
-- Name: announcement_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.announcement_id_seq OWNED BY public.announcement.id;


--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(80) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO onlinejudge;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.auth_group_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.auth_group_id_seq OWNER TO onlinejudge;

--
-- Name: auth_group_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.auth_group_id_seq OWNED BY public.auth_group.id;


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.auth_group_permissions (
    id integer NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO onlinejudge;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.auth_group_permissions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.auth_group_permissions_id_seq OWNER TO onlinejudge;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.auth_group_permissions_id_seq OWNED BY public.auth_group_permissions.id;


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO onlinejudge;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.auth_permission_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.auth_permission_id_seq OWNER TO onlinejudge;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.auth_permission_id_seq OWNED BY public.auth_permission.id;


--
-- Name: contest; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.contest (
    id integer NOT NULL,
    title text NOT NULL,
    description text NOT NULL,
    real_time_rank boolean NOT NULL,
    password text,
    rule_type text NOT NULL,
    start_time timestamp with time zone NOT NULL,
    end_time timestamp with time zone NOT NULL,
    create_time timestamp with time zone NOT NULL,
    last_update_time timestamp with time zone NOT NULL,
    visible boolean NOT NULL,
    created_by_id integer NOT NULL,
    allowed_ip_ranges jsonb NOT NULL
);


ALTER TABLE public.contest OWNER TO onlinejudge;

--
-- Name: contest_announcement; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.contest_announcement (
    id integer NOT NULL,
    title text NOT NULL,
    content text NOT NULL,
    create_time timestamp with time zone NOT NULL,
    contest_id integer NOT NULL,
    created_by_id integer NOT NULL,
    visible boolean NOT NULL
);


ALTER TABLE public.contest_announcement OWNER TO onlinejudge;

--
-- Name: contest_announcement_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.contest_announcement_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contest_announcement_id_seq OWNER TO onlinejudge;

--
-- Name: contest_announcement_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.contest_announcement_id_seq OWNED BY public.contest_announcement.id;


--
-- Name: contest_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.contest_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contest_id_seq OWNER TO onlinejudge;

--
-- Name: contest_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.contest_id_seq OWNED BY public.contest.id;


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO onlinejudge;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.django_content_type_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.django_content_type_id_seq OWNER TO onlinejudge;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.django_content_type_id_seq OWNED BY public.django_content_type.id;


--
-- Name: django_dramatiq_task; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.django_dramatiq_task (
    id uuid NOT NULL,
    status character varying(8) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    message_data bytea NOT NULL
);


ALTER TABLE public.django_dramatiq_task OWNER TO onlinejudge;

--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.django_migrations (
    id integer NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO onlinejudge;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.django_migrations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.django_migrations_id_seq OWNER TO onlinejudge;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.django_migrations_id_seq OWNED BY public.django_migrations.id;


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO onlinejudge;

--
-- Name: judge_server; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.judge_server (
    id integer NOT NULL,
    hostname text NOT NULL,
    ip text,
    judger_version text NOT NULL,
    cpu_core integer NOT NULL,
    memory_usage double precision NOT NULL,
    cpu_usage double precision NOT NULL,
    last_heartbeat timestamp with time zone NOT NULL,
    create_time timestamp with time zone NOT NULL,
    task_number integer NOT NULL,
    service_url text,
    is_disabled boolean NOT NULL
);


ALTER TABLE public.judge_server OWNER TO onlinejudge;

--
-- Name: judge_server_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.judge_server_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.judge_server_id_seq OWNER TO onlinejudge;

--
-- Name: judge_server_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.judge_server_id_seq OWNED BY public.judge_server.id;


--
-- Name: oi_contest_rank; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.oi_contest_rank (
    id integer NOT NULL,
    submission_number integer NOT NULL,
    total_score integer NOT NULL,
    submission_info jsonb NOT NULL,
    contest_id integer NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.oi_contest_rank OWNER TO onlinejudge;

--
-- Name: oi_contest_rank_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.oi_contest_rank_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.oi_contest_rank_id_seq OWNER TO onlinejudge;

--
-- Name: oi_contest_rank_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.oi_contest_rank_id_seq OWNED BY public.oi_contest_rank.id;


--
-- Name: options_sysoptions; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.options_sysoptions (
    id integer NOT NULL,
    key text NOT NULL,
    value jsonb NOT NULL
);


ALTER TABLE public.options_sysoptions OWNER TO onlinejudge;

--
-- Name: options_sysoptions_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.options_sysoptions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.options_sysoptions_id_seq OWNER TO onlinejudge;

--
-- Name: options_sysoptions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.options_sysoptions_id_seq OWNED BY public.options_sysoptions.id;


--
-- Name: problem; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.problem (
    id integer NOT NULL,
    title text NOT NULL,
    description text NOT NULL,
    input_description text NOT NULL,
    output_description text NOT NULL,
    samples jsonb NOT NULL,
    test_case_id text NOT NULL,
    test_case_score jsonb NOT NULL,
    hint text,
    languages jsonb NOT NULL,
    template jsonb NOT NULL,
    create_time timestamp with time zone NOT NULL,
    last_update_time timestamp with time zone,
    time_limit integer NOT NULL,
    memory_limit integer NOT NULL,
    spj boolean NOT NULL,
    spj_language text,
    spj_code text,
    spj_version text,
    rule_type text NOT NULL,
    visible boolean NOT NULL,
    difficulty text NOT NULL,
    source text,
    submission_number bigint NOT NULL,
    accepted_number bigint NOT NULL,
    created_by_id integer NOT NULL,
    _id text NOT NULL,
    statistic_info jsonb NOT NULL,
    total_score integer NOT NULL,
    contest_id integer,
    is_public boolean NOT NULL,
    spj_compile_ok boolean NOT NULL,
    io_mode jsonb NOT NULL,
    share_submission boolean NOT NULL
);


ALTER TABLE public.problem OWNER TO onlinejudge;

--
-- Name: problem_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.problem_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.problem_id_seq OWNER TO onlinejudge;

--
-- Name: problem_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.problem_id_seq OWNED BY public.problem.id;


--
-- Name: problem_tag; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.problem_tag (
    id integer NOT NULL,
    name text NOT NULL
);


ALTER TABLE public.problem_tag OWNER TO onlinejudge;

--
-- Name: problem_tag_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.problem_tag_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.problem_tag_id_seq OWNER TO onlinejudge;

--
-- Name: problem_tag_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.problem_tag_id_seq OWNED BY public.problem_tag.id;


--
-- Name: problem_tags; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.problem_tags (
    id integer NOT NULL,
    problem_id integer NOT NULL,
    problemtag_id integer NOT NULL
);


ALTER TABLE public.problem_tags OWNER TO onlinejudge;

--
-- Name: problem_tags_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.problem_tags_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.problem_tags_id_seq OWNER TO onlinejudge;

--
-- Name: problem_tags_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.problem_tags_id_seq OWNED BY public.problem_tags.id;


--
-- Name: submission; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.submission (
    id text NOT NULL,
    contest_id integer,
    problem_id integer NOT NULL,
    create_time timestamp with time zone NOT NULL,
    user_id integer NOT NULL,
    code text NOT NULL,
    result integer NOT NULL,
    info jsonb NOT NULL,
    language text NOT NULL,
    shared boolean NOT NULL,
    statistic_info jsonb NOT NULL,
    username text NOT NULL,
    ip text
);


ALTER TABLE public.submission OWNER TO onlinejudge;

--
-- Name: user; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public."user" (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    username text NOT NULL,
    email text,
    create_time timestamp with time zone,
    admin_type text NOT NULL,
    reset_password_token text,
    reset_password_token_expire_time timestamp with time zone,
    auth_token text,
    two_factor_auth boolean NOT NULL,
    tfa_token text,
    open_api boolean NOT NULL,
    open_api_appkey text,
    is_disabled boolean NOT NULL,
    problem_permission text NOT NULL,
    session_keys jsonb NOT NULL
);


ALTER TABLE public."user" OWNER TO onlinejudge;

--
-- Name: user_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.user_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_id_seq OWNER TO onlinejudge;

--
-- Name: user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.user_id_seq OWNED BY public."user".id;


--
-- Name: user_profile; Type: TABLE; Schema: public; Owner: onlinejudge
--

CREATE TABLE public.user_profile (
    id integer NOT NULL,
    acm_problems_status jsonb NOT NULL,
    avatar text NOT NULL,
    blog character varying(200),
    mood text,
    accepted_number integer NOT NULL,
    submission_number integer NOT NULL,
    github text,
    school text,
    major text,
    user_id integer NOT NULL,
    total_score bigint NOT NULL,
    oi_problems_status jsonb NOT NULL,
    real_name text,
    language text
);


ALTER TABLE public.user_profile OWNER TO onlinejudge;

--
-- Name: user_profile_id_seq; Type: SEQUENCE; Schema: public; Owner: onlinejudge
--

CREATE SEQUENCE public.user_profile_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_profile_id_seq OWNER TO onlinejudge;

--
-- Name: user_profile_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: onlinejudge
--

ALTER SEQUENCE public.user_profile_id_seq OWNED BY public.user_profile.id;


--
-- Name: acm_contest_rank id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.acm_contest_rank ALTER COLUMN id SET DEFAULT nextval('public.acm_contest_rank_id_seq'::regclass);


--
-- Name: announcement id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.announcement ALTER COLUMN id SET DEFAULT nextval('public.announcement_id_seq'::regclass);


--
-- Name: auth_group id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_group ALTER COLUMN id SET DEFAULT nextval('public.auth_group_id_seq'::regclass);


--
-- Name: auth_group_permissions id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_group_permissions ALTER COLUMN id SET DEFAULT nextval('public.auth_group_permissions_id_seq'::regclass);


--
-- Name: auth_permission id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_permission ALTER COLUMN id SET DEFAULT nextval('public.auth_permission_id_seq'::regclass);


--
-- Name: contest id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.contest ALTER COLUMN id SET DEFAULT nextval('public.contest_id_seq'::regclass);


--
-- Name: contest_announcement id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.contest_announcement ALTER COLUMN id SET DEFAULT nextval('public.contest_announcement_id_seq'::regclass);


--
-- Name: django_content_type id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.django_content_type ALTER COLUMN id SET DEFAULT nextval('public.django_content_type_id_seq'::regclass);


--
-- Name: django_migrations id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.django_migrations ALTER COLUMN id SET DEFAULT nextval('public.django_migrations_id_seq'::regclass);


--
-- Name: judge_server id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.judge_server ALTER COLUMN id SET DEFAULT nextval('public.judge_server_id_seq'::regclass);


--
-- Name: oi_contest_rank id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.oi_contest_rank ALTER COLUMN id SET DEFAULT nextval('public.oi_contest_rank_id_seq'::regclass);


--
-- Name: options_sysoptions id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.options_sysoptions ALTER COLUMN id SET DEFAULT nextval('public.options_sysoptions_id_seq'::regclass);


--
-- Name: problem id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem ALTER COLUMN id SET DEFAULT nextval('public.problem_id_seq'::regclass);


--
-- Name: problem_tag id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem_tag ALTER COLUMN id SET DEFAULT nextval('public.problem_tag_id_seq'::regclass);


--
-- Name: problem_tags id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem_tags ALTER COLUMN id SET DEFAULT nextval('public.problem_tags_id_seq'::regclass);


--
-- Name: user id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public."user" ALTER COLUMN id SET DEFAULT nextval('public.user_id_seq'::regclass);


--
-- Name: user_profile id; Type: DEFAULT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.user_profile ALTER COLUMN id SET DEFAULT nextval('public.user_profile_id_seq'::regclass);


--
-- Data for Name: acm_contest_rank; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.acm_contest_rank (id, submission_number, accepted_number, total_time, submission_info, contest_id, user_id) FROM stdin;
9	2	2	3488	{"12": {"is_ac": true, "ac_time": 1545.978212, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 1943.618038, "is_first_ac": false, "error_number": 0}}	2	50
11	1	1	3421	{"12": {"is_ac": true, "ac_time": 3421.609917, "is_first_ac": false, "error_number": 0}}	2	53
17	3	2	49264	{"12": {"is_ac": true, "ac_time": 23821.996859, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": true, "ac_time": 24243.600756, "is_first_ac": false, "error_number": 0}}	2	7
1	14	7	36465	{"12": {"is_ac": true, "ac_time": 152.922857, "is_first_ac": true, "error_number": 0}, "13": {"is_ac": true, "ac_time": 282.573705, "is_first_ac": true, "error_number": 0}, "14": {"is_ac": true, "ac_time": 752.275014, "is_first_ac": true, "error_number": 0}, "15": {"is_ac": true, "ac_time": 1353.965254, "is_first_ac": true, "error_number": 2}, "16": {"is_ac": true, "ac_time": 3103.395964, "is_first_ac": true, "error_number": 4}, "17": {"is_ac": true, "ac_time": 4942.744387, "is_first_ac": true, "error_number": 0}, "20": {"is_ac": true, "ac_time": 17481.305386, "is_first_ac": true, "error_number": 1}}	2	21
2	7	6	11864	{"12": {"is_ac": true, "ac_time": 411.442637, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 566.434487, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 961.371269, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 1747.395793, "is_first_ac": false, "error_number": 0}, "16": {"is_ac": true, "ac_time": 3225.838289, "is_first_ac": false, "error_number": 0}, "17": {"is_ac": true, "ac_time": 4954.018642, "is_first_ac": false, "error_number": 0}}	2	26
13	5	2	9061	{"12": {"is_ac": true, "ac_time": 4038.134992, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 5023.184652, "is_first_ac": false, "error_number": 0}}	2	54
6	1	1	1015	{"12": {"is_ac": true, "ac_time": 1015.508969, "is_first_ac": false, "error_number": 0}}	2	19
4	6	5	9695	{"12": {"is_ac": true, "ac_time": 825.292705, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 1025.026396, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 1447.02593, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 2021.377672, "is_first_ac": false, "error_number": 0}, "16": {"is_ac": true, "ac_time": 3177.645498, "is_first_ac": false, "error_number": 1}}	2	28
3	8	2	1398	{"12": {"is_ac": true, "ac_time": 517.825934, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 881.554764, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 1}, "15": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 4}}	2	45
7	10	4	19984	{"12": {"is_ac": true, "ac_time": 1043.67706, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 1343.627991, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 2965.270901, "is_first_ac": false, "error_number": 1}, "15": {"is_ac": true, "ac_time": 8633.046171, "is_first_ac": false, "error_number": 4}}	2	17
16	2	1	22073	{"12": {"is_ac": true, "ac_time": 20873.331153, "is_first_ac": false, "error_number": 1}}	2	14
8	1	1	1393	{"12": {"is_ac": true, "ac_time": 1393.613099, "is_first_ac": false, "error_number": 0}}	2	49
15	5	2	31818	{"12": {"is_ac": true, "ac_time": 13783.679749, "is_first_ac": false, "error_number": 3}, "13": {"is_ac": true, "ac_time": 14435.724544, "is_first_ac": false, "error_number": 0}}	2	56
12	15	2	17542	{"12": {"is_ac": true, "ac_time": 5825.663081, "is_first_ac": false, "error_number": 3}, "13": {"is_ac": true, "ac_time": 5717.047341, "is_first_ac": false, "error_number": 2}, "15": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 8}}	2	52
5	7	3	11407	{"12": {"is_ac": true, "ac_time": 927.383896, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 1263.526222, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 4417.466626, "is_first_ac": false, "error_number": 4}}	2	16
18	31	0	0	{"16": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 30}}	2	57
19	4	1	48540	{"12": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 2}, "13": {"is_ac": true, "ac_time": 47340.201008, "is_first_ac": false, "error_number": 1}}	2	47
21	3	1	41039	{"12": {"is_ac": true, "ac_time": 38639.620732, "is_first_ac": false, "error_number": 2}}	2	20
20	3	1	41533	{"12": {"is_ac": true, "ac_time": 39133.925187, "is_first_ac": false, "error_number": 2}}	2	59
54	6	1	74797	{"12": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 5}, "13": {"is_ac": true, "ac_time": 74797.580571, "is_first_ac": false, "error_number": 0}}	2	97
51	13	0	0	{"12": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 12}}	2	93
59	20	0	0	{"12": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 8}}	2	107
61	1	1	78250	{"12": {"is_ac": true, "ac_time": 78250.609742, "is_first_ac": false, "error_number": 0}}	2	110
64	1	0	0	{"12": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 0}}	2	112
76	1	1	135955	{"13": {"is_ac": true, "ac_time": 135955.332817, "is_first_ac": false, "error_number": 0}}	2	129
24	6	5	214392	{"12": {"is_ac": true, "ac_time": 41042.798119, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 41119.287481, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 41541.234956, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 42287.076246, "is_first_ac": false, "error_number": 0}, "17": {"is_ac": true, "ac_time": 47203.62592, "is_first_ac": false, "error_number": 1}}	2	65
41	8	1	65352	{"12": {"is_ac": true, "ac_time": 62952.126044, "is_first_ac": false, "error_number": 2}}	2	80
35	4	4	373171	{"12": {"is_ac": true, "ac_time": 52012.652445, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 52577.49945, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 53761.056002, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 214821.726835, "is_first_ac": false, "error_number": 0}}	2	36
39	4	1	59071	{"12": {"is_ac": true, "ac_time": 55471.731132, "is_first_ac": false, "error_number": 3}}	2	55
26	3	2	85608	{"12": {"is_ac": true, "ac_time": 41871.098473, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": true, "ac_time": 42537.985788, "is_first_ac": false, "error_number": 0}}	2	33
27	3	2	86509	{"12": {"is_ac": true, "ac_time": 42311.555219, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": true, "ac_time": 42998.100969, "is_first_ac": false, "error_number": 0}}	2	66
42	2	2	147117	{"12": {"is_ac": true, "ac_time": 63130.003527, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 83987.679927, "is_first_ac": false, "error_number": 0}}	2	82
94	3	0	0	{"13": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 3}}	2	149
29	5	3	130612	{"12": {"is_ac": true, "ac_time": 42838.870306, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 43539.052512, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 44235.718867, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 2}}	2	63
25	5	4	175781	{"12": {"is_ac": true, "ac_time": 41716.147919, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 41968.086196, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 44231.333625, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 46666.612597, "is_first_ac": false, "error_number": 1}}	2	32
28	11	2	258738	{"12": {"is_ac": true, "ac_time": 125950.57298, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 125588.142522, "is_first_ac": false, "error_number": 6}}	2	25
77	3	2	287534	{"12": {"is_ac": true, "ac_time": 142943.800757, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": true, "ac_time": 143391.874014, "is_first_ac": false, "error_number": 0}}	2	73
36	2	2	106687	{"12": {"is_ac": true, "ac_time": 52929.742603, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 53758.255001, "is_first_ac": false, "error_number": 0}}	2	74
31	11	5	256080	{"12": {"is_ac": true, "ac_time": 48987.39343, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 49174.239065, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 49554.978338, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 49926.478841, "is_first_ac": false, "error_number": 0}, "16": {"is_ac": true, "ac_time": 54839.506491, "is_first_ac": false, "error_number": 3}, "17": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 3}}	2	69
37	3	2	108970	{"12": {"is_ac": true, "ac_time": 53806.688599, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": true, "ac_time": 53964.151143, "is_first_ac": false, "error_number": 0}}	2	48
22	7	4	190629	{"12": {"is_ac": true, "ac_time": 40331.767428, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": true, "ac_time": 40035.315162, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 52691.57732, "is_first_ac": false, "error_number": 2}, "15": {"is_ac": true, "ac_time": 53972.065778, "is_first_ac": false, "error_number": 0}}	2	62
40	1	1	56410	{"12": {"is_ac": true, "ac_time": 56410.762678, "is_first_ac": false, "error_number": 0}}	2	70
44	4	1	66347	{"12": {"is_ac": true, "ac_time": 66347.472483, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 3}}	2	84
43	3	1	68738	{"17": {"is_ac": true, "ac_time": 66338.333583, "is_first_ac": false, "error_number": 2}}	2	78
52	3	2	145205	{"12": {"is_ac": true, "ac_time": 71787.341079, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": true, "ac_time": 72218.369817, "is_first_ac": false, "error_number": 0}}	2	92
14	6	4	31591	{"12": {"is_ac": true, "ac_time": 6469.82236, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 6991.643987, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 8596.846548, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 9535.893586, "is_first_ac": false, "error_number": 0}, "16": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 1}}	2	8
82	1	1	159130	{"12": {"is_ac": true, "ac_time": 159130.198721, "is_first_ac": false, "error_number": 0}}	2	134
38	7	1	53701	{"12": {"is_ac": true, "ac_time": 53701.72261, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 3}}	2	76
30	11	7	434011	{"12": {"is_ac": true, "ac_time": 47616.889955, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 59416.546187, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 62360.497485, "is_first_ac": false, "error_number": 1}, "15": {"is_ac": true, "ac_time": 64266.81045, "is_first_ac": false, "error_number": 0}, "16": {"is_ac": true, "ac_time": 68902.914322, "is_first_ac": false, "error_number": 2}, "17": {"is_ac": true, "ac_time": 71433.346618, "is_first_ac": false, "error_number": 0}, "20": {"is_ac": true, "ac_time": 56418.837585, "is_first_ac": false, "error_number": 0}}	2	68
32	5	4	266393	{"12": {"is_ac": true, "ac_time": 49660.962111, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 50059.821945, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 51937.378497, "is_first_ac": false, "error_number": 1}, "15": {"is_ac": true, "ac_time": 113537.538068, "is_first_ac": false, "error_number": 0}}	2	71
58	2	2	154892	{"12": {"is_ac": true, "ac_time": 77320.316752, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 77572.434312, "is_first_ac": false, "error_number": 0}}	2	109
46	4	2	140070	{"12": {"is_ac": true, "ac_time": 68666.831086, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 69004.062529, "is_first_ac": false, "error_number": 2}}	2	42
55	5	0	0	{"12": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 5}}	2	39
68	4	1	93355	{"13": {"is_ac": true, "ac_time": 89755.275985, "is_first_ac": false, "error_number": 3}}	2	118
65	3	1	84553	{"12": {"is_ac": true, "ac_time": 82153.150954, "is_first_ac": false, "error_number": 2}}	2	113
62	23	3	260636	{"12": {"is_ac": true, "ac_time": 80354.321627, "is_first_ac": false, "error_number": 3}, "13": {"is_ac": true, "ac_time": 80752.654874, "is_first_ac": false, "error_number": 1}, "14": {"is_ac": true, "ac_time": 85130.11376, "is_first_ac": false, "error_number": 8}, "15": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 6}, "16": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 2}}	2	111
56	7	5	384066	{"12": {"is_ac": true, "ac_time": 75214.195583, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": true, "ac_time": 75419.556402, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 75950.642697, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 76667.516573, "is_first_ac": false, "error_number": 1}, "16": {"is_ac": true, "ac_time": 78416.361969, "is_first_ac": false, "error_number": 0}}	2	10
49	3	1	69694	{"12": {"is_ac": true, "ac_time": 69694.485195, "is_first_ac": false, "error_number": 0}}	2	89
48	4	0	0	{"12": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 2}}	2	18
69	2	2	255170	{"12": {"is_ac": true, "ac_time": 90701.710644, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 164469.314209, "is_first_ac": false, "error_number": 0}}	2	119
33	3	2	133511	{"12": {"is_ac": true, "ac_time": 49966.287622, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": true, "ac_time": 82345.517398, "is_first_ac": false, "error_number": 0}}	2	13
67	9	2	185906	{"12": {"is_ac": true, "ac_time": 88247.780881, "is_first_ac": false, "error_number": 4}, "13": {"is_ac": true, "ac_time": 89259.89449, "is_first_ac": false, "error_number": 3}}	2	117
45	13	2	140488	{"12": {"is_ac": true, "ac_time": 69307.976375, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": true, "ac_time": 69981.872769, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 10}}	2	88
66	13	3	274037	{"12": {"is_ac": true, "ac_time": 85411.966945, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 86668.665658, "is_first_ac": false, "error_number": 4}, "14": {"is_ac": true, "ac_time": 89958.89168, "is_first_ac": false, "error_number": 6}}	2	115
50	9	2	311744	{"12": {"is_ac": true, "ac_time": 153345.020319, "is_first_ac": false, "error_number": 4}, "13": {"is_ac": true, "ac_time": 153599.299736, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 3}}	2	90
63	2	2	162290	{"12": {"is_ac": true, "ac_time": 80703.098088, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 81587.81152, "is_first_ac": false, "error_number": 0}}	2	31
70	1	0	0	{"12": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 0}}	2	120
72	2	2	245007	{"12": {"is_ac": true, "ac_time": 122266.973208, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 122741.307648, "is_first_ac": false, "error_number": 0}}	2	104
74	1	1	128483	{"12": {"is_ac": true, "ac_time": 128483.138017, "is_first_ac": false, "error_number": 0}}	2	125
73	5	2	252286	{"12": {"is_ac": true, "ac_time": 124788.478982, "is_first_ac": false, "error_number": 2}, "13": {"is_ac": true, "ac_time": 125098.733085, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 1}}	2	87
78	5	1	153568	{"12": {"is_ac": true, "ac_time": 148768.431441, "is_first_ac": false, "error_number": 4}}	2	132
90	2	1	171574	{"12": {"is_ac": true, "ac_time": 170374.181902, "is_first_ac": false, "error_number": 1}}	2	143
91	5	2	354847	{"12": {"is_ac": true, "ac_time": 175413.768701, "is_first_ac": false, "error_number": 2}, "13": {"is_ac": true, "ac_time": 175834.402747, "is_first_ac": false, "error_number": 1}}	2	145
71	14	4	491921	{"12": {"is_ac": true, "ac_time": 120887.046257, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 121085.307468, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 124062.330191, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 124687.172457, "is_first_ac": false, "error_number": 1}, "16": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 9}}	2	122
23	11	3	135473	{"12": {"is_ac": true, "ac_time": 40167.949557, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 40915.137144, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 50791.594843, "is_first_ac": false, "error_number": 3}, "15": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 5}}	2	64
34	5	5	574899	{"12": {"is_ac": true, "ac_time": 51585.996053, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 51804.079374, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 125106.89327, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 138142.802131, "is_first_ac": false, "error_number": 0}, "16": {"is_ac": true, "ac_time": 208262.075786, "is_first_ac": false, "error_number": 0}}	2	72
57	20	2	283269	{"12": {"is_ac": true, "ac_time": 135966.015679, "is_first_ac": false, "error_number": 9}, "13": {"is_ac": true, "ac_time": 135303.494504, "is_first_ac": false, "error_number": 1}, "15": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 8}}	2	103
10	17	4	24016	{"12": {"is_ac": true, "ac_time": 3324.17455, "is_first_ac": false, "error_number": 2}, "13": {"is_ac": true, "ac_time": 3945.264498, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 6102.743469, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 7045.562718, "is_first_ac": false, "error_number": 1}, "16": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 10}}	2	23
47	12	4	455670	{"12": {"is_ac": true, "ac_time": 69254.548003, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 69588.030543, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 157522.309, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": true, "ac_time": 159306.600151, "is_first_ac": false, "error_number": 0}, "16": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 8}}	2	12
79	9	1	152649	{"12": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 3}, "13": {"is_ac": true, "ac_time": 149049.844724, "is_first_ac": false, "error_number": 3}}	2	133
88	3	1	170441	{"12": {"is_ac": true, "ac_time": 169241.403767, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 1}}	2	35
80	2	1	151729	{"12": {"is_ac": true, "ac_time": 150529.714159, "is_first_ac": false, "error_number": 1}}	2	136
75	12	3	427336	{"12": {"is_ac": true, "ac_time": 135072.090879, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 134029.37157, "is_first_ac": false, "error_number": 1}, "14": {"is_ac": true, "ac_time": 151035.204198, "is_first_ac": false, "error_number": 5}}	2	127
81	2	1	160223	{"12": {"is_ac": true, "ac_time": 159023.988714, "is_first_ac": false, "error_number": 1}}	2	9
92	6	4	950300	{"12": {"is_ac": true, "ac_time": 236227.703534, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 236484.279816, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 237315.035733, "is_first_ac": false, "error_number": 2}, "15": {"is_ac": true, "ac_time": 237874.660042, "is_first_ac": false, "error_number": 0}}	2	85
83	1	1	161029	{"12": {"is_ac": true, "ac_time": 161029.440629, "is_first_ac": false, "error_number": 0}}	2	139
53	13	3	312016	{"12": {"is_ac": true, "ac_time": 72125.677884, "is_first_ac": false, "error_number": 1}, "13": {"is_ac": true, "ac_time": 72899.165509, "is_first_ac": false, "error_number": 0}, "14": {"is_ac": true, "ac_time": 165792.673899, "is_first_ac": false, "error_number": 0}, "15": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 8}}	2	99
84	1	1	161268	{"12": {"is_ac": true, "ac_time": 161268.500217, "is_first_ac": false, "error_number": 0}}	2	138
85	1	1	161708	{"12": {"is_ac": true, "ac_time": 161708.291612, "is_first_ac": false, "error_number": 0}}	2	140
86	2	2	332125	{"12": {"is_ac": true, "ac_time": 165478.811919, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 166647.589299, "is_first_ac": false, "error_number": 0}}	2	79
60	7	2	248846	{"12": {"is_ac": true, "ac_time": 78470.300898, "is_first_ac": false, "error_number": 2}, "14": {"is_ac": true, "ac_time": 167976.706621, "is_first_ac": false, "error_number": 0}}	2	11
87	12	3	514321	{"12": {"is_ac": true, "ac_time": 167256.676571, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": true, "ac_time": 168257.753048, "is_first_ac": false, "error_number": 1}, "14": {"is_ac": true, "ac_time": 172808.125877, "is_first_ac": false, "error_number": 4}, "15": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 4}}	2	141
93	1	1	247804	{"12": {"is_ac": true, "ac_time": 247804.788278, "is_first_ac": false, "error_number": 0}}	2	148
89	8	1	170026	{"12": {"is_ac": true, "ac_time": 170026.769449, "is_first_ac": false, "error_number": 0}, "13": {"is_ac": false, "ac_time": 0, "is_first_ac": false, "error_number": 4}}	2	142
\.


--
-- Data for Name: announcement; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.announcement (id, title, content, create_time, last_update_time, visible, created_by_id) FROM stdin;
3	[SKKU Coding Platform 모의대회]	<p>일시 : 1/4(월) - 1/10(일)</p><p>참여 방법 : 상단의 &#039;SKKU Coding Platform 모의대회&#039; 클 릭 후 참여</p><p>참여 혜택 : 스타벅스 5000원 상품권 증정</p><p>참여 조건 : 한 문제 이상 풀기</p><p><br /></p><p><span style="color: rgb(0, 0, 0);">문의 및 건의 : <span style="color: rgb(51, 51, 51);"><a href="http://pf.kakao.com/_UKraK/chat" rel="nofollow" target="_blank">http://pf.kakao.com/_UKraK/chat</a></span><a href="https://open.kakao.com/o/sXomMjPc" target="_blank"></a></span></p><p><span style="color: rgb(0, 0, 0);">(성균관대학교 코딩 플랫폼 개발 및 발전을 위한 건의 환영합니다)</span></p>	2020-12-31 06:05:15.232671+00	2021-01-03 14:46:10.734113+00	t	1
\.


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add permission	1	add_permission
2	Can change permission	1	change_permission
3	Can delete permission	1	delete_permission
4	Can view permission	1	view_permission
5	Can add group	2	add_group
6	Can change group	2	change_group
7	Can delete group	2	delete_group
8	Can view group	2	view_group
9	Can add session	3	add_session
10	Can change session	3	change_session
11	Can delete session	3	delete_session
12	Can view session	3	view_session
13	Can add content type	4	add_contenttype
14	Can change content type	4	change_contenttype
15	Can delete content type	4	delete_contenttype
16	Can view content type	4	view_contenttype
17	Can add task	5	add_task
18	Can change task	5	change_task
19	Can delete task	5	delete_task
20	Can view task	5	view_task
21	Can add user	6	add_user
22	Can change user	6	change_user
23	Can delete user	6	delete_user
24	Can view user	6	view_user
25	Can add user profile	7	add_userprofile
26	Can change user profile	7	change_userprofile
27	Can delete user profile	7	delete_userprofile
28	Can view user profile	7	view_userprofile
29	Can add announcement	8	add_announcement
30	Can change announcement	8	change_announcement
31	Can delete announcement	8	delete_announcement
32	Can view announcement	8	view_announcement
33	Can add judge server	9	add_judgeserver
34	Can change judge server	9	change_judgeserver
35	Can delete judge server	9	delete_judgeserver
36	Can view judge server	9	view_judgeserver
37	Can add problem	10	add_problem
38	Can change problem	10	change_problem
39	Can delete problem	10	delete_problem
40	Can view problem	10	view_problem
41	Can add problem tag	11	add_problemtag
42	Can change problem tag	11	change_problemtag
43	Can delete problem tag	11	delete_problemtag
44	Can view problem tag	11	view_problemtag
45	Can add acm contest rank	12	add_acmcontestrank
46	Can change acm contest rank	12	change_acmcontestrank
47	Can delete acm contest rank	12	delete_acmcontestrank
48	Can view acm contest rank	12	view_acmcontestrank
49	Can add contest	13	add_contest
50	Can change contest	13	change_contest
51	Can delete contest	13	delete_contest
52	Can view contest	13	view_contest
53	Can add contest announcement	14	add_contestannouncement
54	Can change contest announcement	14	change_contestannouncement
55	Can delete contest announcement	14	delete_contestannouncement
56	Can view contest announcement	14	view_contestannouncement
57	Can add oi contest rank	15	add_oicontestrank
58	Can change oi contest rank	15	change_oicontestrank
59	Can delete oi contest rank	15	delete_oicontestrank
60	Can view oi contest rank	15	view_oicontestrank
61	Can add submission	16	add_submission
62	Can change submission	16	change_submission
63	Can delete submission	16	delete_submission
64	Can view submission	16	view_submission
65	Can add sys options	17	add_sysoptions
66	Can change sys options	17	change_sysoptions
67	Can delete sys options	17	delete_sysoptions
68	Can view sys options	17	view_sysoptions
\.


--
-- Data for Name: contest; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.contest (id, title, description, real_time_rank, password, rule_type, start_time, end_time, create_time, last_update_time, visible, created_by_id, allowed_ip_ranges) FROM stdin;
1	Test Contest	<p>Test Contest</p>	t	1	ACM	2020-12-23 15:00:00+00	2020-12-24 15:00:00+00	2020-12-23 08:47:09.775124+00	2020-12-23 08:49:15.291024+00	f	1	[]
2	SKKU Coding Platform 모의대회	<p>일시 : 1/4(월) - 1/10(일)</p><p>대회 참여 시 스타벅스 5000원 상품권을 드립니다.</p><p>※ 대회 참여 조건 : 한 문제 이상 풀기</p><p><span style="color: rgb(51, 51, 51);">※ 가입 시 입력하신 메일로 상품권 전달해드립니다.</span><br /></p><p><span style="color: rgb(0, 0, 0);">문의 및 건의 :<span style="color: rgb(51, 51, 51);"><a href="http://pf.kakao.com/_UKraK/chat" target="_blank">http://pf.kakao.com/_UKraK/chat</a></span></span></p>	t	\N	ACM	2021-01-03 15:00:00+00	2021-01-10 14:59:59+00	2020-12-31 05:58:59.332909+00	2021-01-04 09:21:56.837715+00	t	1	[]
\.


--
-- Data for Name: contest_announcement; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.contest_announcement (id, title, content, create_time, contest_id, created_by_id, visible) FROM stdin;
1	[SKKU Coding Platform 모의대회]	<p>참여 혜택 : 스타벅스 5000원 상품권 증정<br /></p><p>참여 조건 : 한 문제 이상 풀기</p><p><span style="color: rgb(0, 0, 0);">문의 및 건의 :<span style="color: rgb(51, 51, 51);"><a href="http://pf.kakao.com/_UKraK/chat" rel="nofollow" target="_blank">http://pf.kakao.com/_UKraK/chat</a></span></span></p><p><span style="color: rgb(0, 0, 0);">(성균관대학교 코딩 플랫폼 개발 및 발전 위한 건의 환영합니다)</span></p>	2021-01-03 13:31:01.463959+00	2	1	t
2	D번 문제 Input 정정	<p style="margin-left: 0px;">첫째 줄에는 각각 동아리 부원 수, 친분 관계의 수를 나타내는 두 개의 정 수 $N(2 \\le N \\le 10,000)$, $M(0 \\le M \\le 50,000)$이 주어진다.</p><p>둘째 줄부터 $N$개의 줄에 걸쳐 각 사람이 갚거나 받아야 하는 돈을 나타내는 정수 $a_i(-10,000 \\le a_i \\le 10,000)$가 주어진다. $a_i \\lt 0$인 경우는 빚을 졌다는 뜻이다. $N$개의 정수 $a_i$의 합은 0이다.</p><p>이어서 $M$개의 줄에 걸쳐 <b>두 개의 정수 $x, y (0 \\lt x \\lt y \\le N–1)$가 주어지며</b>, $x, y$는 서로 친분 관계이다.</p><p><br /></p><p>=&gt; 정정하여 <span style="color: rgb(51, 51, 51);"><b>두 개의 정수 $x, y (0 \\le x \\lt y \\le N–1)$가 주어지며</b></span><span style="color: rgb(51, 51, 51);"><b>,</b>입니다</span></p>	2021-01-03 15:25:15.044948+00	2	1	t
3	Python 시간 초과 관련 Issue	<p>E, F번은 Python2 / Python3로는 해결할 수 없는 것으로 확인되었습니다.</p><p>해당 두 문제는 C, C++로 해결하는 것을 권장드립니다.</p><p>미리 확인하지 못한 점 죄송합니다.</p>	2021-01-04 15:10:07.430447+00	2	1	t
4	모의대회 솔루션	<p>1/10 일요일 자정에 대회가 종료된 후, 솔루션이 공개될 예정입니다.</p><p>대회 종료 이후, Problems에 대회에 출제된 문제가 등록되어 다시 풀어보실 수 있습니다.<br /></p>	2021-01-05 08:54:14.177079+00	2	1	t
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	auth	permission
2	auth	group
3	sessions	session
4	contenttypes	contenttype
5	django_dramatiq	task
6	account	user
7	account	userprofile
8	announcement	announcement
9	conf	judgeserver
10	problem	problem
11	problem	problemtag
12	contest	acmcontestrank
13	contest	contest
14	contest	contestannouncement
15	contest	oicontestrank
16	submission	submission
17	options	sysoptions
\.


--
-- Data for Name: django_dramatiq_task; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.django_dramatiq_task (id, status, created_at, updated_at, message_data) FROM stdin;
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	account	0001_initial	2020-12-17 08:13:39.32859+00
2	account	0002_auto_20170209_1028	2020-12-17 08:13:39.356333+00
3	account	0003_userprofile_total_score	2020-12-17 08:13:39.381432+00
4	account	0005_auto_20170830_1154	2020-12-17 08:13:39.412432+00
5	account	0006_user_session_keys	2020-12-17 08:13:39.443787+00
6	account	0008_auto_20171011_1214	2020-12-17 08:13:39.6466+00
7	account	0009_auto_20171125_1514	2020-12-17 08:13:39.652618+00
8	account	0010_auto_20180501_0436	2020-12-17 08:13:39.683892+00
9	account	0011_auto_20180501_0456	2020-12-17 08:13:39.689848+00
10	account	0012_userprofile_language	2020-12-17 08:13:39.695828+00
11	announcement	0001_initial	2020-12-17 08:13:39.715801+00
12	announcement	0002_auto_20171011_1214	2020-12-17 08:13:39.727117+00
13	announcement	0003_auto_20180501_0436	2020-12-17 08:13:39.732273+00
14	contenttypes	0001_initial	2020-12-17 08:13:39.746147+00
15	contenttypes	0002_remove_content_type_name	2020-12-17 08:13:39.756642+00
16	auth	0001_initial	2020-12-17 08:13:39.812592+00
17	auth	0002_alter_permission_name_max_length	2020-12-17 08:13:39.819882+00
18	auth	0003_alter_user_email_max_length	2020-12-17 08:13:39.826622+00
19	auth	0004_alter_user_username_opts	2020-12-17 08:13:39.832436+00
20	auth	0005_alter_user_last_login_null	2020-12-17 08:13:39.836744+00
21	auth	0006_require_contenttypes_0002	2020-12-17 08:13:39.838678+00
22	auth	0007_alter_validators_add_error_messages	2020-12-17 08:13:39.842962+00
23	auth	0008_alter_user_username_max_length	2020-12-17 08:13:39.84867+00
24	auth	0009_alter_user_last_name_max_length	2020-12-17 08:13:39.854517+00
25	conf	0001_initial	2020-12-17 08:13:39.887611+00
26	conf	0002_auto_20171011_1214	2020-12-17 08:13:39.919021+00
27	conf	0003_judgeserver_is_disabled	2020-12-17 08:13:39.930211+00
28	conf	0004_auto_20180501_0436	2020-12-17 08:13:39.945343+00
29	problem	0001_initial	2020-12-17 08:13:39.998182+00
30	contest	0001_initial	2020-12-17 08:13:40.16192+00
31	contest	0002_auto_20170209_0845	2020-12-17 08:13:40.222473+00
32	contest	0003_auto_20170217_0820	2020-12-17 08:13:40.281608+00
33	contest	0004_auto_20170717_1324	2020-12-17 08:13:40.298044+00
34	contest	0005_auto_20170823_0918	2020-12-17 08:13:40.31889+00
35	contest	0006_auto_20171011_1214	2020-12-17 08:13:40.3808+00
36	contest	0007_contestannouncement_visible	2020-12-17 08:13:40.409095+00
37	contest	0008_contest_allowed_ip_ranges	2020-12-17 08:13:40.434856+00
38	contest	0009_auto_20180501_0436	2020-12-17 08:13:40.465583+00
39	contest	0010_auto_20190326_0201	2020-12-17 08:13:40.493896+00
40	django_dramatiq	0001_initial	2020-12-17 08:13:40.50715+00
41	options	0001_initial	2020-12-17 08:13:40.528687+00
42	options	0002_auto_20180501_0436	2020-12-17 08:13:40.535633+00
43	options	0003_migrate_languages_options	2020-12-17 08:13:40.539231+00
44	submission	0001_initial	2020-12-17 08:13:40.568102+00
45	submission	0002_auto_20170509_1203	2020-12-17 08:13:40.582884+00
46	submission	0005_submission_username	2020-12-17 08:13:40.612455+00
47	submission	0006_auto_20170830_1154	2020-12-17 08:13:40.622621+00
48	submission	0007_auto_20170923_1318	2020-12-17 08:13:40.740766+00
49	submission	0008_submission_ip	2020-12-17 08:13:40.749352+00
50	submission	0009_delete_user_output	2020-12-17 08:13:40.765097+00
51	problem	0002_problem__id	2020-12-17 08:13:40.79649+00
52	problem	0003_auto_20170217_0820	2020-12-17 08:13:40.872225+00
53	problem	0004_auto_20170501_0637	2020-12-17 08:13:41.008096+00
54	problem	0005_auto_20170815_1258	2020-12-17 08:13:41.080772+00
55	problem	0006_auto_20170823_0918	2020-12-17 08:13:41.141604+00
56	problem	0008_auto_20170923_1318	2020-12-17 08:13:41.31804+00
57	problem	0009_auto_20171011_1214	2020-12-17 08:13:41.538471+00
58	problem	0010_problem_spj_compile_ok	2020-12-17 08:13:41.575946+00
59	problem	0011_fix_problem_ac_count	2020-12-17 08:13:41.594763+00
60	problem	0012_auto_20180501_0436	2020-12-17 08:13:41.687031+00
61	problem	0013_problem_io_mode	2020-12-17 08:13:41.72484+00
62	problem	0014_problem_share_submission	2020-12-17 08:13:41.75849+00
63	sessions	0001_initial	2020-12-17 08:13:41.779732+00
64	submission	0011_fix_submission_number	2020-12-17 08:13:41.798576+00
65	submission	0012_auto_20180501_0436	2020-12-17 08:13:41.824871+00
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
\.


--
-- Data for Name: judge_server; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.judge_server (id, hostname, ip, judger_version, cpu_core, memory_usage, cpu_usage, last_heartbeat, create_time, task_number, service_url, is_disabled) FROM stdin;
2	c5077d7ca3b3	172.18.0.5	2.1.1	64	8.5	25	2021-01-04 10:29:47.817416+00	2020-12-27 05:13:15.945009+00	0	http://judge-server:8080	f
3	207caedcf104	172.18.0.4	2.1.1	64	8.30000000000000071	0	2021-01-05 14:34:57.03612+00	2021-01-04 10:47:04.90307+00	0	http://judge-server:8080	f
4	9074a737234c	172.18.0.4	2.1.1	64	8.19999999999999929	0	2021-01-06 13:58:41.161331+00	2021-01-05 14:50:10.5906+00	0	http://judge-server:8080	f
\.


--
-- Data for Name: oi_contest_rank; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.oi_contest_rank (id, submission_number, total_score, submission_info, contest_id, user_id) FROM stdin;
\.


--
-- Data for Name: options_sysoptions; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.options_sysoptions (id, key, value) FROM stdin;
7	smtp_config	{}
9	throttling	{"ip": {"capacity": 100, "fill_rate": 0.1, "default_capacity": 50}, "user": {"capacity": 20, "fill_rate": 0.03, "default_capacity": 10}}
10	languages	[{"spj": {"config": {"command": "{exe_path} {in_file_path} {user_out_file_path}", "exe_name": "spj-{spj_version}", "seccomp_rule": "c_cpp"}, "compile": {"exe_name": "spj-{spj_version}", "src_name": "spj-{spj_version}.c", "max_memory": 1073741824, "max_cpu_time": 3000, "max_real_time": 10000, "compile_command": "/usr/bin/gcc -DONLINE_JUDGE -O2 -w -fmax-errors=3 -std=c11 {src_path} -lm -o {exe_path}"}}, "name": "C", "config": {"run": {"env": ["LANG=en_US.UTF-8", "LANGUAGE=en_US:en", "LC_ALL=en_US.UTF-8"], "command": "{exe_path}", "seccomp_rule": {"File IO": "c_cpp_file_io", "Standard IO": "c_cpp"}}, "compile": {"exe_name": "main", "src_name": "main.c", "max_memory": 268435456, "max_cpu_time": 3000, "max_real_time": 10000, "compile_command": "/usr/bin/gcc -DONLINE_JUDGE -O2 -w -fmax-errors=3 -std=c11 {src_path} -lm -o {exe_path}"}, "template": "//PREPEND BEGIN\\n#include <stdio.h>\\n//PREPEND END\\n\\n//TEMPLATE BEGIN\\nint add(int a, int b) {\\n  // Please fill this blank\\n  return ___________;\\n}\\n//TEMPLATE END\\n\\n//APPEND BEGIN\\nint main() {\\n  printf(\\"%d\\", add(1, 2));\\n  return 0;\\n}\\n//APPEND END"}, "description": "GCC 5.4", "content_type": "text/x-csrc"}, {"spj": {"config": {"command": "{exe_path} {in_file_path} {user_out_file_path}", "exe_name": "spj-{spj_version}", "seccomp_rule": "c_cpp"}, "compile": {"exe_name": "spj-{spj_version}", "src_name": "spj-{spj_version}.cpp", "max_memory": 1073741824, "max_cpu_time": 10000, "max_real_time": 20000, "compile_command": "/usr/bin/g++ -DONLINE_JUDGE -O2 -w -fmax-errors=3 -std=c++14 {src_path} -lm -o {exe_path}"}}, "name": "C++", "config": {"run": {"env": ["LANG=en_US.UTF-8", "LANGUAGE=en_US:en", "LC_ALL=en_US.UTF-8"], "command": "{exe_path}", "seccomp_rule": {"File IO": "c_cpp_file_io", "Standard IO": "c_cpp"}}, "compile": {"exe_name": "main", "src_name": "main.cpp", "max_memory": 1073741824, "max_cpu_time": 10000, "max_real_time": 20000, "compile_command": "/usr/bin/g++ -DONLINE_JUDGE -O2 -w -fmax-errors=3 -std=c++14 {src_path} -lm -o {exe_path}"}, "template": "//PREPEND BEGIN\\n#include <iostream>\\n//PREPEND END\\n\\n//TEMPLATE BEGIN\\nint add(int a, int b) {\\n  // Please fill this blank\\n  return ___________;\\n}\\n//TEMPLATE END\\n\\n//APPEND BEGIN\\nint main() {\\n  std::cout << add(1, 2);\\n  return 0;\\n}\\n//APPEND END"}, "description": "G++ 5.4", "content_type": "text/x-c++src"}, {"name": "Java", "config": {"run": {"env": ["LANG=en_US.UTF-8", "LANGUAGE=en_US:en", "LC_ALL=en_US.UTF-8"], "command": "/usr/bin/java -cp {exe_dir} -XX:MaxRAM={max_memory}k -Djava.security.manager -Dfile.encoding=UTF-8 -Djava.security.policy==/etc/java_policy -Djava.awt.headless=true Main", "seccomp_rule": null, "memory_limit_check_only": 1}, "compile": {"exe_name": "Main", "src_name": "Main.java", "max_memory": -1, "max_cpu_time": 5000, "max_real_time": 10000, "compile_command": "/usr/bin/javac {src_path} -d {exe_dir} -encoding UTF8"}, "template": "//PREPEND BEGIN\\n//PREPEND END\\n\\n//TEMPLATE BEGIN\\n//TEMPLATE END\\n\\n//APPEND BEGIN\\n//APPEND END"}, "description": "OpenJDK 1.8", "content_type": "text/x-java"}, {"name": "Python2", "config": {"run": {"env": ["LANG=en_US.UTF-8", "LANGUAGE=en_US:en", "LC_ALL=en_US.UTF-8"], "command": "/usr/bin/python {exe_path}", "seccomp_rule": "general"}, "compile": {"exe_name": "solution.pyc", "src_name": "solution.py", "max_memory": 134217728, "max_cpu_time": 3000, "max_real_time": 10000, "compile_command": "/usr/bin/python -m py_compile {src_path}"}, "template": "//PREPEND BEGIN\\n//PREPEND END\\n\\n//TEMPLATE BEGIN\\n//TEMPLATE END\\n\\n//APPEND BEGIN\\n//APPEND END"}, "description": "Python 2.7", "content_type": "text/x-python"}, {"name": "Python3", "config": {"run": {"env": ["LANG=en_US.UTF-8", "LANGUAGE=en_US:en", "LC_ALL=en_US.UTF-8", "PYTHONIOENCODING=utf-8"], "command": "/usr/bin/python3 {exe_path}", "seccomp_rule": "general"}, "compile": {"exe_name": "__pycache__/solution.cpython-36.pyc", "src_name": "solution.py", "max_memory": 134217728, "max_cpu_time": 3000, "max_real_time": 10000, "compile_command": "/usr/bin/python3 -m py_compile {src_path}"}, "template": "//PREPEND BEGIN\\n//PREPEND END\\n\\n//TEMPLATE BEGIN\\n//TEMPLATE END\\n\\n//APPEND BEGIN\\n//APPEND END"}, "description": "Python 3.6", "content_type": "text/x-python"}, {"name": "Golang", "config": {"run": {"env": ["GODEBUG=madvdontneed=1", "LANG=en_US.UTF-8", "LANGUAGE=en_US:en", "LC_ALL=en_US.UTF-8"], "command": "{exe_path}", "seccomp_rule": "", "memory_limit_check_only": 1}, "compile": {"env": ["GOCACHE=/tmp"], "exe_name": "main", "src_name": "main.go", "max_memory": 1073741824, "max_cpu_time": 3000, "max_real_time": 5000, "compile_command": "/usr/bin/go build -o {exe_path} {src_path}"}, "template": "//PREPEND BEGIN\\n//PREPEND END\\n\\n//TEMPLATE BEGIN\\n//TEMPLATE END\\n\\n//APPEND BEGIN\\n//APPEND END"}, "description": "Golang 1.14", "content_type": "text/x-go"}]
1	website_base_url	"http://127.0.0.1"
2	website_name	"SKKU"
3	website_name_shortcut	"SKKU Coding Platform"
4	website_footer	"SKKU Coding Platform"
5	allow_register	true
6	submission_list_show_all	true
8	judge_server_token	"CHANGE_THIS"
\.


--
-- Data for Name: problem; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.problem (id, title, description, input_description, output_description, samples, test_case_id, test_case_score, hint, languages, template, create_time, last_update_time, time_limit, memory_limit, spj, spj_language, spj_code, spj_version, rule_type, visible, difficulty, source, submission_number, accepted_number, created_by_id, _id, statistic_info, total_score, contest_id, is_public, spj_compile_ok, io_mode, share_submission) FROM stdin;
12	가파른 경사	<p>처음으로 인사캠을 방문한 율전이는 너무나 가파른 오르막길에 놀랐다. 이를 본 율전이는 인사캠의 경사가 얼마나 심한지 알기 위해 네 지점의 높이를 측정하기로 마음먹었다. 이때 율전이는 측정한 높이를 다음과 같이 네 가지 경우로 나누려고 한다. (단, 측정한 순서는 유지한다)</p><p style="margin-left: 38pt;">1. 4개의 증가(strictly increasing)하는 높이를 읽은 경우(“Uphill”) (예: 3 4 7 9)</p><p style="margin-left: 38pt;">2. 4개의 감소(strictly decreasing)하는 높이를 읽은 경우(“Downhill”) (예: 9 6 5 2)</p><p style="margin-left: 38pt;">3. 4개의 일정한 높이를 읽은 경우(“Flat Land”) (예: 5 5 5 5)</p><p style="margin-left: 38pt;">4. 위 경우 중 어느 것에도 속하지 않는 경우(“Unknown”)</p><p>율전이가 측정한 높이가 주어졌을 때, 어떤 경우에 속하는지 출력하라.</p>	<p>네 줄에 걸쳐 높이 $h_i$가 주어진다. (0 $\\lt h_i \\le$ 100)<br /></p>	<p>만약 네 개의 높이가 증가(strictly increasing)하면 “Uphill”, 감소(strictly decreasing)하면 “Downhill”을 출력한다. 또한 높이가 일정하다면 “Flat Land”를 출력하고, 어느 경우에도 속하지 않으면 “Unknown”을 출력한다.<br /></p>	[{"input": "1\\n10\\n12\\n13\\n", "output": "Uphill"}]	595fb3de66e601bd39565b92ba606c9e	[{"score": 20, "input_name": "1.in", "output_name": "1.out"}, {"score": 20, "input_name": "2.in", "output_name": "2.out"}, {"score": 20, "input_name": "3.in", "output_name": "3.out"}, {"score": 20, "input_name": "4.in", "output_name": "4.out"}, {"score": 20, "input_name": "5.in", "output_name": "5.out"}]		["C", "C++", "Golang", "Java", "Python2", "Python3"]	{}	2021-01-02 07:55:02.90826+00	\N	2000	512	f	\N	\N	\N	ACM	t	Low		214	80	1	A	{"0": 80, "1": 1, "4": 7, "-1": 94, "-2": 32}	0	2	f	f	{"input": "input.txt", "output": "output.txt", "io_mode": "Standard IO"}	f
6	문제 출력 테스트	HI!!	<p><span style="color: rgb(51, 51, 51);">개설자는리그베다 위키 게시판에유동닉으로 처음 등장했으며, 2015년 4월 내내 아직 정확한 신원을 밝히지 않고 있다. 나무위키 개설자들은 특정 단체나 집단의 이익을 위해 행동하고 있지 않으며, 나무위키 개설자들은 지식의 사유화를 반대하며 평화로운 방식으로 지식의 자유로운 공유를 지원하는 것이 목표라고 한다.</span><span style="color: rgb(51, 51, 51);">2015년 4월 26일 자정 무렵, syndrome이라는 아이디로&quot;(공식) 이때까지 나온 나무위키에 대한 질문에 대한 답변입니다.&quot;라는 글이 올라왔다. 이후 해당 글이 위키 게시판으로 이전된 상태다.</span><span style="color: rgb(51, 51, 51);">개설자들이 신원을 밝히지 않는 이유는 법적 분쟁을 의식해서다. 일단 신원이 밝혀지는 순간 해당 위키의 문서들에 불만이 있는 개인 혹은 단체들이 사방에서 고소를 걸 가능성이 100% 인데다[9]리그베다 위키 측에서 법무법인을 동원한 광범위한 고소를 할 가능성도 배제할 수 없으므로 익명을 유지하고 있다. 일단 관리자의답변에 따르면보안관련 일을 하고 있다고 한다.</span><br /></p>	<p><span style="color: rgb(51, 51, 51);">개설자는리그베다 위키 게시판에유동닉으로 처음 등장했으며, 2015년 4월 내내 아직 정확한 신원을 밝히지 않고 있다. 나무위키 개설자들은 특정 단체나 집단의 이익을 위해 행동하고 있지 않으며, 나무위키 개설자들은 지식의 사유화를 반대하며 평화로운 방식으로 지식의 자유로운 공유를 지원하는 것이 목표라고 한다.</span><span style="color: rgb(51, 51, 51);">2015년 4월 26일 자정 무렵, syndrome이라는 아이디로&quot;(공식) 이때까지 나온 나무위키에 대한 질문에 대한 답변입니다.&quot;라는 글이 올라왔다. 이후 해당 글이 위키 게시판으로 이전된 상태다.</span><span style="color: rgb(51, 51, 51);">개설자들이 신원을 밝히지 않는 이유는 법적 분쟁을 의식해서다. 일단 신원이 밝혀지는 순간 해당 위키의 문서들에 불만이 있는 개인 혹은 단체들이 사방에서 고소를 걸 가능성이 100% 인데다[9]리그베다 위키 측에서 법무법인을 동원한 광범위한 고소를 할 가능성도 배제할 수 없으므로 익명을 유지하고 있다. 일단 관리자의답변에 따르면보안관련 일을 하고 있다고 한다.</span><br /></p>	[{"input": "N", "output": "G"}]	6d4ae49d258f2cd61088d9f30e4a8112	[{"score": 50, "input_name": "1.in", "output_name": "1.out"}, {"score": 50, "input_name": "2.in", "output_name": "2.out"}]		["C", "C++", "Golang", "Java", "Python2", "Python3"]	{}	2020-12-31 11:43:55.197949+00	\N	1000	256	f	\N	\N	\N	ACM	f	Low		0	0	1	Z	{}	0	\N	f	f	{"input": "input.txt", "output": "output.txt", "io_mode": "Standard IO"}	f
10	가파른 경사	<p>처음으로 인사캠을 방문한 율전이는 너무나 가파른 오르막길에 놀랐다.이를본 율전이는 인사캠의 경사가 얼마나 심한지 알기 위해 네 지점의 높이를 측정하기로 마음먹었다.이때율전이는 측정한 높이를 다음과 같이 네 가지 경우로 나누려고 한다. (단,측정한 순서는 유지한다)</p><p style="margin-left: 38pt;">1.4개의 강한 단조증가(strictly increasing)하는 높이를 읽은 경우(“Uphill”)(예: 3 4 7 9)</p><p style="margin-left: 38pt;">2.4개의 강한 단조감소(strictly decreasing)하는 높이를 읽은 경우(“Downhill”)(예: 9 6 5 2)</p><p style="margin-left: 38pt;">3.4개의 일정한 높이를 읽은 경우(“Flat Land”) (예: 5 5 5 5)</p><p style="margin-left: 38pt;">4.위 경우 중 어느 것에도 속하지 않는 경우(“Unknown”)</p><p>율전이가 측정한 높이가 주어졌을 때,어떤 경우에 속하는지 출력하라.</p>	<p>네 줄에 걸쳐 높이 $h_i$가 주어진다.(0 &lt; $h_i \\le$ 100)<br /></p>	<p>만약 네 개의 높이가 강한 단조증가(strictly increasing)면“Uphill”,강한 단조감소(strictly decreasing)면“Downhill”을 출력한다.또한 높이가 일정하다면“Flat Land”를 출력하고,어느 경우에도 속하지 않으면“Unknown”을 출력한다.<br /></p>	[{"input": "1\\n10\\n12\\n13\\n", "output": "Uphill"}]	9130c1c1db738bb7d9d9c6580ccf2933	[{"score": 20, "input_name": "1.in", "output_name": "1.out"}, {"score": 20, "input_name": "2.in", "output_name": "2.out"}, {"score": 20, "input_name": "3.in", "output_name": "3.out"}, {"score": 20, "input_name": "4.in", "output_name": "4.out"}, {"score": 20, "input_name": "5.in", "output_name": "5.out"}]		["C", "C++", "Golang", "Java", "Python2", "Python3"]	{}	2021-01-02 07:14:47.225125+00	\N	1000	256	f	\N	\N	\N	ACM	f	Low		0	0	1	A	{}	0	\N	f	f	{"input": "input.txt", "output": "output.txt", "io_mode": "Standard IO"}	f
15	채권관계	<p>드디어 동아리방이 생긴 NPC는 동아리방 물품을 구입하는 데 한창이다. 돈에는 신경쓰지 않고 물품 구입에 너무나 열중한 나머지, NPC 부원들이 서로에게 빚을 졌다. NPC에서 돈을 갚을 때에는 자신과 친분 관계에 있는 사람한테만 돈을 갚을 수 있다.</p><p>다음 학기 활동 전에는 모든 사람의 빚을 없애야 정상적인 활동이 가능하기에, 빚을 없애는 것이 가능한지 확인하려고 한다.<br /></p>	 <p>첫째 줄에는 각각 동아리 부원 수, 친분 관계의 수를 나타내는 두 개의 정수 $N(2 \\le N \\le 10,000)$, $M(0 \\le M \\le 50,000)$이 주어진다.</p><p>둘째 줄부터 $N$개의 줄에 걸쳐 각 사람이 갚거나 받아야 하 는 돈을 나타내는 정수 $a_i(-10,000 \\le a_i \\le 10,000)$가 주어진다. $a_i \\lt 0$인 경우는 빚을 졌다는 뜻이다. $N$개의 정수 $a_i$의 합은 0이다.</p><p>이어서 $M$개의 줄에 걸쳐 두 개의 정수 $x, y (0 \\le x \\lt y \\le N–1)$가 주어지며, $x, y$는 서로 친분 관계이다.</p>	<p>모든 사람의 빚을 없애는 것이 가능하면 “POSSIBLE”, 불가능하면 “IMPOSSIBLE”을 출력한다.<br /></p>	[{"input": "5 3\\n100\\n-75\\n-25\\n-42\\n42\\n0 1\\n1 2\\n3 4\\n", "output": "POSSIBLE"}]	a2d3795ff003735ec5be7a155a732775	[{"score": 11, "input_name": "1.in", "output_name": "1.out"}, {"score": 11, "input_name": "2.in", "output_name": "2.out"}, {"score": 11, "input_name": "3.in", "output_name": "3.out"}, {"score": 11, "input_name": "4.in", "output_name": "4.out"}, {"score": 11, "input_name": "5.in", "output_name": "5.out"}, {"score": 11, "input_name": "6.in", "output_name": "6.out"}, {"score": 11, "input_name": "7.in", "output_name": "7.out"}, {"score": 11, "input_name": "8.in", "output_name": "8.out"}, {"score": 11, "input_name": "9.in", "output_name": "9.out"}]		["C", "C++", "Golang", "Java", "Python2", "Python3"]	{}	2021-01-02 12:22:26.113175+00	\N	1000	256	f	\N	\N	\N	ACM	t	Low		78	18	1	D	{"0": 18, "1": 6, "3": 2, "4": 18, "-1": 32, "-2": 2}	0	2	f	f	{"input": "input.txt", "output": "output.txt", "io_mode": "Standard IO"}	f
13	회전 표지판	<p>예술가 민정이는 바람에 자유롭게 회전해도 알아볼 수 있는 표지판을 만들려고 한다. 이러한 표지판을 만들기 위해 민정이는 180도 회전해도 변하지 않는 문자인 H, I, N, O, S, X, Z 만을 사용할 수 있다.</p><p>단어를 보고, 그 단어가 회전 표지판­에 사용될 수 있는지를 결정하는 프로그램을 작성하라.</p>	<p>공백 없이 알파벳 대문자로만 이루어진 하나의 문자열 $S$가 주어진다. 문자열의 길이는 30을 넘지 않는다.<br /></p>	<p>단어 $S$가 회전 표지판에 사용될 수 있다면 YES를, 사용될 수 없다면 NO를 출력한다.<br /></p>	[{"input": "SHINS", "output": "YES"}, {"input": "NO", "output": "YES"}, {"input": "SHOW", "output": "NO"}]	43bc2af24c18f0948bab7fb0e77b5d98	[{"score": 10, "input_name": "1.in", "output_name": "1.out"}, {"score": 10, "input_name": "2.in", "output_name": "2.out"}, {"score": 10, "input_name": "3.in", "output_name": "3.out"}, {"score": 10, "input_name": "4.in", "output_name": "4.out"}, {"score": 10, "input_name": "5.in", "output_name": "5.out"}, {"score": 10, "input_name": "6.in", "output_name": "6.out"}, {"score": 10, "input_name": "7.in", "output_name": "7.out"}, {"score": 10, "input_name": "8.in", "output_name": "8.out"}, {"score": 10, "input_name": "9.in", "output_name": "9.out"}, {"score": 10, "input_name": "10.in", "output_name": "10.out"}]		["C", "C++", "Golang", "Java", "Python2", "Python3"]	{}	2021-01-02 12:09:36.643292+00	\N	1000	128	f	\N	\N	\N	ACM	t	Low		111	58	1	B	{"0": 58, "4": 23, "-1": 20, "-2": 10}	0	2	f	f	{"input": "input.txt", "output": "output.txt", "io_mode": "Standard IO"}	f
14	붕어빵	<p>겨울이 되어 길거리 곳곳에서 붕어빵을 팔고 있다. 성균이가 운영하는 붕어빵 가게 앞에는 $N$명의 손님이 한 줄로 서 있다. 각 손님은 $a_i$개의 붕어빵을 사려고 한다.</p><p>성균이는 같은 개수의 붕어빵을 구매 하는 손님들이 연속되어 있으면 담는 것이 더 수월하리라 생각한다. 따라서 특정 손님을 정하고, 그 손님이 사려고 하는 붕어빵의 개수와 같은 개수의 붕어빵을 사려고 하는 손님들을 줄에서 모두 내보내려고 한다.</p><p>어떤 특정 개수의 붕어빵을 사려고 하는 사람들을 줄에서 내보내야, 같은 개수의 붕어빵을 사려고 하는 사람들이 연속된 구간 중 가장 긴 것의 길이가 최대가 되는지 구하는 프로그램을 작성하라.</p>	<p>첫째 줄에 손님 수 $N$이 주어진다. $(1 \\le N \\le 1000)$ 둘째 줄부터 $N$개의 줄에 걸쳐 가게 앞에 서 있는 순서대로 각 손님이 사려고 하는 붕어빵의 개수 $a_i$가 주어진다. $(0\\le a_i \\le 1,000,000)$ 항상 두 개 이상의 서로 다른 $a_i$가 존재한다.<br /></p>	<p>성균이가 만들 수 있는 같은 개수의 붕어빵을 원하는 손님들의 연속된 구간 중,가장 긴 것의 길이를 출력한다.<br /></p>	[{"input": "9\\n2\\n7\\n3\\n7\\n7\\n3\\n7\\n5\\n7\\n", "output": "4"}]	2fba6fa050bc13a581b05ce29264cec0	[{"score": 5, "input_name": "1.in", "output_name": "1.out"}, {"score": 5, "input_name": "2.in", "output_name": "2.out"}, {"score": 5, "input_name": "3.in", "output_name": "3.out"}, {"score": 5, "input_name": "4.in", "output_name": "4.out"}, {"score": 5, "input_name": "5.in", "output_name": "5.out"}, {"score": 5, "input_name": "6.in", "output_name": "6.out"}, {"score": 5, "input_name": "7.in", "output_name": "7.out"}, {"score": 5, "input_name": "8.in", "output_name": "8.out"}, {"score": 5, "input_name": "9.in", "output_name": "9.out"}, {"score": 5, "input_name": "10.in", "output_name": "10.out"}, {"score": 5, "input_name": "11.in", "output_name": "11.out"}, {"score": 5, "input_name": "12.in", "output_name": "12.out"}, {"score": 5, "input_name": "13.in", "output_name": "13.out"}, {"score": 5, "input_name": "14.in", "output_name": "14.out"}, {"score": 5, "input_name": "15.in", "output_name": "15.out"}, {"score": 5, "input_name": "16.in", "output_name": "16.out"}, {"score": 5, "input_name": "17.in", "output_name": "17.out"}, {"score": 5, "input_name": "18.in", "output_name": "18.out"}, {"score": 5, "input_name": "19.in", "output_name": "19.out"}, {"score": 5, "input_name": "20.in", "output_name": "20.out"}, {"score": 5, "input_name": "21.in", "output_name": "21.out"}, {"score": 5, "input_name": "22.in", "output_name": "22.out"}]	<p>줄에 서 있는 9명의 손님들이 사려고 하는 붕어빵의 개수는 2, 7, 3, 7, 7, 3, 7, 5, 7이다.</p><p>3개를 사려고 하는 사람을 줄에서 내보내면, 줄은 2, 7, 7, 7, 7, 5, 7이 된다. 이 때 7개를 사려고 하는 사람 4명이 연속된 구간이 가장 길이가 긴 구간이다.</p>	["C", "C++", "Golang", "Java", "Python2", "Python3"]	{}	2021-01-02 12:15:17.912225+00	\N	1000	128	f	\N	\N	\N	ACM	t	Mid		81	27	1	C	{"0": 27, "1": 9, "4": 12, "-1": 28, "-2": 5}	0	2	f	f	{"input": "input.txt", "output": "output.txt", "io_mode": "Standard IO"}	f
17	천재 디자이너	<p>프리랜서로 일하는 디자이너 지환이는 일렬로 이어진 $N$개의 칸을 색칠해달라는 클라이언트의 요청을 받았다. 지환이는 열심히 색을 골라서 색 조합을 클라이언트에게 전송했고, 스스로가 생각하기에도 이번 디자인은 정말 잘 뽑힌 것 같았다. 이번 외주도 별문제 없이 해결했을거로 생각한 지환이는 오랜 시간 동안 고민해오던 시력 교정 수술을 예약했다. 평소에 마스크를 끼면 자꾸 안경에 김이 서려서 화가 났었기 때문이다.</p><p>수술 후에 클라이언트의 연락을 받은 지환이는 생각보다 너무나도 까다로운 클라이언트의 피드백에 놀라지 않을 수 없었다. 클라이언트는 총 $Q$개의 구간을 제시했다. 그리고 그 $Q$개의 구간 안에서는 각 칸이 모두 다른 색으로 구성되었으면 좋겠다고 말했다. 지환이는 마음속으로 “진작 이렇게 말하지…” 라는 생각을 했지만 금방 수정본을 만들어서 보내겠다고 말했다.</p><p>문제는 시력 교정 수술이었다. 안과에서는 자외선을 조심하라고 말했지만, 지환이는 이를 모니터 화면을 보면 안 된다고 오해하고 있던 것이다. 화면을 안 보고 디자인을 수정할 수는 없지만, 지환이는 천재 디자이너였기 때문에 자신의 디자인을 어느 정도 기억하고 있었다.</p><p>지환이는 자신이 지금까지 쓴 색들이 무엇인지와, 어떤 위치에 있는 색이 마음에 들었는지를 기억하고 있었고, 마음에 안 드는 위치부터 지금까지 쓰지 않은 새로운 색으로 하나씩 수정하여 클라이언트에게 수정본을 보내야겠다고 생각했다.</p><p>이때, 지환이가 몇 번째 수정본에서 클라이언트가 만족하는 디자인을 만들 수 있을지를 출력하라.</p><p><u>주의: 해당 문제는 Python2 / Python3로는 해결할 수 없습니다. C / C++을 이용하여 해결하는 것을 권장합니다.</u></p>	<p>첫째 줄에는 알파벳 소문자로 이루어진 $N (1 \\le N \\le 10^5)$개의 색이 문자열로 주어진다.</p><p>둘째 줄에는 구간의 개수 $Q (1 \\le Q \\le 10^5)$가 주어진다.</p><p>그 다음 $Q$개의 줄에 걸쳐 각 구간이 $a_i$와 $b_i$로 주어진다. $(1 \\le a_i \\le b_i \\le N)$ 이는 $a_i$번째 칸부터 $b_i$번째 칸까지의 구간을 의미한다.</p><p>마지막 줄에는 지환이가 초안에서 마음에 들지 않았던 위치부터 가장 마음에 드는 위치까지 총 $N$개의 서로 다른 위치가 주어진다.</p>	 <p>몇 번째 수정본에서 클라이언트가 만족하는 디자인을 만들 수 있을지 0 이상의 정수로 출력한다.<br /></p>	[{"input": "aaaaa\\n2\\n1 2\\n4 5\\n2 4 1 5 3\\n", "output": "2"}, {"input": "abbabaab\\n3\\n1 3\\n4 7\\n3 5\\n6 3 5 1 4 2 7 8\\n", "output": "5"}, {"input": "abcd\\n1\\n1 4\\n1 2 3 4\\n", "output": "0"}]	46d110d202d1fef9c7ece9ad1a1ec351	[{"score": 3, "input_name": "1.in", "output_name": "1.out"}, {"score": 3, "input_name": "2.in", "output_name": "2.out"}, {"score": 3, "input_name": "3.in", "output_name": "3.out"}, {"score": 3, "input_name": "4.in", "output_name": "4.out"}, {"score": 3, "input_name": "5.in", "output_name": "5.out"}, {"score": 3, "input_name": "6.in", "output_name": "6.out"}, {"score": 3, "input_name": "7.in", "output_name": "7.out"}, {"score": 3, "input_name": "8.in", "output_name": "8.out"}, {"score": 3, "input_name": "9.in", "output_name": "9.out"}, {"score": 3, "input_name": "10.in", "output_name": "10.out"}, {"score": 3, "input_name": "11.in", "output_name": "11.out"}, {"score": 3, "input_name": "12.in", "output_name": "12.out"}, {"score": 3, "input_name": "13.in", "output_name": "13.out"}, {"score": 3, "input_name": "14.in", "output_name": "14.out"}, {"score": 3, "input_name": "15.in", "output_name": "15.out"}, {"score": 3, "input_name": "16.in", "output_name": "16.out"}, {"score": 3, "input_name": "17.in", "output_name": "17.out"}, {"score": 3, "input_name": "18.in", "output_name": "18.out"}, {"score": 3, "input_name": "19.in", "output_name": "19.out"}, {"score": 3, "input_name": "20.in", "output_name": "20.out"}, {"score": 3, "input_name": "21.in", "output_name": "21.out"}, {"score": 3, "input_name": "22.in", "output_name": "22.out"}, {"score": 3, "input_name": "23.in", "output_name": "23.out"}, {"score": 3, "input_name": "24.in", "output_name": "24.out"}, {"score": 3, "input_name": "25.in", "output_name": "25.out"}, {"score": 3, "input_name": "26.in", "output_name": "26.out"}, {"score": 3, "input_name": "27.in", "output_name": "27.out"}, {"score": 3, "input_name": "28.in", "output_name": "28.out"}, {"score": 3, "input_name": "29.in", "output_name": "29.out"}, {"score": 3, "input_name": "30.in", "output_name": "30.out"}, {"score": 3, "input_name": "31.in", "output_name": "31.out"}]		["C", "C++", "Golang", "Java", "Python2", "Python3"]	{}	2021-01-02 12:32:42.267502+00	\N	2000	512	f	\N	\N	\N	ACM	t	High		11	5	1	F	{"0": 5, "1": 1, "-1": 5}	0	2	f	f	{"input": "input.txt", "output": "output.txt", "io_mode": "Standard IO"}	f
16	타일 교환	<p>민수는 최근에 마트에서 구입한 정사각형 타일들을 사용하여 동아리방 바닥을 리모델링하려고 한다. 하지만 민수는 구입하기 전에 동아리방의 크기를 제대로 측정하지 않아, 타일 중 일부를 다른 크기의 새로운 정사각형 타일들로 교환해야 한다.</p><p>민수가 구매한 $N$개의 정사각형 타일들의 길이는 각각 $a_1…a_N$이다. 민수는 타일들의 총면적이 $M$이 되도록 이들 중 일부를 새로운 정사각형 타일로 교환하려 한다.</p><p>때마침 마트에서 현재 특별 이벤트를 진행해서, 길이 $a_i$의 타일을 길이 $b_i$로 변경할 때 $|a_i-b_i |^2$ 만큼의 비용을 지불하면 된다. 그러나 이 이벤트는 직접 구입한 타일에만 적용되기 때문에 다른 타일을 교환하여 얻은 타일은 교환할 수 없다.</p><p>이때, 타일들의 총면적이 $M$이 되도록 타일 교환을 하는 데에 필요한 최소 비용을 구하는 프로그램을 작성하라.</p><p><u>주의: 해당 문제는 Python2 / Python3로는 해결할 수 없습니다. C / C++을 이용하여 해결하는 것을 권장합니다.</u></p>	<p>첫째 줄에 $N(1 \\le N \\le 10)$과 $M(1 \\le M \\le 10,000)$이 주어진다.</p><p>둘째 줄부터 $N$개의 줄에 걸쳐 각 정사각형 타일의 길이 $a_i (1 \\le a_i \\le 100)$가 주어진다.</p>	<p>총면적이 $M$이 되도록 하는 타일 교환의 최소 비용을 출력한다. 총면적이 $M$이 될 수 없는 경우는 -1을 출력한다.<br /></p>	[{"input": "3 6\\n3\\n3\\n1\\n", "output": "5"}]	ea7df202570834f1fc5700228e811c8e	[{"score": 8, "input_name": "1.in", "output_name": "1.out"}, {"score": 8, "input_name": "2.in", "output_name": "2.out"}, {"score": 8, "input_name": "3.in", "output_name": "3.out"}, {"score": 8, "input_name": "4.in", "output_name": "4.out"}, {"score": 8, "input_name": "5.in", "output_name": "5.out"}, {"score": 8, "input_name": "6.in", "output_name": "6.out"}, {"score": 8, "input_name": "7.in", "output_name": "7.out"}, {"score": 8, "input_name": "8.in", "output_name": "8.out"}, {"score": 8, "input_name": "9.in", "output_name": "9.out"}, {"score": 8, "input_name": "10.in", "output_name": "10.out"}, {"score": 8, "input_name": "11.in", "output_name": "11.out"}, {"score": 8, "input_name": "12.in", "output_name": "12.out"}]	<p>3개의 타일이 있고, 두 개의 타일은 길이가 3인 정사각형이고, 한 개의 타일은 길이가 1인 정사각형이다. 이 것들을 총면적이 6이 되도록 교환하려 한다.</p><p>길이가 3인 정사각형 중 하나를 길이가 2인 정사각형으로 바꾸고, 길이가 3인 나머지 정사각형 하나를 길이가 1인 정사각형으로 바꾼다. 이렇게 하면 원하는 면적 4+1+1=6을 얻을 수 있으며 교환 비용은 4+1=5이다.</p>	["C", "C++", "Golang", "Java", "Python2", "Python3"]	{}	2021-01-02 12:27:07.606365+00	\N	1000	128	f	\N	\N	\N	ACM	t	Mid		79	7	1	E	{"0": 7, "1": 13, "3": 2, "4": 17, "-1": 38, "-2": 2}	0	2	f	f	{"input": "input.txt", "output": "output.txt", "io_mode": "Standard IO"}	f
20	사이클 분할	<p>가중치가 있는 무방향 간선들로 이루어진 $N$개의 정점의 완전 그래프가 있다. ($N$은 홀수)</p><p>$K$개의 간선들로 이루어진 배열 $[e_1,e_2,…,e_K ]$을 ‘사이클 배열’이라 하고, 다음을 만족한다고 하자.</p><ul><li>$K \\gt1$</li><li>임의의 $i$ $(1 \\le i \\le K)$에 대해 간선 $e_i$는 $e_{i-1}$과 정확히 하나의 정점을 공유하고 $e_{i+1}$과도 정확히 하나의 정점을 공유하며, 이 정점들은 서로 다르다. ($e_0=e_K$, $e_1=e_{K+1}$로 간주한다)</li></ul><p>‘사이클 배열’의 간선들이 사이클을 형성함은 명백하다.</p><p>함수 $f(e_1, e_2 )$는 간선 $e_1, e_2$를 매개변수로 취하고 $e_1$과 $e_2$의 가중치 중 최대값을 반환하는 것으로 정의한다.</p><p>‘사이클 배열’ $C=[e_1, e_2, …, e_K ]$에 대해, ‘사이클 배열의 비용’을 1부터 $K$까지 모든 $i$에 대한 $f(e_i, e_{i+1} )$의 합으로 정의하자. ($e_1=e_{K+1}$로 간주한다)</p><p>그래프에 대한 ‘사이클 분할’을 교집합이 없는 ‘사이클 배열’들의 집합으로 정의하자. ‘사이클 분할’의 원소들의 합집합은 그래프의 모든 간선들을 포함해야 한다. ‘사이클 분할의 비용’을 ‘사이클 분할’에 포함되어 있는 ‘사이클 배열’들의 비용의 합으로 정의하자.</p><p>하나의 그래프에 대해 다양한 ‘사이클 분할’이 존재할 수 있을 것이다. 그래프가 주어지면, 가장 비용이 낮은 사이클 분할을 찾고, 그 비용을 출력하는 프로그램을 작성하라.</p>	<p>첫째 줄에 정점의 개수 $N$이 주어진다. ($3 \\le N \\lt 1,000$, $N$은 홀수)</p><p>둘째 줄부터 $\\frac{N(N-1)}{2} $개의 줄에는 세 정수 $u,v,w$ $(1 \\le u, v \\le N, u \\ne v, 1 \\le w \\le 10^9 )$가 주어진다. 정점 $u$와 정점 $v$ 사이에 가중치 $w$의 간선이 있다는 뜻이다.</p>	<p>첫째 줄에 그래프에 대한 ‘사이클 분할의 비용’의 최솟값을 하나의 정수로 출력한다.<br /></p>	[{"input": "3\\n1 2 1\\n2 3 1\\n3 1 1", "output": "3"}, {"input": "5\\n4 5 4\\n1 3 4\\n1 2 4\\n3 2 3\\n3 5 2\\n1 4 3\\n4 2 2\\n1 5 4\\n5 2 4\\n3 4 2", "output": "35"}]	d7784a8aafc47330e4311baa7d3e07cd	[{"score": 5, "input_name": "1.in", "output_name": "1.out"}, {"score": 5, "input_name": "2.in", "output_name": "2.out"}, {"score": 5, "input_name": "3.in", "output_name": "3.out"}, {"score": 5, "input_name": "4.in", "output_name": "4.out"}, {"score": 5, "input_name": "5.in", "output_name": "5.out"}, {"score": 5, "input_name": "6.in", "output_name": "6.out"}, {"score": 5, "input_name": "7.in", "output_name": "7.out"}, {"score": 5, "input_name": "8.in", "output_name": "8.out"}, {"score": 5, "input_name": "9.in", "output_name": "9.out"}, {"score": 5, "input_name": "10.in", "output_name": "10.out"}, {"score": 5, "input_name": "11.in", "output_name": "11.out"}, {"score": 5, "input_name": "12.in", "output_name": "12.out"}, {"score": 5, "input_name": "13.in", "output_name": "13.out"}, {"score": 5, "input_name": "14.in", "output_name": "14.out"}, {"score": 5, "input_name": "15.in", "output_name": "15.out"}, {"score": 5, "input_name": "16.in", "output_name": "16.out"}, {"score": 5, "input_name": "17.in", "output_name": "17.out"}, {"score": 5, "input_name": "18.in", "output_name": "18.out"}, {"score": 5, "input_name": "19.in", "output_name": "19.out"}]	<p>예제에서 입력되는 순서대로 간선에 번호를 매겨보자. $i$번째 간선을 $e_i$라고 하자.</p><p>첫 번째 예제에서 유일하게 가능한 사이클 분할은 $S=\\{[e_1,e_2,e_3 ]\\}$이다. $f(e_1,e_2 ) + f(e_2,e_3 ) + f(e_3,e_1 ) = 1+1+1=3$</p><p>두 번째 예제에서 최적의 사이클 분할은 $S=\\{[e_3,e_8,e_9 ],[e_2,e_4,e_7,e_{10},e_5,e_1,e_6 ]\\}$이다. $[e_3,e_8,e_9 ]$의 비용은 12이고, $[e_2,e_4,e_7,e_{10},e_5,e_1,e_6 ]$의 비용은 23이다. 따라서 사이클 분할의 비용은 35이다.</p>	["C", "C++", "Golang", "Java", "Python2", "Python3"]	{}	2021-01-02 14:44:26.25011+00	\N	2000	256	f	\N	\N	\N	ACM	t	High		3	2	1	G	{"0": 2, "-1": 1}	0	2	f	f	{"input": "input.txt", "output": "output.txt", "io_mode": "Standard IO"}	f
\.


--
-- Data for Name: problem_tag; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.problem_tag (id, name) FROM stdin;
1	Condition
2	test
3	123
4	Bronze
5	tag
6	TEST
\.


--
-- Data for Name: problem_tags; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.problem_tags (id, problem_id, problemtag_id) FROM stdin;
29	10	2
34	12	2
36	6	4
37	13	2
38	14	2
39	15	2
40	16	2
41	17	2
45	20	2
\.


--
-- Data for Name: submission; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.submission (id, contest_id, problem_id, create_time, user_id, code, result, info, language, shared, statistic_info, username, ip) FROM stdin;
567f16833687866fc7217e281db5de2f	2	12	2021-01-03 15:06:51.442637+00	26	#include<bits/stdc++.h>\n#define int long long\n#define zmrl(x) signed((x).size())\n#define ahen(x) (x).begin(),(x).end()\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\nusing namespace std;\nusing pii = pair<int,int>;\n\nsigned main() {\n    ios_base::sync_with_stdio(false); cin.tie(NULL);\n    int A[4]; cin>>A[0]>>A[1]>>A[2]>>A[3];\n    if (A[0]<A[1] && A[1]<A[2] && A[2]<A[3]) cout<<"Uphill\\n";\n    else if (A[0]>A[1] && A[1]>A[2] && A[2]>A[3]) cout<<"Downhill\\n";\n    else if (A[0]==A[1] && A[1]==A[2] && A[2]==A[3]) cout<<"Flat Land\\n";\n    else cout<<"Unknown\\n";\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 1, "memory_cost": 3620864}	2016311072	124.57.202.47
39d560387fa721658981170beb3afa23	2	12	2021-01-05 01:58:48.459837+00	25	List = []\nfor i in range(4):\n   k = int(input())\n    List.append(k)\n    \na = List[0]\nb = List[1]\nc = List[2]\nd = List[3]\n\nif a<b<c<d:\n  print('Uphill')\nelif a>b>c>d:\n  print('Downhill')\nelif a==b==c==d:\n  print('Flat Land')\nelse:\n  print('Unknown')	-2	{}	Python3	f	{"score": 0, "err_info": "Sorry: IndentationError: unexpected indent (solution.py, line 4)"}	2020313223	221.143.30.115
415972f9df36ceea1d44358503fffa99	2	13	2021-01-03 15:09:26.434487+00	26	#include<bits/stdc++.h>\n#define int long long\n#define zmrl(x) signed((x).size())\n#define ahen(x) (x).begin(),(x).end()\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\nusing namespace std;\nusing pii = pair<int,int>;\n\nsigned main() {\n    ios_base::sync_with_stdio(false); cin.tie(NULL);\n    string s; cin>>s;\n    bool yes = true;\n    for (auto c : s) {\n        if (c!='H' && c!='I' && c!='N' && c!='O' && c!='S' && c!='X' && c!='Z') {\n            yes = false;\n            break;\n        }\n    }\n    cout<<(yes ? "YES" : "NO")<<'\\n';\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3399680, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3375104, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3436544, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3620864}	2016311072	124.57.202.47
2c77d08ba394ee7427b55ac43aaaa2c6	2	12	2021-01-03 15:13:45.292705+00	28	#include <bits/stdc++.h>\n#define endl '\\n'\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\nstring solve(const vector<int>& v)\n{\n    for (int i = 0; i < 3; i++)\n    {\n        if (v[i] >= v[i+1]) break;\n        if (i == 2) return "Uphill";\n    }\n    for (int i = 0; i < 3; i++)\n    {\n        if (v[i] <= v[i+1]) break;\n        if (i == 2) return "Downhill";\n    }\n    for (int i = 0; i < 3; i++)\n    {\n        if (v[i] != v[i+1]) break;\n        if (i == 2) return "Flat Land";\n    }\n    return "Unknown";\n}\n\nint main(void)\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    vector<int> v(4); for (int& i : v) cin >> i;\n    cout << solve(v) << endl;\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3375104, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3633152}	2019310631	14.6.203.136
446ffad4ff0df0f8e05bcf068912a9ab	2	13	2021-01-03 15:14:41.554764+00	45	#include<iostream>\nusing namespace std;\n\nvoid wow(string &s){\n  for(int i=0;i<(int)(s.length());i++){\n    if(!(s[i]=='H'||s[i]=='I'||s[i]=='N'||s[i]=='O'||s[i]=='S'||s[i]=='X'||s[i]=='Z')){\n      cout << "NO";\n      return;\n    }\n  }\n  cout << "YES";\n  return;\n}\n\nint main(){\n string s;\n  cin >> s;\n wow(s);\n}	0	{"err": null, "data": [{"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3575808, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3440640, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3457024, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3604480}	2020311715	122.34.162.120
acc5c35713b314370e32077406c78600	2	13	2021-01-03 15:17:05.026396+00	28	#include <bits/stdc++.h>\n#define endl '\\n'\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\n\nbool solve(const string& s)\n{\n    string usable = "HINOSXZ";\n    for (char c : s)\n        if (usable.find(c) == -1)\n            return false;\n    return true;\n}\nint main(void)\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    string s; cin >> s;\n    cout << (solve(s) ? "YES" : "NO") << endl;\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3465216, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3452928, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3391488, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3436544, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3633152}	2019310631	14.6.203.136
70f3bdba2e28d90ae7d22f23982d7a90	2	12	2021-01-03 15:02:32.922857+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n#define int ll\nvoid solve()\n{\n    int a, b, c, d;\n    cin>>a>>b>>c>>d;\n    if (a<b&&b<c&&c<d)\n        cout << "Uphill"<<endl;\n    else if (a>b&&b>c&&c>d)\n        cout << "Downhill" <<endl;\n    else if (a==b&&b==c&&c==d)\n        cout << "Flat Land" <<endl;\n    else\n    {\n            cout << "Unknown"<<endl;\n    }\n    \n}\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3440640, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3620864}	2020310781	210.219.176.200
804bccdd2cce8ab39d8e588b3293d619	2	13	2021-01-03 16:05:45.264498+00	23	check = 'HINOSXZ'\narr = input()\nFlag = True\nfor _ in arr:\n  if not _ in check:\n    Flag = False\n    break\nif Flag:\n  print("YES")\nelse:\n  print("NO")	0	{"err": null, "data": [{"error": 0, "memory": 8892416, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 17, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8982528}	2016312057	221.140.190.217
1308c16aaff946083228398183ba5eee	2	12	2021-01-03 15:08:37.825934+00	45	#include<iostream>\nusing namespace std;\n\nint main(){\n  int ar[3];\n  int n;\n  cin >> n;\n  for(int i=0;i<3;i++){\n    int k;\n    cin >> k;\n    ar[i] = k-n;\n    n = k;\n  }\n  if(ar[0]>0&&ar[1]>0&&ar[2]>0)\n    cout << "Uphill";\n  else if(ar[0]<0&&ar[1]<0&&ar[2]<0)\n    cout << "Downhill";\n  else if(ar[0]==0&&ar[1]==0&&ar[2]==0)\n    cout << "Flat Land";\n  else cout << "Unknown";\n}	0	{"err": null, "data": [{"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3354624, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3522560}	2020311715	122.34.162.120
43a741c718334df571db8bbe5de9549c	2	13	2021-01-03 15:14:17.122474+00	45	#include<iostream>\nusing namespace std;\n\nvoid wow(string &s){\n  for(int i=0;i<(int)(s.length());i++){\n    if(!(s[i]=='H'||s[i]=='I'||s[i]=='N'||s[i]=='O'||s[i]=='S'||s[i]=='X'||s[i]=='Z')){\n      cout << "NO";\n      return;\n    }\n  }\n  cout << "YES";\n  return;\n}\nHINOSXZ\nint main(){\n string s;\n  cin >> s;\n wow(s);\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/972a648ddbc541b59fee5d59bcb88e5b/main.c:1:9: fatal error: iostream: No such file or directory\\n #include<iostream>\\n         ^~~~~~~~~~\\ncompilation terminated."}	2020311715	122.34.162.120
fdaf4fd2094462abff57ae07e87776a1	2	12	2021-01-03 15:16:55.508969+00	19	#include <iostream>\n\nusing namespace std;\n\nint main(){\n\tint input[4];\n  \tfor (int i = 0; i < 4; i++) {\n    \tcin >> input[i];\n    }\n  \tif ((input[0] < input[1]) && (input[1] < input[2]) && (input[2] < input[3])) cout << "Uphill";\n  \telse if ((input[0] > input[1]) && (input[1] > input[2]) && (input[2] > input[3])) cout << "Downhill";\n    else if ((input[0] == input[1]) && (input[1] == input[2]) && (input[2] == input[3])) cout << "Flat Land";\n\telse cout << "Unknown";\n}	0	{"err": null, "data": [{"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3420160, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 1, "memory_cost": 3547136}	2016310249	110.12.168.30
16674e748824c7400f11674e981195c4	2	13	2021-01-03 15:17:51.771564+00	45	#include<iostream>\nusing namespace std;\n\nbool wow(char c)\n{\n\treturn c=='H'||c=='I'||c=='N'||c=='O'||c=='S'||c=='X'||c=='Z';\n}\n\nint main(){\n string s;\n cin >> s;\n  bool t = true;\n  for(int i=0;i<s.size();i++){\n    t = wow(s[i]);\n  }\n if(t) cout << "YES";\n  else cout << "NO";\n}	0	{"err": null, "data": [{"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3387392, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3436544, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3354624, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3424256, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3575808, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3604480}	2020311715	122.34.162.120
d1b38b7d605641161aede42f8a347b3b	2	13	2021-01-03 15:04:42.573705+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n#define int ll\nvoid solve()\n{\n    string can = "HINOSXZ";\n    string s; cin>>s;\n    for (char c: s)\n    {\n        if (find(can.begin(), can.end(), c) == can.end())\n        {\n            cout << "NO"<<endl;\n            return;\n        }\n    }\n    cout << "YES" <<endl;\n}\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3645440}	2020310781	210.219.176.200
814bc982a3131e249f4d2ad9f2908868	2	14	2021-01-03 15:12:32.275014+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n#define int ll\n\nvoid solve()\n{\n    int n; cin>>n;\n    vector<int> a(n);\n    for(int& it: a) cin>>it;\n    vector<int> f = a;\n    sort(all(f));\n    f.resize(unique(all(f)) - f.begin());\n    int ans = 1;\n    for (int it: f)\n    {\n        vector<int> now;\n        for (int i: a)\n            if (i != it) now.pb(i);\n        int cnt = 0;\n        int before = -1;\n        for (int it: now)\n        {\n            if (it == before) ++cnt;\n            else cnt = 1;\n            before = it;\n            \n        ans = max(ans, cnt);\n        }\n    }\n    cout <<ans <<'\\n';\n}\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3436544, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3416064, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3588096, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3690496, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 5, "memory_cost": 3690496}	2020310781	210.219.176.200
293a96fa18650eae9d3ac88224b59148	2	16	2021-01-03 15:50:10.628299+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 1; i <= int(n); ++i)\n#define int ll\n\nint n, m;\nint a[11];\nint dp[11][11'111];\nvoid solve()\n{\n    cin>>n>>m;\n    forn(i, n) cin>>a[i];\n    memset(dp, 0x3F, sizeof dp);\n    dp[0][0] = 0;\n    forn(i, n)\n    {\n        for (int bf = 0; bf<=m;++bf)\n        {\n            for (int now = 0; now <= a[i]; ++now)\n            {\n                int S = bf + now*now;\n                if (S > m) continue;\n                int  f = dp[i - 1][bf] + (a[i] - now)*(a[i] - now);\n                dp[i][S] = min(dp[i][S], f);\n            }\n        }\n    }\n    int ans = 1e9 + 7;\n    cout << (dp[n][m] > ans ? -1 : dp[n][m]) << '\\n';\n}\n\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 4587520, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4579328, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 4587520, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "a97f6e2fedcabc887911dc9b5fd3ccc3"}, {"error": 0, "memory": 4509696, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "a3ec6dd8d538712a581e5b24726ce062"}, {"error": 0, "memory": 4366336, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4526080, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 4476928, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4526080, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4513792, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 4423680, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "218a0aefd1d1a4be65601cc6ddc1520e"}, {"error": 0, "memory": 4468736, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "11", "output_md5": "ac2a728f9f17b5d860b6dabd80a5162f"}, {"error": 0, "memory": 4427776, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 11, "memory_cost": 4587520}	2020310781	210.219.176.200
90857d38962e753240e965aa2e9eb5d0	2	16	2021-01-03 15:53:45.838289+00	26	#include<bits/stdc++.h>\n#define int long long\n#define zmrl(x) signed((x).size())\n#define ahen(x) (x).begin(),(x).end()\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\nusing namespace std;\nusing pii = pair<int,int>;\n\nsigned main() {\n    ios_base::sync_with_stdio(false); cin.tie(NULL);\n    int n,m; cin>>n>>m;\n    int A[11];\n    for (int i=1; i<=n; i++) cin>>A[i];\n    int dp[11][10010];\n    memset(dp, -1, sizeof(dp));\n    dp[0][0] = 0;\n    for (int i=1; i<=n; i++) {\n        for (int j=1; j<=m; j++) {\n            int le=1, ri=j, sq;\n            while (le<=ri) {\n                int mid = le+ri>>1;\n                if (mid*mid <= j) {\n                    sq = mid;\n                    le = mid+1;\n                }\n                else {\n                    ri = mid-1;\n                }\n            }\n            for (int k=1; k<=sq; k++) {\n                if (dp[i-1][j-k*k] == -1) continue;\n                if (dp[i][j] == -1) dp[i][j] = dp[i-1][j-k*k] + (k-A[i])*(k-A[i]);\n                else dp[i][j] = min(dp[i][j], dp[i-1][j-k*k] + (k-A[i])*(k-A[i]));\n            }\n        }\n    }\n    cout<<dp[n][m]<<'\\n';\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 4489216, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4378624, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 4362240, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 19, "test_case": "3", "output_md5": "a97f6e2fedcabc887911dc9b5fd3ccc3"}, {"error": 0, "memory": 4485120, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 22, "test_case": "4", "output_md5": "a3ec6dd8d538712a581e5b24726ce062"}, {"error": 0, "memory": 4382720, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4378624, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 4435968, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4329472, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4374528, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 4382720, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 4411392, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "11", "output_md5": "ac2a728f9f17b5d860b6dabd80a5162f"}, {"error": 0, "memory": 4403200, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 21, "memory_cost": 4489216}	2016311072	124.57.202.47
4a9332d1b37e2d49b489ada31df92f05	2	12	2021-01-03 15:58:28.252559+00	52	h = [1, 10, 12, 13]\n\nif h[0]<h[1]<h[2]<h[3]:\n    print("Uphill")\nelif h[0]>h[1]>h[2]>h[3]:\n    print("Downhill")\nelif h[0]==h[1]==h[2]==h[3]:\n    print("Flat Land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 8892416, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8876032, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8908800, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8822784, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8957952}	2018310766	175.192.51.105
15b86cf5bbfa155b88f73801590d64d5	2	13	2021-01-04 10:10:04.062529+00	42	s={'H','I','N','O','S','X','Z'}\na=input()\nfor x in a:\n    if x not in s:\n        print("NO")\n        quit()\nprint("YES")	0	{"err": null, "data": [{"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8884224, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8822784, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8810496, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8847360, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8986624}	2019311430	121.135.237.107
2a3fbbcaba31d6bc4a7df043c90ee30a	2	12	2021-01-03 15:15:27.383896+00	16	#include <iostream>\n\nusing namespace std;\n\nint main(){\n    int a[4];\n    for(int i =0;i<4;i++){\n        cin >> a[i];\n    }\n    int awn=0;\n    if(a[0]<a[1]) awn =1;\n    if(a[0]==a[1]) awn =2;\n    if(a[0]>a[1]) awn =3;\n    for(int i=1;i<3;i++){\n        if(a[i]<a[i+1]){\n            if(awn==1){\n                awn=1;\n            }\n            else awn=0;\n        }\n        else if(a[i]==a[i+1]){\n            if(awn==2){\n                awn=2;\n            }\n            else{\n                awn=0;\n            }\n        }\n        else{\n            if(awn==3){\n                awn=3;\n            }\n            else{\n                awn=0;\n            }\n        }\n    }\n    if(awn==0) cout <<"Unknown";\n    else if(awn==1) cout <<"Uphill";\n    else if(awn==2) cout <<"Flat Land";\n    else if(awn==3) cout <<"Downhill";\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3383296, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3358720, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3547136}	2020314959	1.235.77.218
57449033b62d104b748de2143f233b52	2	14	2021-01-03 15:16:01.371269+00	26	#include<bits/stdc++.h>\n#define int long long\n#define zmrl(x) signed((x).size())\n#define ahen(x) (x).begin(),(x).end()\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\nusing namespace std;\nusing pii = pair<int,int>;\n\nsigned main() {\n    ios_base::sync_with_stdio(false); cin.tie(NULL);\n    int n; cin>>n;\n    int A[1010];\n    for (int i=1; i<=n; i++) cin>>A[i];\n    int res = 1;\n    for (int i=1; i<=n; i++) {\n        int prv = -1, cnt = 0;\n        for (int j=1; j<=n; j++) {\n            if (A[j] == A[i]) continue;\n            if (A[j] == prv) {\n                res = max(res, ++cnt);\n            }\n            else {\n                prv = A[j];\n                cnt = 1;\n            }\n        }\n    }\n    cout<<res<<'\\n';\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3457024, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3567616, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3395584, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 6, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3395584, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 6, "memory_cost": 3633152}	2016311072	124.57.202.47
b811c0dd7fd62050b73a7a75deb700dd	2	12	2021-01-03 15:17:23.67706+00	17	#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main(void)\n{\n    int a, b, c, d;\n\n    scanf("%d %d %d %d", &a, &b ,&c, &d);\n\n    if (a < b && b < c && c < d)\n        printf("Uphill");\n\n    else if (a > b && b > c && c > d)\n        printf("Downhill");\n\n    else if (a == b && b == c && c == d)\n        printf("Flat Land");\n\n    else\n        printf("Unknown");\n\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3452928, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3620864}	2019311277	218.39.120.122
b3e0046aff1f6bc0bf1a924036ed240e	2	13	2021-01-04 04:09:00.201008+00	47	#include <iostream>\n#include <string>\nusing namespace std;\nint main(){\n  string s;\n  cin >> s;\n  int key = 0;\n  for(int i = 0; i < s.length(); i++){\n    if(s[i] != 'H' && s[i] != 'I' && s[i] != 'N' && s[i] != 'O' && s[i] != 'S' && s[i] != 'X' && s[i] != 'Z'){\n      key = 1;\n      break;\n    }\n  }\n  if(key == 1) {cout << "NO";}\n  else {cout << "YES"; }\n}	0	{"err": null, "data": [{"error": 0, "memory": 3383296, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3387392, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3293184, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3436544, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3457024, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3633152}	2020312552	121.168.152.64
114b79e03d6ad1c96ba0c550bf76e2ce	2	12	2021-01-03 15:55:24.17455+00	23	arr = []\nfor _ in range(4):\n\tarr.append(int(input()))\nif arr[0] ==  arr[1] ==  arr[2] == arr[3]:\n    print("Flat Land")\nelif arr[0] > arr[1] > arr[2] > arr[3]:\n    print("Downhill")\nelif arr[0] < arr[1] < arr[2] < arr[3]:\n    print("Uphill")\nelse:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8847360, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8769536, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9011200}	2016312057	221.140.190.217
ed888da5ecb46e59f73dd2f2b360fe09	2	12	2021-01-03 15:51:17.174878+00	23	arr = []\nfor _ in range(4):\n\tarr.append(int(input()))\nif arr[0] < arr[1]:\n    if arr != sorted(arr):\n        print("UnKnown")\n    else:\n        print("Uphill")\nif arr[0] > arr[1]:\n    arr = arr[::-1]\n    if arr != sorted(arr):\n        print("UnKnown")\n    else:\n        print("Downhill")\nelse:\n    if arr != sorted(arr):\n        print("UnKnown")\n    else:\n        print("Flat Land")	-1	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "2", "output_md5": "e02c7a5d908c2df5e6391daec123ddf9"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "57891b9a1f036c63cca954e2f03683b7"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9015296, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9035776}	2016312057	221.140.190.217
5f4b9344d2494a730e4fe8c611df7b46	2	15	2021-01-03 15:18:38.143844+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n#define int ll\n\nint uf[11'111];\nint a[11'111];\nint F(int x){return uf[x]==x?x:uf[x]==F(uf[x]);}\nvoid U(int x, int y)\n{\n    x = F(x);\n    y = F(y);\n    if (x==y) return;\n    uf[x] = y;\n    a[y] += a[x];\n    a[x] = 0;\n}\nvoid solve()\n{\n    int n, m; cin>>n>>m;\n    forn(i, n) cin>>a[i], uf[i] = i;\n    while(m--)\n    {\n        int x, y; cin>>x>>y;\n        U(x, y);\n    }\n    forn(i, n)\n    {\n        if (a[F(i)])\n        {\n            cout << "IMPOSSIBLE" <<'\\n';\n        return;\n        }\n    }\n    cout << "POSSIBLE"<<endl;\n}\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	4	{"err": null, "data": [{"error": 0, "memory": 137682944, "output": null, "result": 4, "signal": 11, "cpu_time": 19, "exit_code": 0, "real_time": 135, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 137646080, "output": null, "result": 4, "signal": 11, "cpu_time": 19, "exit_code": 0, "real_time": 140, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 137510912, "output": null, "result": 4, "signal": 11, "cpu_time": 19, "exit_code": 0, "real_time": 139, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 137523200, "output": null, "result": 4, "signal": 11, "cpu_time": 18, "exit_code": 0, "real_time": 138, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 137564160, "output": null, "result": 4, "signal": 11, "cpu_time": 15, "exit_code": 0, "real_time": 140, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 137691136, "output": null, "result": 4, "signal": 11, "cpu_time": 11, "exit_code": 0, "real_time": 140, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 137613312, "output": null, "result": 4, "signal": 11, "cpu_time": 10, "exit_code": 0, "real_time": 138, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 137478144, "output": null, "result": 4, "signal": 11, "cpu_time": 18, "exit_code": 0, "real_time": 127, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 137641984, "output": null, "result": 4, "signal": 11, "cpu_time": 7, "exit_code": 0, "real_time": 125, "test_case": "9", "output_md5": null}]}	C++	f	{"time_cost": 19, "memory_cost": 137691136}	2020310781	210.219.176.200
38213214a8a781f9df1223426c8e1eaa	2	14	2021-01-03 15:57:00.404752+00	16	#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n// H I N O S X Z\nint main() {\n    int a;\n    cin >> a;\n    int t[a];\n    vector<int> v1, v2;\n    vector<int>::iterator it;\n    for (int i = 0; i < a; i++) {\n        cin >> t[i];\n        v1.push_back(t[i]);\n    }\n    sort(v1.begin(), v1.end());\n\n    int temp_max = 0;\n    int temp_m = 0;\n    while (!v1.empty()) {\n\n        temp_m = 0;\n        it = v1.end();\n        it --;\n        int temp =*it;\n\n        int temp2 = 0;\n        for (int i = 0; i < a; i++) {\n            if (t[i] != temp) {\n                if (temp2 == t[i]) {\n                    temp_m++;\n                    if (temp_max < temp_m) {\n                        temp_max = temp_m;\n\n                    }\n                }\n                else {\n                    temp2 = t[i];\n                    temp_m = 1;\n\n                }\n            }\n        }\n        while (temp == v1.back()) {\n            v1.pop_back();\n        }\n\n    }\n    cout << temp_max;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3649536, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "2", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3346432, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3317760, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3375104, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 4, "memory_cost": 3649536}	2020314959	1.235.77.218
24aedaa96bfbe3230281bb004935e744	2	13	2021-01-03 16:21:44.475194+00	54	#define _CRT_SECURE_NO_WARNINGS\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\nint check(char a,char* chk) {\n\tint retval = 0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tif (a == chk[i]) retval = 1;\n\t}\n\treturn retval;\n}\nint main() {\n\tchar str[31];\n\tchar chk[7] = { 'H','I','N','O','S','X','Z' };\n\tcin >> str;\n\tfor (int i = 0; i < strlen(str); i++) {\n\t\tif (check(str[i], chk)) continue;\n\t\telse {\n\t\t\tcout << "NO\\n";\n\t\t\treturn 0;\n\t\t}\n\t}\n\tcout << "YES\\n";\n\treturn 0;\n}	-2	{}	C++	f	{"score": 0, "err_info": "/judger/run/f353989ead454df6801de1ff35c03349/main.cpp: In function 'int main()':\\n/judger/run/f353989ead454df6801de1ff35c03349/main.cpp:18:22: error: 'strlen' was not declared in this scope\\n  for (int i = 0; i < strlen(str); i++) {\\n                      ^~~~~~\\n/judger/run/f353989ead454df6801de1ff35c03349/main.cpp:18:22: note: suggested alternative: 'mbrlen'\\n  for (int i = 0; i < strlen(str); i++) {\\n                      ^~~~~~\\n                      mbrlen"}	2017314656	1.249.93.73
4ca9564334130f0e9406099ac53f1ef2	2	13	2021-01-03 16:23:43.184652+00	54	#include <iostream>\n#include <vector>\n#include <cstring>\n\nusing namespace std;\nint check(char a,char* chk) {\n\tint retval = 0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tif (a == chk[i]) retval = 1;\n\t}\n\treturn retval;\n}\nint main() {\n\tchar str[31];\n\tchar chk[7] = { 'H','I','N','O','S','X','Z' };\n\tcin >> str;\n\tfor (int i = 0; i < strlen(str); i++) {\n\t\tif (check(str[i], chk)) continue;\n\t\telse {\n\t\t\tcout << "NO\\n";\n\t\t\treturn 0;\n\t\t}\n\t}\n\tcout << "YES\\n";\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3538944}	2017314656	1.249.93.73
3619b044915c575539d55ba271db5238	2	13	2021-01-03 16:25:53.720719+00	52	S = str(input())\nlistS=[]\nfor i in S:\n    listS.append(i)\nif 'H' or 'I'or 'N'or 'O'or 'S' or'X' or 'Z' not in listS:\n    print("NO")\nelse:\n    print("YES")	-1	{"err": null, "data": [{"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8843264, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8826880, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8880128, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8925184, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8871936, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "7", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8859648, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8863744, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "9", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 18, "memory_cost": 8986624}	2018310766	175.192.51.105
f8702478de600a7a3de922f82f8f4238	2	13	2021-01-03 15:21:03.526222+00	16	#include <iostream>\n\nusing namespace std;\n// H I N O S X Z\nint main(){\n    int awn=0;\n    char tt[31];\n    cin >> tt;\n    for(int i=0;tt[i]!='\\0';i++){\n        if(tt[i]!='H'&&tt[i]!='I'&&tt[i]!='N'&&tt[i]!='O'&&tt[i]!='S'&&tt[i]!='X'&&tt[i]!='Z'){\n            awn = 1;\n\n        }\n    }\n    if(awn ==0) cout << "YES";\n    else cout << "NO";\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3416064, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3416064, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3350528, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3543040}	2020314959	1.235.77.218
cd29327ca0a26cb0cc7a07fa2fafc6f0	2	15	2021-01-03 15:21:48.518256+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n#define int ll\n\nint uf[51'111];\nint a[51'111];\nint F(int x){return uf[x]==x?x:uf[x]==F(uf[x]);}\nvoid U(int x, int y)\n{\n    x = F(x);\n    y = F(y);\n    if (x==y) return;\n    uf[x] = y;\n    a[y] += a[x];\n    a[x] = 0;\n}\nvoid solve()\n{\n    int n, m; cin>>n>>m;\n  \tif (n >10'000)\n    {\n    }\n    forn(i, n) cin>>a[i], uf[i] = i;\n    while(m--)\n    {\n        int x, y; cin>>x>>y;\n        U(x, y);\n    }\n    forn(i, n)\n    {\n        if (a[F(i)])\n        {\n            cout << "IMPOSSIBLE" <<'\\n';\n        \treturn;\n        }\n    }\n    cout << "POSSIBLE"<<endl;\n}\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	4	{"err": null, "data": [{"error": 0, "memory": 137625600, "output": null, "result": 4, "signal": 11, "cpu_time": 27, "exit_code": 0, "real_time": 133, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 137695232, "output": null, "result": 4, "signal": 11, "cpu_time": 15, "exit_code": 0, "real_time": 135, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 137682944, "output": null, "result": 4, "signal": 11, "cpu_time": 20, "exit_code": 0, "real_time": 137, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 137674752, "output": null, "result": 4, "signal": 11, "cpu_time": 15, "exit_code": 0, "real_time": 123, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 137568256, "output": null, "result": 4, "signal": 11, "cpu_time": 15, "exit_code": 0, "real_time": 138, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 137584640, "output": null, "result": 4, "signal": 11, "cpu_time": 12, "exit_code": 0, "real_time": 137, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 137711616, "output": null, "result": 4, "signal": 11, "cpu_time": 26, "exit_code": 0, "real_time": 140, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 137457664, "output": null, "result": 4, "signal": 11, "cpu_time": 31, "exit_code": 0, "real_time": 138, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 137547776, "output": null, "result": 4, "signal": 11, "cpu_time": 24, "exit_code": 0, "real_time": 123, "test_case": "9", "output_md5": null}]}	C++	f	{"time_cost": 31, "memory_cost": 137711616}	2020310781	210.219.176.200
45a7b8253c248762292dd29242d5304f	2	12	2021-01-03 15:59:50.102988+00	52	h = [0,0,0,0]\nh[0] = 1\nh[1] = 10\nh[2] = 12\nh[3] = 13\n\nif h[0]<h[1]<h[2]<h[3]:\n    print("Uphill")\nelif h[0]>h[1]>h[2]>h[3]:\n    print("Downhill")\nelif h[0]==h[1]==h[2]==h[3]:\n    print("Flat Land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 8929280, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8855552, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8962048}	2018310766	175.192.51.105
d3275fe1cb90f8186668769ffecdc83a	2	13	2021-01-03 15:22:10.066209+00	17	#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main(void)\n{\n    char ad[40];\n    int cnt = 0;\n\n    scanf("%s", ad);\n\n    for (int i = 0; i < strlen(ad); i++)\n    {\n        if (ad[i] == 'H' || ad[i] == 'I' || ad[i] == 'N' || ad[i] == 'O' || ad[i] == 'S' || ad[i] == 'X' || ad[i] == 'Z')\n            cnt++;\n\n        else\n            break;\n    }\n\n    if (cnt == strlen(ad))\n        printf("YES");\n\n    else\n        printf("NO");\n\n    return 0;\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/8f7377d279b84262bef96d001dfdb031/main.c:1:10: fatal error: bits/stdc++.h: No such file or directory\\n #include <bits/stdc++.h>\\n          ^~~~~~~~~~~~~~~\\ncompilation terminated."}	2019311277	218.39.120.122
1e0242de06b8e89cb15104b662ca5b0c	2	13	2021-01-03 15:22:23.627991+00	17	#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main(void)\n{\n    char ad[40];\n    int cnt = 0;\n\n    scanf("%s", ad);\n\n    for (int i = 0; i < strlen(ad); i++)\n    {\n        if (ad[i] == 'H' || ad[i] == 'I' || ad[i] == 'N' || ad[i] == 'O' || ad[i] == 'S' || ad[i] == 'X' || ad[i] == 'Z')\n            cnt++;\n\n        else\n            break;\n    }\n\n    if (cnt == strlen(ad))\n        printf("YES");\n\n    else\n        printf("NO");\n\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3665920, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3600384, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3665920}	2019311277	218.39.120.122
33b076e8d59b70921d4db3cd29eca475	2	15	2021-01-03 15:22:33.965254+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n#define int ll\n\nint uf[51'111];\nint a[51'111];\nint F(int x){return uf[x]==x?x:uf[x]=F(uf[x]);}\nvoid U(int x, int y)\n{\n    x = F(x);\n    y = F(y);\n    if (x==y) return;\n    uf[x] = y;\n    a[y] += a[x];\n    a[x] = 0;\n}\nvoid solve()\n{\n    int n, m; cin>>n>>m;\n  \tif (n >10'000)\n    {\n    }\n    forn(i, n) cin>>a[i], uf[i] = i;\n    while(m--)\n    {\n        int x, y; cin>>x>>y;\n        U(x, y);\n    }\n    forn(i, n)\n    {\n        if (a[F(i)])\n        {\n            cout << "IMPOSSIBLE" <<'\\n';\n        \treturn;\n        }\n    }\n    cout << "POSSIBLE"<<endl;\n}\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3682304, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3678208, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 9, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 11, "memory_cost": 3682304}	2020310781	210.219.176.200
a602f8e1127af8dd2ffc4cf5c7b801d5	2	12	2021-01-03 15:23:13.613099+00	49	#include <iostream>\nusing namespace std;\n\nint main() {\n\tint a,b,c,d;\n\tcin >> a >> b >> c >> d;\n\tif(a < b && b < c && c < d) cout<<"Uphill";\n\telse if(a > b && b > c && c > d) cout<<"Downhill";\n\telse if(a == b && b == c && c == d) cout<<"Flat Land";\n\telse cout<<"Unknown";\n\t\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3358720, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3522560}	말랑	121.136.224.91
ce86a01edb268407caf820a4475d1677	2	13	2021-01-04 02:47:33.878216+00	25	h = input()\n\nList = ['H','I','N','O','S','X','Z']\nBol= 1\nfor i in range(len(h)):\n    if h[i] not in List:\n        print('NO')\n        Bol = 0\nif Bol ==1:          \n    print("YES")	-1	{"err": null, "data": [{"error": 0, "memory": 8925184, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8908800, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8892416, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "9d762d3b96b04534bd794cb8e15960f8"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8847360, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8904704, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "646da0df850e1bf42ee11fcce0fa17ac"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8830976, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 17, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8949760}	2020313223	221.143.30.115
98f36d0f0dd27675216890d00cf32af8	2	16	2021-01-03 15:51:43.395964+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 1; i <= int(n); ++i)\n#define int ll\n\nint n, m;\nint a[11];\nint dp[11][11'111];\nvoid solve()\n{\n    cin>>n>>m;\n    forn(i, n) cin>>a[i];\n    memset(dp, 0x3F, sizeof dp);\n    dp[0][0] = 0;\n    forn(i, n)\n    {\n        for (int bf = 0; bf<=m;++bf)\n        {\n            for (int now = 0; now <= 100; ++now)\n            {\n                int S = bf + now*now;\n                if (S > m) continue;\n                int  f = dp[i - 1][bf] + (a[i] - now)*(a[i] - now);\n                dp[i][S] = min(dp[i][S], f);\n            }\n        }\n    }\n    cout << (dp[n][m] > 1e18 ? -1 : dp[n][m]) << '\\n';\n}\n\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 4579328, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4419584, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 8, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 4476928, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "3", "output_md5": "a97f6e2fedcabc887911dc9b5fd3ccc3"}, {"error": 0, "memory": 4341760, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "4", "output_md5": "a3ec6dd8d538712a581e5b24726ce062"}, {"error": 0, "memory": 4493312, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 8, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4423680, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 4583424, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4476928, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4493312, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 4444160, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 4481024, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "11", "output_md5": "ac2a728f9f17b5d860b6dabd80a5162f"}, {"error": 0, "memory": 4423680, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 19, "memory_cost": 4583424}	2020310781	210.219.176.200
7a0d98be3263c459bcc532f17e047ed4	2	12	2021-01-03 15:23:27.029037+00	49	#include <iostream>\nusing namespace std;\n\nint main() {\n\tint a,b,c,d;\n\tcin >> a >> b >> c >> d;\n\tif(a < b && b < c && c < d) cout<<"Uphill";\n\telse if(a > b && b > c && c > d) cout<<"Downhill";\n\telse if(a == b && b == c && c == d) cout<<"Flat Land";\n\telse cout<<"Unknown";\n\t\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3375104, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3391488, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3530752}	말랑	121.136.224.91
f8bdb8196c595ee5762ab620d93df478	2	14	2021-01-03 15:23:43.082404+00	45	#include<iostream>\nusing namespace std;\n\nint main(){\n\tint n,k,wow,count=1,max = -1;\n  cin >> n;\n  cin >> wow;\n  for(int i=1;i<n;i++){\n\tcin >> k;\n    if(k==wow){\n      count++;\n    }\n    else{\n      if(count> max){\n       max = count; \n      }\n     count=1;\n      wow = k;\n    }\n  }\n  cout << max;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3371008, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3371008, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3371008, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3407872, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3416064, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3432448, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3371008, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3534848, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "14", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3514368, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3432448, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "16", "output_md5": "c9f0f895fb98ab9159f51fd0297e236d"}, {"error": 0, "memory": 3518464, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3526656, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "18", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3420160, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "19", "output_md5": "45c48cce2e2d7fbdea1afc51c7c6ad26"}, {"error": 0, "memory": 3522560, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "20", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3510272, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3485696, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "45c48cce2e2d7fbdea1afc51c7c6ad26"}]}	C++	f	{"time_cost": 2, "memory_cost": 3543040}	2020311715	122.34.162.120
e8bf1cda0031e485fb4432465ce692d7	2	14	2021-01-03 15:24:07.02593+00	28	#include <bits/stdc++.h>\n#define endl '\\n'\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\nint main(void)\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int n; cin >> n;\n    set<int> st;\n    vector<int> v(n); for (int& i : v) { cin >> i; st.insert(i); }\n\n    int result = -1;\n    for (int ignore : st)\n    {\n        for (int i = 0; i < n; i++)\n        {\n            if (v[i] == ignore) continue;\n            int j = i, k = 0;\n            while (j+1 < n && (v[j+1] == v[i] || v[j+1] == ignore))\n            {\n                k += (v[j+1] == ignore);\n                j++;\n            }\n            result = max(result, j-i+1-k);\n            i = j;\n        }\n    }\n    cout << result << endl;\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3678208, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3420160, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 4, "memory_cost": 3678208}	2019310631	14.6.203.136
909f0cd4ff9c10f446043ed32e8bfb04	2	12	2021-01-03 15:25:45.978212+00	50	#include <stdio.h>\n\nint main() {\n  int h[4];\n  \n  scanf("%d", &h[0]);\n  scanf("%d", &h[1]);\n  scanf("%d", &h[2]);\n  scanf("%d", &h[3]);\n\n  if (h[0] == h[1] && h[1] == h[2] && h[2] == h[3])\n  {\n    printf("Flat Land");\n  }\n  else if (h[0] < h[1] && h[1] < h[2] && h[2] < h[3])\n  {\n    printf("Uphill");\n  }\n  else if (h[0] > h[1] && h[1] > h[2] && h[2] > h[3])\n  {\n    printf("Downhill");\n  }\n  else\n  {\n    printf("Unknown");\n  }\n}	0	{"err": null, "data": [{"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1642496, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1736704}	2017312781	218.146.23.129
f6237f4c6e120dad27342431c0824b00	2	16	2021-01-03 15:52:57.645498+00	28	#include <bits/stdc++.h>\n#define endl '\\n'\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\nint cache[10001][11];\nint dp(const vector<int>& v, int m, int idx)\n{\n    int& c = cache[m][idx];\n    if (idx == v.size()) return (m ? 1E9 : 0);\n    if (c != -1) return c;\n    ////////////////////////////////////////////////////////////////////////////\n    int ret = 1E9;\n    for (int i = 1; i*i <= m; i++)\n        ret = min(ret, dp(v, m-i*i, idx+1)+(v[idx]-i)*(v[idx]-i));\n    return c = ret;\n}\n\nint main(void)\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    memset(cache, -1, sizeof(cache));\n\n    int n, m; cin >> n >> m;\n    vector<int> v(n); for (int& i : v) cin >> i;\n    int result = dp(v, m, 0);\n    cout << (result == 1E9 ? -1 : result) << endl;\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3981312, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4059136, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 3842048, "output": null, "result": 0, "signal": 0, "cpu_time": 29, "exit_code": 0, "real_time": 29, "test_case": "3", "output_md5": "a97f6e2fedcabc887911dc9b5fd3ccc3"}, {"error": 0, "memory": 3899392, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 24, "test_case": "4", "output_md5": "a3ec6dd8d538712a581e5b24726ce062"}, {"error": 0, "memory": 3964928, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3977216, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3813376, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3813376, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3997696, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 4091904, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 3997696, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "11", "output_md5": "ac2a728f9f17b5d860b6dabd80a5162f"}, {"error": 0, "memory": 3956736, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 29, "memory_cost": 4091904}	2019310631	14.6.203.136
37c33f573d44b5b29c76ee4adb022ad9	2	12	2021-01-03 15:57:01.609917+00	53	#include <stdio.h>\n\nint inc(int* arr)\n{\n        for(int i=0;i<3;i++)\n                if(arr[i]>=arr[i+1])\n                        return 0;\n        return 1;\n}\n\nint dec(int *arr)\n{\n        for(int i=0;i<3;i++)\n                if(arr[i]<=arr[i+1])\n                        return 0;\n        return 1;\n}\n\nint flat(int* arr)\n{\n        for(int i=0;i<3;i++)\n                if(arr[i]!=arr[i+1])\n                        return 0;\n        return 1;\n}\n\nint main(void)\n{\n        int arr[4];\n        for(int i=0;i<4;i++)\n                scanf("%d", &arr[i]);\n\n        if(inc(arr))\n                printf("Uphill");\n        else if(dec(arr))\n                printf("Downhill");\n        else if(flat(arr))\n                printf("Flat Land");\n        else\n                printf("Unknown");\n\n        return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1642496, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1654784}	2017314333	59.13.108.49
abbed56dc2d3c8488a7d6e0030b7b49b	2	15	2021-01-03 16:01:25.700686+00	45	#include<iostream>\nusing namespace std;\n\nint main()\n{\n\tint n,m,tot=0;\n  \tcin >> n; cin >> m;\n  int ar[n];\n  int wow[n];\n  for(int i=0;i<n;i++){\n   cin >> ar[i];\n    wow[i] = 0;\n  }\n  for(int i=0;i<m;i++){\n\tint a,b;\n    cin >> a; cin >> b;\n    if(wow[a]==0){\n      tot+=ar[a];\n      wow[a] = 1;\n    }\n    if(wow[b]==0){\n      tot+=ar[b];\n      wow[b] = 1;\n    }\n  }\n if(tot==0)\n   cout << "POSSIBLE";\n  else\n    cout << "IMPOSSIBLE";\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3383296, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 22, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3567616, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3403776, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3547136, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 21, "memory_cost": 3637248}	2020311715	122.34.162.120
ecbb011a031eaaa033107e052e0f1fab	2	15	2021-01-03 15:29:07.395793+00	26	#include<bits/stdc++.h>\n#define int long long\n#define zmrl(x) signed((x).size())\n#define ahen(x) (x).begin(),(x).end()\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\nusing namespace std;\nusing pii = pair<int,int>;\n\nint root[10010];\nint Sum[10010];\n\nint Find(int x) {\n    return root[x] == x ? x : root[x] = Find(root[x]);\n}\n\nsigned main() {\n    ios_base::sync_with_stdio(false); cin.tie(NULL);\n    int n,m; cin>>n>>m;\n    for (int i=0; i<n; i++) {\n        cin>>Sum[i];\n        root[i] = i;\n    }\n    while (m--) {\n        int a,b; cin>>a>>b;\n        int fa = Find(a), fb = Find(b);\n        if (fa == fb) continue;\n        root[fa] = fb;\n        Sum[fb] += Sum[fa];\n    }\n    bool yes = true;\n    for (int i=0; i<n; i++) {\n        if (Sum[Find(i)] < 0) {\n            yes = false;\n            break;\n        }\n    }\n    cout<<(yes ? "POSSIBLE" : "IMPOSSIBLE")<<'\\n';\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 11, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3739648, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3600384, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3698688, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3780608, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 8, "memory_cost": 3780608}	2016311072	124.57.202.47
53fc46a6874642094d40d79c824c82ab	2	13	2021-01-03 15:32:23.618038+00	50	#include <stdio.h>\n\nint validMap[26] = {0};\n\nvoid initValidMap() {\n  validMap['H' - 'A'] = 1;\n  validMap['I' - 'A'] = 1;\n  validMap['N' - 'A'] = 1;\n  validMap['O' - 'A'] = 1;\n  validMap['S' - 'A'] = 1;\n  validMap['X' - 'A'] = 1;\n  validMap['Z' - 'A'] = 1;\n}\n\nint main() {\n  initValidMap();\n  \n  char str[31];\n  scanf("%s", str);\n\n  for (int i = 0; str[i] != '\\0'; ++i) {\n    if (validMap[str[i] - 'A'] == 0) {\n      printf("NO");\n      return 0;\n    }\n  }\n  \n  printf("YES");\n  return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1585152, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1695744, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1642496, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1576960, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1695744}	2017312781	218.146.23.129
fe4963ff5293634b9b363cb4d1e1b895	2	15	2021-01-03 15:33:41.757482+00	45	#include<iostream>\nusing namespace std;\n\nint main()\n{\n\tint n,m;\n  \tcin >> n; cin >> m;\n  int ar[n];\n  for(int i=0;i<n;i++){\n   cin >> ar[i]; \n  }\n  for(int i=0;i<m;i++){\n\tint a,b;\n    cin >> a; cin >> b;\n    ar[b]+=ar[a];\n    ar[a] = 0;\n  }\n  bool a = true;\n for(int i=0;i<n;i++){\n  if(ar[i]!=0){\n\ta = false;\n  } \n }\n  if(a)cout << "POSSIBLE";\n  else cout << "IMPOSSIBLE";\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3612672, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3596288, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3502080, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "3", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3383296, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3620864, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3534848, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 8, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3530752, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 8, "test_case": "8", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3514368, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "9", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}]}	C++	f	{"time_cost": 18, "memory_cost": 3620864}	2020311715	122.34.162.120
d67617484699af9122f36e1dd5ec3c4a	2	15	2021-01-03 15:33:41.377672+00	28	#include <bits/stdc++.h>\n#define endl '\\n'\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\nstruct DisjointSet\n{\n    vector<int> rank, parent, sum;\n    DisjointSet(int n) : rank(n, 1), parent(n), sum(n) { iota(parent.begin(), parent.end(), 0); }\n    int find(int u)\n    {\n        if (u == parent[u]) return u;\n        return parent[u] = find(parent[u]);\n    }\n    void merge(int u, int v)\n    {\n        u = find(u); v = find(v);\n        if (u == v) return;\n\n        if (rank[u] > rank[v]) swap(u, v);\n        parent[u] = v;\n        sum[v] += sum[u];\n        if (rank[u] == rank[v]) rank[v]++;\n    }\n};\n\nint main(void)\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int n, m; cin >> n >> m;\n    DisjointSet ds(n); for (int& i : ds.sum) cin >> i;\n\n    for (int j = 0; j < m; j++)\n    {\n        int a, b; cin >> a >> b;\n        ds.merge(a, b);\n    }\n    bool result = true;\n    for (int i = 0; i < n; i++)\n        if (ds.find(i) == i && ds.sum[i])\n            result = false;\n    cout << (result ? "POSSIBLE" : "IMPOSSIBLE") << endl;\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 8, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3690496, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 6, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3719168, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 10, "memory_cost": 3719168}	2019310631	14.6.203.136
299191e58b392dfa286e2c8fd7812d8c	2	12	2021-01-03 16:07:18.134992+00	54	#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n\tvector<int> arr(4);\n\tint type = 0;\n\tfor (int i = 0; i < 4; i++) {\n\t\tcin >> arr[i];\n\t}\n\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] < arr[i + 1] && (type == 0 || type == 1)) type = 1;\n\t\telse if (arr[i] > arr[i + 1] && (type == 0 || type == 2)) type = 2;\n\t\telse if (arr[i] == arr[i + 1] && (type == 0 || type == 3)) type = 3;\n\t\telse type = 4;\n\t}\n\tswitch (type) {\n\tcase 1: {\n\t\tprintf("Uphill\\n");\n\t\tbreak;\n\t}\n\tcase 2: {\n\t\tprintf("Downhill\\n");\n\t\tbreak;\n\t}\n\tcase 3: {\n\t\tprintf("Flat Land\\n");\n\t\tbreak;\n\t}\n\tcase 4: {\n\t\tprintf("Unknown\\n");\n\t\tbreak;\n\t}\n\t}\n}	0	{"err": null, "data": [{"error": 0, "memory": 3395584, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 0, "memory_cost": 3571712}	2017314656	1.249.93.73
7f5401cee613d314c2c93893b4f6635a	2	13	2021-01-03 16:21:33.7403+00	54	#include <iostream>\n#include <string>\n\nusing namespace std;\nint check(char a,char* chk) {\n\tint retval = 0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tif (a == chk[i]) retval = 1;\n\t}\n\treturn retval;\n}\nint main() {\n\tchar str[31];\n\tchar chk[7] = { 'H','I','N','O','S','X','Z' };\n\tcin >> str;\n\tfor (int i = 0; i < strlen(str); i++) {\n\t\tif (check(str[i], chk)) continue;\n\t\telse {\n\t\t\tcout << "NO\\n";\n\t\t\treturn 0;\n\t\t}\n\t}\n\tcout << "YES\\n";\n\treturn 0;\n}	-2	{}	C++	f	{"score": 0, "err_info": "/judger/run/dddd403718404ae8b92fc6b03031d6b4/main.cpp: In function 'int main()':\\n/judger/run/dddd403718404ae8b92fc6b03031d6b4/main.cpp:16:22: error: 'strlen' was not declared in this scope\\n  for (int i = 0; i < strlen(str); i++) {\\n                      ^~~~~~\\n/judger/run/dddd403718404ae8b92fc6b03031d6b4/main.cpp:16:22: note: suggested alternative: 'mbrlen'\\n  for (int i = 0; i < strlen(str); i++) {\\n                      ^~~~~~\\n                      mbrlen"}	2017314656	1.249.93.73
ea04ec7deb9305a4085926e5040f4a0f	2	16	2021-01-03 15:39:33.25212+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n#define int ll\n\nint ans = 1e9 + 7;\nint n, m;\nvector<int> a;\nvector<int> sf;\nvoid f(int now, int S, int cost)\n{\n    if (now == n)\n    {\n        if (S != m) return;\n        ans = min(ans, cost);\n        return;\n    }\n    for (int b = 1; b <= a[now]; ++b)\n    {\n        if (sf[now + 1] + S + b*b < m) continue;\n        if (S + b*b + n - now - 1 > m) continue;\n        f(now + 1, S + b*b, cost + (a[now] - b) * (a[now] - b));\n    }\n}\nvoid solve()\n{\n    cin>>n>>m;\n    a.resize(n);\n    sf.resize(n + 1, 0);\n    for(int& it: a) cin>>it;\n    for (int i=n;i>0;--i)\n        sf[i-1] = sf[i] + a[i-1] * a[i-1];\n    f(0, 0, 0);\n    cout << ans << '\\n';\n}\n\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	1	{"err": null, "data": [{"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 3239936, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3256320, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 2000, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "7b451256bcf54f098a4cf983f9dd98ed"}, {"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3493888, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "7b451256bcf54f098a4cf983f9dd98ed"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 3530752, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "218a0aefd1d1a4be65601cc6ddc1520e"}, {"error": 0, "memory": 3211264, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1998, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3309568, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1998, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 1998, "memory_cost": 3608576}	2020310781	210.219.176.200
ad68c70e88e8736d48e314146215332c	2	14	2021-01-03 15:41:48.589696+00	17	#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main(void)\n{\n    int cus;\n    int mer[1005];\n    int consec[1005];\n    int ans = -1;\n\n    scanf("%d", &cus);\n\n    for (int i = 0; i < cus; i++)\n        scanf("%d", &mer[i]);\n\n    for (int i = 0; i < cus - 1; i++)\n    {\n        int cnt = 0;\n\n        for (int j = i + 1; j < cus; j++)\n        {\n            if (mer[i + 1] == mer[j])\n                cnt++;\n\n            else if (mer[i] == mer[j])\n                continue;\n\n            else\n                break;\n        }\n\n        for (int j = i - 1; j >= 0; j--)\n        {\n            if (mer[i - 1] == mer[j])\n                cnt++;\n\n            else if (mer[i] == mer[j])\n                continue;\n\n            else\n                break;\n        }\n\n        consec[i] = cnt;\n    }\n\n    for (int i = 0; i < cus - 1; i++)\n    {\n        if (ans < consec[i])\n            ans = consec[i];\n    }\n\n    printf("%d", ans);\n\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3747840, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3567616, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3661824, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3751936, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3624960, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3657728, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3706880, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3584000, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3665920, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3579904, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "11", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3571712, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3575808, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "13", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3661824, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3637248, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "15", "output_md5": "2bb232c0b13c774965ef8558f0fbd615"}, {"error": 0, "memory": 3739648, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3653632, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3653632, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3571712, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "19", "output_md5": "35f4a8d465e6e1edc05f3d8ab658c551"}, {"error": 0, "memory": 3600384, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "44f683a84163b3523afe57c2e008bc8c"}, {"error": 0, "memory": 3739648, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3739648, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "735b90b4568125ed6c3f678819b6e058"}]}	C++	f	{"time_cost": 2, "memory_cost": 3751936}	2019311277	218.39.120.122
33d8718dd597eca6837fe4a53cd49b0d	2	12	2021-01-03 15:57:58.504012+00	52	h = [0,0,0,0]\nh[0] = int(input("첫번째 높이:"))\nh[1] = int(input("두번째 높이:"))\nh[2] = int(input("세번째 높이:"))\nh[3] = int(input("네번째 높이:"))\n\nif h[0]<h[1]<h[2]<h[3]:\n    print("Uphill")\nelif h[0]>h[1]>h[2]>h[3]:\n    print("Downhill")\nelif h[0]==h[1]==h[2]==h[3]:\n    print("Flat Land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "5b42a2ac2059f7f7af0faa0529658fe6"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "96cd42e6ead549a1b8bb972ac1ee3bb0"}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "c4d063af0d24132f9c92dfd1d526e763"}, {"error": 0, "memory": 8990720, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "2afd35666397cd2b64d80244593a2ba1"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "c4d063af0d24132f9c92dfd1d526e763"}]}	Python3	f	{"time_cost": 10, "memory_cost": 9035776}	2018310766	175.192.51.105
d07b56a1217f6cf9665408ec8f1f1079	2	15	2021-01-03 15:45:21.395205+00	45	#include<iostream>\nusing namespace std;\n\nint main()\n{\n\tint n,m,tot=0;\n  \tcin >> n; cin >> m;\n  int ar[n];\n  bool wow[n];\n  for(int i=0;i<n;i++){\n   cin >> ar[i];\n    wow[i] = false;\n  }\n  for(int i=0;i<m;i++){\n\tint a,b,c;\n    cin >> a; cin >> b;\n    if(!wow[a]){\n      tot+=ar[a];\n      wow[a] = true;\n    }\n    if(!wow[b]){\n      tot+=ar[b];\n      wow[b] = true;\n    }\n  }\n if(tot==0)\n   cout << "POSSIBLE";\n  else\n    cout << "IMPOSSIBLE";\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 11, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 22, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 10, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3620864, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "7", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3440640, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 21, "memory_cost": 3620864}	2020311715	122.34.162.120
d2b694bf0823cdce1a440c4dc15c6aa0	2	14	2021-01-03 15:49:25.270901+00	17	#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main(void)\n{\n    int cus;\n    int mer[1005];\n    int consec[1005];\n    int ans = -1;\n\n    scanf("%d", &cus);\n\n    for (int i = 0; i < cus; i++)\n        scanf("%d", &mer[i]);\n\n    for (int i = 0; i < cus; i++)\n    {\n        int cnt = 0;\n        int temp = -1;\n\n        for (int j = i; j < cus; j++)\n        {\n            if (mer[i] == mer[j])\n                cnt++;\n\n            else if (mer[i] != mer[j])\n            {\n                if (temp < 0)\n                    temp = mer[j];\n\n                else\n                {\n                    if (temp == mer[j])\n                        continue;\n\n                    else\n                        break;\n                }\n            }\n        }\n\n        consec[i] = cnt;\n    }\n\n    for (int i = 0; i < cus - 1; i++)\n    {\n        if (ans < consec[i])\n            ans = consec[i];\n    }\n\n    printf("%d", ans);\n\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3739648, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3747840, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3743744, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3739648, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3706880, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3735552, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3706880, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3710976, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3690496, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3743744, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3743744, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3747840, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 4, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 4, "memory_cost": 3747840}	2019311277	218.39.120.122
8286717e37c3c3e6b3ab7df51131111b	2	16	2021-01-03 15:47:04.35591+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 1; i <= int(n); ++i)\n#define int ll\n\nint n, m;\nint a[11];\nint dp[11][11'111];\nvoid solve()\n{\n    cin>>n>>m;\n    forn(i, n) cin>>a[i];\n    memset(dp, 0x3F, sizeof dp);\n    dp[0][0] = 0;\n    forn(i, n)\n    {\n        for (int bf = 0; bf<=m;++bf)\n        {\n            for (int now = 1; now <= a[i]; ++now)\n            {\n                int S = bf + now*now;\n                if (S > m) continue;\n                int  f = dp[i - 1][bf] + (a[i] - now)*(a[i] - now);\n                dp[i][S] = min(dp[i][S], f);\n            }\n        }\n    }\n    int ans = 1e9 + 7;\n    cout << dp[n][m] << '\\n';\n}\n\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 4423680, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4481024, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 4423680, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 10, "test_case": "3", "output_md5": "a97f6e2fedcabc887911dc9b5fd3ccc3"}, {"error": 0, "memory": 4591616, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "a3ec6dd8d538712a581e5b24726ce062"}, {"error": 0, "memory": 4476928, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "5", "output_md5": "e28917f9d5f05e8cc6279ed685369807"}, {"error": 0, "memory": 4481024, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 4534272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4468736, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e28917f9d5f05e8cc6279ed685369807"}, {"error": 0, "memory": 4366336, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 4476928, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "10", "output_md5": "218a0aefd1d1a4be65601cc6ddc1520e"}, {"error": 0, "memory": 4419584, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "11", "output_md5": "ac2a728f9f17b5d860b6dabd80a5162f"}, {"error": 0, "memory": 4481024, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 10, "memory_cost": 4591616}	2020310781	210.219.176.200
32436187cacffc0203c672f566022202	2	14	2021-01-03 15:59:44.630064+00	16	#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n// H I N O S X Z\nint main() {\n    int a;\n    cin >> a;\n    int t[a];\n    vector<int> v1, v2;\n    vector<int>::iterator it;\n    for (int i = 0; i < a; i++) {\n        cin >> t[i];\n        v1.push_back(t[i]);\n    }\n    sort(v1.begin(), v1.end());\n    int max=0;\n    int temp_max = 0;\n    int temp_m = 0;\n    while (!v1.empty()) {\n        temp_m = 0;\n              temp_max =0 ;\n        it = v1.end();\n        it --;\n        int temp =*it;\n\n        int temp2 = 0;\n        for (int i = 0; i < a; i++) {\n            if (t[i] != temp) {\n                if (temp2 == t[i]) {\n                    temp_m++;\n                    if (temp_max < temp_m) {\n                        temp_max = temp_m;\n                    }\n                }\n                else {\n                    temp2 = t[i];\n                    temp_m = 1;\n                }\n            }\n        }\n        while (temp == v1.back()) {\n            v1.pop_back();\n        }\n        if(max < temp_max){\n            max = temp_max;\n        }\n\n    }\n    cout << max;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3350528, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3403776, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "2", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3391488, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3354624, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3399680, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3371008, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 3, "memory_cost": 3645440}	2020314959	1.235.77.218
179ec45f64eabcfbf8042c0921ba271f	2	16	2021-01-03 15:47:30.34247+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 1; i <= int(n); ++i)\n#define int ll\n\nint n, m;\nint a[11];\nint dp[11][11'111];\nvoid solve()\n{\n    cin>>n>>m;\n    forn(i, n) cin>>a[i];\n    memset(dp, 0x3F, sizeof dp);\n    dp[0][0] = 0;\n    forn(i, n)\n    {\n        for (int bf = 0; bf<=m;++bf)\n        {\n            for (int now = 1; now <= a[i]; ++now)\n            {\n                int S = bf + now*now;\n                if (S > m) continue;\n                int  f = dp[i - 1][bf] + (a[i] - now)*(a[i] - now);\n                dp[i][S] = min(dp[i][S], f);\n            }\n        }\n    }\n    int ans = 1e9 + 7;\n    cout << (dp[n][m] > ans ? -1 : dp[n][m]) << '\\n';\n}\n\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 4468736, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4530176, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 8, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 4481024, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "a97f6e2fedcabc887911dc9b5fd3ccc3"}, {"error": 0, "memory": 4472832, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 9, "test_case": "4", "output_md5": "a3ec6dd8d538712a581e5b24726ce062"}, {"error": 0, "memory": 4468736, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4476928, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 4501504, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4497408, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4485120, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 4587520, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "10", "output_md5": "218a0aefd1d1a4be65601cc6ddc1520e"}, {"error": 0, "memory": 4513792, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "11", "output_md5": "ac2a728f9f17b5d860b6dabd80a5162f"}, {"error": 0, "memory": 4595712, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 15, "memory_cost": 4595712}	2020310781	210.219.176.200
1e6a46c8a91c2154f9c09a73f8c6eadb	2	15	2021-01-03 15:48:04.747151+00	45	#include<iostream>\nusing namespace std;\n\nint main()\n{\n\tint n,m,tot=0;\n  \tcin >> n; cin >> m;\n  int ar[n];\n  bool wow[n];\n  for(int i=0;i<n;i++){\n   cin >> ar[i];\n    wow[i] = true;\n  }\n  for(int i=0;i<m;i++){\n\tint a,b,c;\n    cin >> a; cin >> b;\n    if(wow[a]){\n      tot+=ar[a];\n      wow[a] = false;\n    }\n    if(wow[b]){\n      tot+=ar[b];\n      wow[b] = false;\n    }\n  }\n if(tot==0)\n   cout << "POSSIBLE";\n  else\n    cout << "IMPOSSIBLE";\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3403776, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 10, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 8, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3547136, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "7", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 18, "memory_cost": 3563520}	2020311715	122.34.162.120
55ac3ee1b8ba07a58086661f0e9dd2a1	2	16	2021-01-03 15:49:17.578832+00	26	i#include<bits/stdc++.h>\n#define int long long\n#define zmrl(x) signed((x).size())\n#define ahen(x) (x).begin(),(x).end()\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\nusing namespace std;\nusing pii = pair<int,int>;\n\nsigned main() {\n    ios_base::sync_with_stdio(false); cin.tie(NULL);\n    int n,m; cin>>n>>m;\n    int A[11];\n    for (int i=1; i<=n; i++) cin>>A[i];\n    int dp[11][10010];\n    memset(dp, -1, sizeof(dp));\n    dp[0][0] = 0;\n    for (int i=1; i<=n; i++) {\n        for (int j=1; j<=m; j++) {\n            int sq = sqrt(j);\n            for (int k=1; k<=sq; k++) {\n                if (dp[i-1][j-k*k] == -1) continue;\n                if (dp[i][j] == -1) dp[i][j] = dp[i-1][j-k*k] + (k-A[i])*(k-A[i]);\n                else dp[i][j] = min(dp[i][j], dp[i-1][j-k*k] + (k-A[i])*(k-A[i]));\n            }\n        }\n    }\n    cout<<dp[n][m]<<'\\n';\n    return 0;\n}	-2	{}	C++	f	{"score": 0, "err_info": "/judger/run/628acb94f09f4020aa7f4e28348b35d9/main.cpp:1:2: error: stray '#' in program\\n i#include<bits/stdc++.h>\\n  ^\\n/judger/run/628acb94f09f4020aa7f4e28348b35d9/main.cpp:1:1: error: 'i' does not name a type; did you mean 'fi'?\\n i#include<bits/stdc++.h>\\n ^\\n fi\\n/judger/run/628acb94f09f4020aa7f4e28348b35d9/main.cpp:10:13: error: 'pair' does not name a type\\n using pii = pair<int,int>;\\n             ^~~~\\ncompilation terminated due to -fmax-errors=3."}	2016311072	124.57.202.47
ab146fa7471a824d36d2784c0cd9b9d2	2	16	2021-01-03 15:49:33.182968+00	28	#include <bits/stdc++.h>\n#define endl '\\n'\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\nint cache[10001][11];\nint dp(const vector<int>& v, int m, int idx)\n{\n    int& c = cache[m][idx];\n    if (idx == v.size()) return (m ? 1E9 : 0);\n    if (c != -1) return c;\n    ////////////////////////////////////////////////////////////////////////////\n    int ret = 1E9;\n    for (int i = 1; i*i <= m; i++)\n        ret = min(ret, dp(v, m-i*i, idx+1)+(v[idx]-i)*(v[idx]-i));\n    return c = ret;\n}\n\nint main(void)\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    memset(cache, -1, sizeof(cache));\n    \n    int n, m; cin >> n >> m;\n    vector<int> v(n); for (int& i : v) cin >> i;\n    cout << dp(v, m, 0) << endl;\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 4079616, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3801088, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 3854336, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 24, "test_case": "3", "output_md5": "a97f6e2fedcabc887911dc9b5fd3ccc3"}, {"error": 0, "memory": 3919872, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "a3ec6dd8d538712a581e5b24726ce062"}, {"error": 0, "memory": 3842048, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "5", "output_md5": "a4bcaee7d57e19735590b480feaebddb"}, {"error": 0, "memory": 3817472, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3985408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4096000, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3985408, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 3817472, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 4034560, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "11", "output_md5": "ac2a728f9f17b5d860b6dabd80a5162f"}, {"error": 0, "memory": 3895296, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 11, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 19, "memory_cost": 4096000}	2019310631	14.6.203.136
85b160024b08dea89ef2024f66d133f1	2	12	2021-01-03 15:53:45.885276+00	23	arr = []\nfor _ in range(4):\n\tarr.append(int(input()))\nif arr[0] - arr[1] == arr[1] - arr[2] == arr[2] - arr[3]:\n    if arr[0] - arr[1] > 0:\n        print("Downhill")\n    elif arr[0] - arr[1] < 0:\n        print("Uphill")\n    else:\n        print("Flat Land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9015296, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9023488}	2016312057	221.140.190.217
ab7305282b51bbb274903925c10e2958	2	14	2021-01-03 15:58:19.05743+00	16	#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n// H I N O S X Z\nint main() {\n    int a;\n    cin >> a;\n    int t[a];\n    vector<int> v1, v2;\n    vector<int>::iterator it;\n    for (int i = 0; i < a; i++) {\n        cin >> t[i];\n        v1.push_back(t[i]);\n    }\n    sort(v1.begin(), v1.end());\n    int max=0;\n    int temp_max = 0;\n    int temp_m = 0;\n    while (!v1.empty()) {\n        temp_m = 0;\n        it = v1.end();\n        it --;\n        int temp =*it;\n\n        int temp2 = 0;\n        for (int i = 0; i < a; i++) {\n            if (t[i] != temp) {\n                if (temp2 == t[i]) {\n                    temp_m++;\n                    if (temp_max < temp_m) {\n                        temp_max = temp_m;\n                    }\n                }\n                else {\n                    temp2 = t[i];\n                    temp_m = 1;\n                }\n            }\n        }\n        while (temp == v1.back()) {\n            v1.pop_back();\n        }\n        if(max < temp_max){\n            max = temp_max;\n        }\n\n    }\n    cout << max;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3473408, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "2", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3452928, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3465216, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3362816, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3371008, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3391488, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3395584, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 4, "memory_cost": 3624960}	2020314959	1.235.77.218
c2086edf78f668c56718e74415cba3cb	2	14	2021-01-03 16:02:32.638189+00	16	#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n// H I N O S X Z\nint main() {\n    int a;\n    cin >> a;\n    int t[a];\n    vector<int> v1, v2;\n    vector<int>::iterator it;\n    for (int i = 0; i < a; i++) {\n        cin >> t[i];\n        v1.push_back(t[i]);\n    }\n    sort(v1.begin(), v1.end());\n    int max=0;\n    int temp_max = 0;\n    int temp_m = 0;\n    while (!v1.empty()) {\n        temp_m = 0;\n              temp_max =0 ;\n        it = v1.end();\n        it --;\n        int temp =*it;\n\n        int temp2 = -1;\n        for (int i = 0; i < a; i++) {\n            if (t[i] != temp) {\n                if (temp2 == t[i]) {\n                    temp_m++;\n                    if (temp_max < temp_m) {\n                        temp_max = temp_m;\n                    }\n                }\n                else {\n                    temp2 = t[i];\n                    temp_m = 1;\n                }\n            }\n        }\n        while (temp == v1.back()) {\n            v1.pop_back();\n        }\n        if(max < temp_max){\n            max = temp_max;\n        }\n\n    }\n    cout << max;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3534848, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "2", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3653632, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3403776, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 3, "memory_cost": 3653632}	2020314959	1.235.77.218
7c255ad58ec1ab73da84e9c9d872a5cb	2	13	2021-01-03 16:12:55.232026+00	52	import re\nS=str(input())\nre.match('H|I|N|O|S|X|Z',S)	-1	{"err": null, "data": [{"error": 0, "memory": 9859072, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 24, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9850880, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9859072, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 22, "test_case": "3", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9850880, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9863168, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 22, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9801728, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "6", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9863168, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "7", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9936896, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "8", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9842688, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "9", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9756672, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "10", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	Python3	f	{"time_cost": 19, "memory_cost": 9936896}	2018310766	175.192.51.105
57fad74a55af910743f3b3f5a1ab041b	2	14	2021-01-03 16:13:37.466626+00	16	#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <set>\nusing namespace std;\n// H I N O S X Z\nint main() {\n    int a;\n    cin >> a;\n    int t[a];\n    vector<int> v1, v2;\n    set<int> s1;\n    set<int>::iterator it;\n    for (int i = 0; i < a; i++) {\n        cin >> t[i];\n        s1.insert(t[i]);\n    }\n    int max = 0;\n    int temp_max = 0;\n\n    for (it = s1.begin(); it != s1.end(); it++) {\n        int abc = -1;\n        int count_t = 0;\n        for (int i = 0; i < a; i++) {\n            if (t[i] == *it) {\n                continue;\n            }\n            else {\n                if (t[i] == abc) {\n                    count_t++;\n                    if (count_t > temp_max) temp_max = count_t;\n                }\n                else {\n                    abc = t[i];\n                    count_t = 1;\n                    if (count_t > temp_max) temp_max = count_t;\n                }\n            }\n        }\n    }\n    cout << temp_max;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3272704, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3436544, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3297280, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3301376, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3305472, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3653632, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3424256, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3387392, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3416064, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 4, "memory_cost": 3653632}	2020314959	1.235.77.218
54a18653b365a83456e1cf31e0997667	2	16	2021-01-03 18:08:48.160145+00	23	from itertools import permutations\ndef find(a,b):\n    return (a - b) * (a - b)\n\nn, m = map(int, input().split())\nt = [int(input()) for _ in range(n)]\nt.sort()\narr = []\nlocal_arr = []\nans = 100*100*10\ndef find_dfs(x, m, k):\n    global arr\n    global local_arr\n    global n\n    if (n == x):\n        if(m == 0):\n            arr.append(list(local_arr))\n            return\n        else:\n            return\n    for i in range(k, 100):\n        if i * i > m:\n            break\n        local_arr.append(i)\n        find_dfs(x + 1, m - i * i, i)\n        local_arr.pop()\n        \nfind_dfs(0, m, 1)\nif len(arr) == 0:\n    print(-1)\nelse:\n    for temp in arr:\n        l_min = 0\n        for i in range(len(temp)):\n            l_min += find(temp[i], t[i])\n        ans = min(ans, l_min)\n    print(ans)	1	{"err": null, "data": [{"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 29, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 49, "exit_code": 0, "real_time": 57, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 9121792, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9093120, "output": null, "result": 1, "signal": 9, "cpu_time": 1993, "exit_code": 0, "real_time": 1999, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 56, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 19, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9056256, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9064448, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 47, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 9572352, "output": null, "result": 1, "signal": 9, "cpu_time": 1993, "exit_code": 0, "real_time": 1998, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 9248768, "output": null, "result": 1, "signal": 9, "cpu_time": 1989, "exit_code": 0, "real_time": 1998, "test_case": "12", "output_md5": null}]}	Python3	f	{"time_cost": 1998, "memory_cost": 9572352}	2016312057	221.140.190.220
16f2bfc688cbbb9009e7facf3caca3d7	2	12	2021-01-04 02:37:51.098473+00	33	#include <stdio.h>\n\n# define TRUE\t1\n# define FALSE\t0\n\nint main(void)\n{\n\tint\theight[4];\n\tint\tisUphill = TRUE;\n\tint\tisDownhill = TRUE;\n\tint isFlat = TRUE;\n\n\tfor (int i = 0; i < 4; i++)\n\t\tscanf("%d", &height[i]);\n\tfor (int i = 1; i < 4; i++)\n\t{\n\t\tif (height[i] <= height[i - 1])\n\t\t\tisUphill = FALSE;\n\t\tif (height[i] >= height[i - 1])\n\t\t\tisDownhill = FALSE;\n\t\tif (height[i] != height[i - 1])\n\t\t\tisFlat = FALSE;\n\t}\n\tif (isUphill)\n\t\tprintf("Uphill");\n\telse if (isDownhill)\n\t\tprintf("Downhill");\n\telse if (isFlat)\n\t\tprintf("Flat Land");\n\telse\n\t\tprintf("Unknown");\n    return (0);\n}	0	{"err": null, "data": [{"error": 0, "memory": 1613824, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1585152, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1658880}	2015313375	175.196.189.112
2b036178937c061f5e3e6153d9752244	2	16	2021-01-03 18:57:16.678274+00	23	from itertools import combinations_with_replacement\n\ndef find(a,b):\n    return (a - b) * (a - b)\n\nn, m = map(int, input().split())\nt = [int(input()) for _ in range(n)]\nt.sort()\narr1 = [[] for _ in range(m + 1)]\narr2 = [[] for _ in range(m + 1)]\nlocal_arr = []\nans = 100*100*10\ncnt =0\ndiv = n // 2\nfor cwr in combinations_with_replacement([x for x in range (1,100)], div):\n    add = 0\n    for _ in cwr:\n        add += _ * _\n    if add > m:\n        continue\n    arr1[add].append(list(cwr))\n\nif n % 2 == 1:\n    div += 1\nfor cwr in combinations_with_replacement([x for x in range (1,100)], div):\n    add = 0\n    for _ in cwr:\n        add += _ * _\n    if add > m:\n        continue\n    arr2[add].append(list(cwr))\n\nfor _ in range (1, m):\n    if len(arr1[_]) != 0 and len(arr2[m - _]) != 0:\n        for x in arr1[_]:\n            for y in arr2[m - _]:\n                test = []\n                test.extend(x)\n                test.extend(y)\n                test.sort()\n                chk = 0\n                for i in range(len(test)):\n                    chk += find(test[i], t[i])\n                ans = min(ans, chk)\n\nif ans == 100*100*10:\n    print(-1)\nelse:\n    print(ans)	1	{"err": null, "data": [{"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 10731520, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 23, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 157519872, "output": null, "result": 1, "signal": 9, "cpu_time": 1945, "exit_code": 0, "real_time": 2007, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 139296768, "output": null, "result": 1, "signal": 9, "cpu_time": 1972, "exit_code": 0, "real_time": 2005, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 10838016, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 22, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 159, "exit_code": 0, "real_time": 164, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 8884224, "output": null, "result": 1, "signal": 9, "cpu_time": 1996, "exit_code": 0, "real_time": 1998, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9150464, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 22, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 8867840, "output": null, "result": 1, "signal": 9, "cpu_time": 1984, "exit_code": 0, "real_time": 1997, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 10309632, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 22, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 65499136, "output": null, "result": 1, "signal": 9, "cpu_time": 1967, "exit_code": 0, "real_time": 2000, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 127250432, "output": null, "result": 1, "signal": 9, "cpu_time": 1969, "exit_code": 0, "real_time": 2006, "test_case": "12", "output_md5": null}]}	Python3	f	{"time_cost": 1996, "memory_cost": 157519872}	2016312057	221.140.190.220
2b0e4cb87240a583733fb08558222928	2	20	2021-01-03 19:51:21.305386+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n#define int ll\nvector<int> wt[1111];\nvoid solve()\n{\n    //how?\n    int n; cin>>n;\n    int elen = n*(n-1)/2;\n    int se = 0;\n    forn(i, elen)\n    {\n        int u, v, w; cin>>u>>v>>w;\n        --u, --v;\n        wt[u].pb(w);\n        wt[v].pb(w);\n        se += w;\n    }\n    int sd = 0;\n    forn(i, n)\n    {\n        sort(all(wt[i]));\n        for (int j=0;j<sz(wt[i]); j+=2)\n            sd += wt[i][j+1] - wt[i][j];\n    }\n    cout << se + sd / 2 << '\\n';\n}\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    solve();\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1c383cd30b7c298ab50293adfecb7b18"}, {"error": 0, "memory": 3575808, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "0304bcc8163cec8f0998932673f23970"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "4", "output_md5": "7224bca49039e768b546ec15dd473078"}, {"error": 0, "memory": 5664768, "output": null, "result": 0, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 46, "test_case": "5", "output_md5": "c5132fdf83d469561e5f6da1b7df9319"}, {"error": 0, "memory": 12337152, "output": null, "result": 0, "signal": 0, "cpu_time": 100, "exit_code": 0, "real_time": 121, "test_case": "6", "output_md5": "336bc13d547531be0ac9ab0a9bbd8c0f"}, {"error": 0, "memory": 12333056, "output": null, "result": 0, "signal": 0, "cpu_time": 116, "exit_code": 0, "real_time": 121, "test_case": "7", "output_md5": "3781800c8bf82c94c6519f1a77562222"}, {"error": 0, "memory": 12333056, "output": null, "result": 0, "signal": 0, "cpu_time": 126, "exit_code": 0, "real_time": 126, "test_case": "8", "output_md5": "5163e398835e644298aaeac3b2d14a48"}, {"error": 0, "memory": 12353536, "output": null, "result": 0, "signal": 0, "cpu_time": 111, "exit_code": 0, "real_time": 119, "test_case": "9", "output_md5": "eee1d238e298be9dd8f5d93de4f9f91f"}, {"error": 0, "memory": 12390400, "output": null, "result": 0, "signal": 0, "cpu_time": 113, "exit_code": 0, "real_time": 122, "test_case": "10", "output_md5": "359928a649af89087cb74051ee57150b"}, {"error": 0, "memory": 12492800, "output": null, "result": 0, "signal": 0, "cpu_time": 123, "exit_code": 0, "real_time": 124, "test_case": "11", "output_md5": "2e50d3168be2a865587d78dcaa08e2f0"}, {"error": 0, "memory": 12488704, "output": null, "result": 0, "signal": 0, "cpu_time": 97, "exit_code": 0, "real_time": 98, "test_case": "12", "output_md5": "27b1ca325db2ff3886e24b4678e691fc"}, {"error": 0, "memory": 12451840, "output": null, "result": 0, "signal": 0, "cpu_time": 104, "exit_code": 0, "real_time": 109, "test_case": "13", "output_md5": "634eeb23467c3247d1f87e1bfb409d22"}, {"error": 0, "memory": 12541952, "output": null, "result": 0, "signal": 0, "cpu_time": 117, "exit_code": 0, "real_time": 118, "test_case": "14", "output_md5": "0f7ffbca84b8a2cd32fec1576a4675c7"}, {"error": 0, "memory": 12402688, "output": null, "result": 0, "signal": 0, "cpu_time": 78, "exit_code": 0, "real_time": 87, "test_case": "15", "output_md5": "4bc3ea75ff97347388852330b7eb136c"}, {"error": 0, "memory": 12599296, "output": null, "result": 0, "signal": 0, "cpu_time": 118, "exit_code": 0, "real_time": 123, "test_case": "16", "output_md5": "409ac118463129b1adfa64f08d6e1853"}, {"error": 0, "memory": 12550144, "output": null, "result": 0, "signal": 0, "cpu_time": 101, "exit_code": 0, "real_time": 110, "test_case": "17", "output_md5": "cad5c76d76093317349dbc8f62b77820"}, {"error": 0, "memory": 12427264, "output": null, "result": 0, "signal": 0, "cpu_time": 70, "exit_code": 0, "real_time": 74, "test_case": "18", "output_md5": "25eaff2332195674190f2db8d2dfe4bd"}, {"error": 0, "memory": 12353536, "output": null, "result": 0, "signal": 0, "cpu_time": 116, "exit_code": 0, "real_time": 120, "test_case": "19", "output_md5": "bdcfa581cca93025794eb9d1787b0623"}]}	C++	f	{"time_cost": 126, "memory_cost": 12599296}	2020310781	210.219.176.200
cefb21c9c89cc26e061d144a1da0ed7c	2	13	2021-01-03 16:22:08.81165+00	54	#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\nint check(char a,char* chk) {\n\tint retval = 0;\n\tfor (int i = 0; i < 7; i++) {\n\t\tif (a == chk[i]) retval = 1;\n\t}\n\treturn retval;\n}\nint main() {\n\tchar str[31];\n\tchar chk[7] = { 'H','I','N','O','S','X','Z' };\n\tcin >> str;\n\tfor (int i = 0; i < strlen(str); i++) {\n\t\tif (check(str[i], chk)) continue;\n\t\telse {\n\t\t\tcout << "NO\\n";\n\t\t\treturn 0;\n\t\t}\n\t}\n\tcout << "YES\\n";\n\treturn 0;\n}	-2	{}	C++	f	{"score": 0, "err_info": "/judger/run/a4d777b8ae5841bf909d3a1bf22a9514/main.cpp: In function 'int main()':\\n/judger/run/a4d777b8ae5841bf909d3a1bf22a9514/main.cpp:17:22: error: 'strlen' was not declared in this scope\\n  for (int i = 0; i < strlen(str); i++) {\\n                      ^~~~~~\\n/judger/run/a4d777b8ae5841bf909d3a1bf22a9514/main.cpp:17:22: note: suggested alternative: 'mbrlen'\\n  for (int i = 0; i < strlen(str); i++) {\\n                      ^~~~~~\\n                      mbrlen"}	2017314656	1.249.93.73
7b17d0762914f08dbd1670a05c2599ae	2	17	2021-01-03 16:22:22.744387+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n//출처: https://codeforces.com/blog/entry/68809\nvoid __print(int x) {cerr << x;}\nvoid __print(long x) {cerr << x;}\nvoid __print(long long x) {cerr << x;}\nvoid __print(unsigned x) {cerr << x;}\nvoid __print(unsigned long x) {cerr << x;}\nvoid __print(unsigned long long x) {cerr << x;}\nvoid __print(float x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(long double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '"' << x << '"';}\nvoid __print(const string &x) {cerr << '"' << x << '"';}\nvoid __print(bool x) {cerr << (x ? "true" : "false");}\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}\nvoid _print() {cerr << "]\\n";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}\n#ifndef ONLINE_JUDGE\n#define debug(x...) cerr << "[" << (#x) << "] = [", _print(x)\n#else\n#define debug(x...)\n#endif\n#define sq 555\n\nstring s;\n\nint n, q;\nvector<pair<int, int>> Q;\nvector<int> f;\nint A[111'111];\n\nint cnt[111'111];\nint kd = 0;\nvoid add(int x)\n{\n    cnt[x]++;\n    if (cnt[x] == 1)++kd;\n}\nvoid rmv(int x)\n{\n    cnt[x]--;\n    if (cnt[x] == 0)--kd;\n}\nbool test(int u)\n{\n    forn(i, n) A[i] = s[i];\n    for(int i=0;i<=u;++i) A[f[i]] = 333 + i;\n    \n    int s = 0, e = 0;\n    for (auto& it: Q)\n    {\n        while(e<it.s) add(A[e++]);\n        while(s>it.f) add(A[--s]);\n        while(e>it.s) rmv(A[--e]);\n        while(s<it.f) rmv(A[s++]);\n        // cout << kd << ' ' <<it.s-it.f << ' ' <<s << ' ' <<e<<endl;\n\n        if (kd != it.s - it.f)\n        {\n            // debug(u, kd, it.s-it.f, s, e);\n            while(s<e) rmv(A[s++]);\n            return false;\n        }\n    }\n    while(s<e) rmv(A[s++]);\n    return true;\n}\nvoid solve()\n{\n    cin>>s; n= sz(s);\n    cin>>q;\n    f.resize(sz(s));\n    Q.resize(q);\n    for(auto& it: Q)\n        cin>>it.f >>it.s, it.f--;\n    for(int& it:f)cin>>it, --it;\n    sort(Q.begin(), Q.end(),[](auto& a, auto& b)\n    {\n        int g1 = a.f / sq;\n        int g2 = b.f / sq;\n        if (g1 == g2) return a.s < b.s;\n        return g1 < g2;\n    });\n    int lf=0, rg = n;\n    while(lf < rg)\n    {\n        int mid = (lf + rg) / 2;\n        if (test(mid - 1))\n        {\n            rg = mid;\n        }\n        else lf = mid + 1;\n    }\n    cout << rg << '\\n';\n}\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    int T = 1; //cin >> T;\n    while (T--) solve();\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3575808, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 5480448, "output": null, "result": 0, "signal": 0, "cpu_time": 436, "exit_code": 0, "real_time": 437, "test_case": "4", "output_md5": "023fcbb6cc093f6f06e0cfcb02565a48"}, {"error": 0, "memory": 5193728, "output": null, "result": 0, "signal": 0, "cpu_time": 519, "exit_code": 0, "real_time": 528, "test_case": "5", "output_md5": "d800c6cf5d304e013ec4f95ab772d62e"}, {"error": 0, "memory": 5566464, "output": null, "result": 0, "signal": 0, "cpu_time": 118, "exit_code": 0, "real_time": 119, "test_case": "6", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "7", "output_md5": "34ed066df378efacc9b924ec161e7639"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "7fe1f8abaad094e0b5cb1b01d712f708"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "3cf166c6b73f030b4f67eeaeba301103"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "8dd48d6a2e2cad213179a3992c0be53c"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "11", "output_md5": "019d385eb67632a7e958e23f24bd07d7"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "05f971b5ec196b8c65b75d2ef8267331"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "13", "output_md5": "8d9fc2308c8f28d2a7d2f6f48801c705"}, {"error": 0, "memory": 3588096, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "14", "output_md5": "ac5dab2e99eee9cf9ec672e383691302"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "15", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "16", "output_md5": "90599c8fdd2f6e7a03ad173e2f535751"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "17", "output_md5": "15d185eaa7c954e77f5343d941e25fbd"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 9, "test_case": "18", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 10, "test_case": "19", "output_md5": "dc16622ddc767e6bc1200fe5df2fbdfb"}, {"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "20", "output_md5": "90aef91f0d9e7c3be322bd7bae41617d"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "21", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 5378048, "output": null, "result": 0, "signal": 0, "cpu_time": 517, "exit_code": 0, "real_time": 518, "test_case": "22", "output_md5": "017335bad48f4cae20a7fb8201cc1323"}, {"error": 0, "memory": 5611520, "output": null, "result": 0, "signal": 0, "cpu_time": 128, "exit_code": 0, "real_time": 129, "test_case": "23", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 5361664, "output": null, "result": 0, "signal": 0, "cpu_time": 522, "exit_code": 0, "real_time": 531, "test_case": "24", "output_md5": "d1189a6e530de53bd545ae83f266820c"}, {"error": 0, "memory": 5566464, "output": null, "result": 0, "signal": 0, "cpu_time": 95, "exit_code": 0, "real_time": 100, "test_case": "25", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 5373952, "output": null, "result": 0, "signal": 0, "cpu_time": 514, "exit_code": 0, "real_time": 516, "test_case": "26", "output_md5": "8ecdbbf4ca2a3715337c02cb8d2ea4cc"}, {"error": 0, "memory": 5472256, "output": null, "result": 0, "signal": 0, "cpu_time": 376, "exit_code": 0, "real_time": 381, "test_case": "27", "output_md5": "a0e26081e098a15167d39b7194c5e467"}, {"error": 0, "memory": 5599232, "output": null, "result": 0, "signal": 0, "cpu_time": 100, "exit_code": 0, "real_time": 101, "test_case": "28", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 5316608, "output": null, "result": 0, "signal": 0, "cpu_time": 559, "exit_code": 0, "real_time": 564, "test_case": "29", "output_md5": "2b4226dd7ed6eb2d419b881f3ae9c97c"}, {"error": 0, "memory": 5488640, "output": null, "result": 0, "signal": 0, "cpu_time": 523, "exit_code": 0, "real_time": 525, "test_case": "30", "output_md5": "a195e29a87f723b4f0dc559794e86038"}, {"error": 0, "memory": 5459968, "output": null, "result": 0, "signal": 0, "cpu_time": 115, "exit_code": 0, "real_time": 116, "test_case": "31", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}]}	C++	f	{"time_cost": 559, "memory_cost": 5611520}	2020310781	210.219.176.200
277925f3f2b1a9b148abbea187cd6f9a	2	12	2021-01-03 18:47:39.993031+00	56	#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int arr[4], n = 0;\n  for (int i = 0; i < 4; i++) {\n\t\tcin >> arr[i];\n\t}\n\tcout << endl;\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] >= arr[i + 1]) break;\n\t\tif (i == 2) cout << "Uphill";\n\t\tn = 1;\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] <= arr[i + 1]) break;\n\t\tif (i == 2) cout << "Downhill";\n\t\tn = 1;\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] < arr[i + 1] || arr[i] > arr[i + 1]) break;\n\t\tif (i == 2) cout << "Flat Land";\n\t\tn = 1;\n\t}\n\tif (n == 0) cout << "Unknown";\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3547136, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "8cadfcfd02daa1eeaf79a38309d3a3e8"}, {"error": 0, "memory": 3530752, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "91c36ea28a40c78f648efd201cb13dc1"}, {"error": 0, "memory": 3428352, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3567616, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "cee952d4cc367943b0622a2488fbe177"}, {"error": 0, "memory": 3424256, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3567616}	2020310646	175.192.196.92
b8789c9ba944f29e7f8afd60fdd9fe91	2	17	2021-01-03 16:22:34.018642+00	26	#include<bits/stdc++.h>\n#define int long long\n#define zmrl(x) signed((x).size())\n#define ahen(x) (x).begin(),(x).end()\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\nusing namespace std;\nusing pii = pair<int,int>;\n\npii tree[26][100100<<2];\n\nvoid update(int node, int st, int en, int idx, int val, pii *T) {\n    if (st == en) {\n        T[node] = mp(val, 0);\n        return;\n    }\n    if (idx <= (st+en>>1)) {\n        update(node<<1, st, st+en>>1, idx, val, T);\n    }\n    else {\n        update(node<<1|1, (st+en>>1)+1, en, idx, val, T);\n    }\n    T[node].fi = max(T[node<<1].fi, T[node<<1|1].fi);\n    T[node].se = max(min(T[node<<1].fi, T[node<<1|1].fi), max(T[node<<1].se, T[node<<1|1].se));\n}\n\npii solve(int node, int st, int en, int le, int ri, pii *T) {\n    if (st > ri || en < le) return mp(0, 0);\n    if (le <= st && en <= ri) {\n        return T[node];\n    }\n    pii L = solve(node<<1, st, st+en>>1, le, ri, T);\n    pii R = solve(node<<1|1, (st+en>>1)+1, en, le, ri, T);\n    return mp(max(L.fi, R.fi), max(min(L.fi, R.fi), max(L.se, R.se)));\n}\n\nsigned main() {\n    ios_base::sync_with_stdio(false); cin.tie(NULL);\n    char A[100100]; cin>>(A+1); int n = strlen(A+1);\n    int q; cin>>q;\n    pii Q[100100];\n    for (int i=1; i<=q; i++) {\n        cin>>Q[i].fi>>Q[i].se;\n    }\n    int inv[100100];\n    for (int i=1; i<=n; i++) {\n        int a; cin>>a;\n        inv[a] = i;\n    }\n    for (int i=1; i<=n; i++) {\n        update(1, 1, n, i, inv[i], tree[A[i]-'a']);\n    }\n    int res = 0;\n    for (int i=1; i<=q; i++) {\n        for (int j=0; j<26; j++) {\n            res = max(res, solve(1, 1, n, Q[i].fi, Q[i].se, tree[j]).se);\n        }\n    }\n    cout<<res<<'\\n';\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 5144576, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 5218304, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "2", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 5177344, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 114921472, "output": null, "result": 0, "signal": 0, "cpu_time": 951, "exit_code": 0, "real_time": 977, "test_case": "4", "output_md5": "023fcbb6cc093f6f06e0cfcb02565a48"}, {"error": 0, "memory": 22798336, "output": null, "result": 0, "signal": 0, "cpu_time": 455, "exit_code": 0, "real_time": 464, "test_case": "5", "output_md5": "d800c6cf5d304e013ec4f95ab772d62e"}, {"error": 0, "memory": 14397440, "output": null, "result": 0, "signal": 0, "cpu_time": 431, "exit_code": 0, "real_time": 444, "test_case": "6", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 5660672, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "7", "output_md5": "34ed066df378efacc9b924ec161e7639"}, {"error": 0, "memory": 5160960, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "7fe1f8abaad094e0b5cb1b01d712f708"}, {"error": 0, "memory": 5115904, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "9", "output_md5": "3cf166c6b73f030b4f67eeaeba301103"}, {"error": 0, "memory": 5582848, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 7, "test_case": "10", "output_md5": "8dd48d6a2e2cad213179a3992c0be53c"}, {"error": 0, "memory": 5206016, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "019d385eb67632a7e958e23f24bd07d7"}, {"error": 0, "memory": 5267456, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "12", "output_md5": "05f971b5ec196b8c65b75d2ef8267331"}, {"error": 0, "memory": 8646656, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "13", "output_md5": "8d9fc2308c8f28d2a7d2f6f48801c705"}, {"error": 0, "memory": 5783552, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "14", "output_md5": "ac5dab2e99eee9cf9ec672e383691302"}, {"error": 0, "memory": 5513216, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 14, "test_case": "15", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 8613888, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "16", "output_md5": "90599c8fdd2f6e7a03ad173e2f535751"}, {"error": 0, "memory": 5668864, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "17", "output_md5": "15d185eaa7c954e77f5343d941e25fbd"}, {"error": 0, "memory": 5414912, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "18", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 8634368, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 21, "test_case": "19", "output_md5": "dc16622ddc767e6bc1200fe5df2fbdfb"}, {"error": 0, "memory": 5640192, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "20", "output_md5": "90aef91f0d9e7c3be322bd7bae41617d"}, {"error": 0, "memory": 5468160, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "21", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 10149888, "output": null, "result": 0, "signal": 0, "cpu_time": 424, "exit_code": 0, "real_time": 429, "test_case": "22", "output_md5": "017335bad48f4cae20a7fb8201cc1323"}, {"error": 0, "memory": 10203136, "output": null, "result": 0, "signal": 0, "cpu_time": 428, "exit_code": 0, "real_time": 437, "test_case": "23", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 10199040, "output": null, "result": 0, "signal": 0, "cpu_time": 435, "exit_code": 0, "real_time": 443, "test_case": "24", "output_md5": "d1189a6e530de53bd545ae83f266820c"}, {"error": 0, "memory": 10149888, "output": null, "result": 0, "signal": 0, "cpu_time": 435, "exit_code": 0, "real_time": 440, "test_case": "25", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 114868224, "output": null, "result": 0, "signal": 0, "cpu_time": 878, "exit_code": 0, "real_time": 909, "test_case": "26", "output_md5": "8ecdbbf4ca2a3715337c02cb8d2ea4cc"}, {"error": 0, "memory": 22802432, "output": null, "result": 0, "signal": 0, "cpu_time": 487, "exit_code": 0, "real_time": 492, "test_case": "27", "output_md5": "a0e26081e098a15167d39b7194c5e467"}, {"error": 0, "memory": 14508032, "output": null, "result": 0, "signal": 0, "cpu_time": 450, "exit_code": 0, "real_time": 451, "test_case": "28", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 114909184, "output": null, "result": 0, "signal": 0, "cpu_time": 981, "exit_code": 0, "real_time": 1002, "test_case": "29", "output_md5": "2b4226dd7ed6eb2d419b881f3ae9c97c"}, {"error": 0, "memory": 22806528, "output": null, "result": 0, "signal": 0, "cpu_time": 439, "exit_code": 0, "real_time": 460, "test_case": "30", "output_md5": "a195e29a87f723b4f0dc559794e86038"}, {"error": 0, "memory": 14409728, "output": null, "result": 0, "signal": 0, "cpu_time": 440, "exit_code": 0, "real_time": 444, "test_case": "31", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}]}	C++	f	{"time_cost": 981, "memory_cost": 114921472}	2016311072	124.57.202.47
8b803b3e0d73ace5e9ec6a1509cfce57	2	13	2021-01-03 19:00:35.724544+00	56	#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n\tstring str;\n\tchar tmp;\n\tbool sign = true;\n\tgetline(cin, str);\n\tfor (int i = 0; str[i] != '\\0'; i++) {\n\t\ttmp = str[i];\n\t\tif (tmp != 'H' && tmp != 'I' && tmp != 'N' && tmp != 'O' && tmp != 'S' && tmp != 'X' && tmp != 'Z') {\n\t\t\tsign = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t(sign) ? cout << "YES" : cout << "NO";\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3293184, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3268608, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3403776, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3264512, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3289088, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3457024, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3633152}	2020310646	175.192.196.92
825e22c86638ef8b6e3fee7a589f997c	2	15	2021-01-03 20:10:38.728855+00	52	N, M = map(int, input().split())\ndebt = []\nd = 0\nfriends = []\n\nfor i in range(N):\n    debt.append(int(input()))\n\nfor i in range(M):\n    x, y = map(int, input().split())\n    friends.append([x,y])\n\nfor i in range(M-1):\n    for x in friends[i]:\n        for k in range(1, M-1-i):\n            if x in friends[i+k]:\n                new_set = list(set().union(friends[i],friends[i+k]))\n                friends[i] = new_set\n                friends.remove(friends[i+k])\n\nfor i in friends:\n    for idx in i:\n        d += debt[idx]\n\nif d==0:\n    print("POSSIBLE")\nelse:\n    print("IMPOSSIBLE")	4	{"err": null, "data": [{"error": 0, "memory": 12251136, "output": null, "result": 4, "signal": 0, "cpu_time": 47, "exit_code": 1, "real_time": 55, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 13320192, "output": null, "result": 4, "signal": 0, "cpu_time": 48, "exit_code": 1, "real_time": 65, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 10563584, "output": null, "result": 4, "signal": 0, "cpu_time": 32, "exit_code": 1, "real_time": 41, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 15278080, "output": null, "result": 4, "signal": 0, "cpu_time": 66, "exit_code": 1, "real_time": 87, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 10465280, "output": null, "result": 4, "signal": 0, "cpu_time": 24, "exit_code": 1, "real_time": 33, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 10276864, "output": null, "result": 4, "signal": 0, "cpu_time": 20, "exit_code": 1, "real_time": 32, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 11833344, "output": null, "result": 4, "signal": 0, "cpu_time": 42, "exit_code": 1, "real_time": 51, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 10010624, "output": null, "result": 4, "signal": 0, "cpu_time": 31, "exit_code": 1, "real_time": 32, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 11677696, "output": null, "result": 4, "signal": 0, "cpu_time": 39, "exit_code": 1, "real_time": 51, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 66, "memory_cost": 15278080}	2018310766	175.192.51.105
e23c007891620017519d195d67856047	2	13	2021-01-03 16:35:17.047341+00	52	S = str(input())\nSlist=[]\nusable=['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nfor i in S:\n    Slist.append(i)\n\nif [x for x in Slist if x not in usable] != []:\n    print("NO")\nelse:\n    print("YES")	0	{"err": null, "data": [{"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8916992, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8970240, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8884224, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9027584}	2018310766	175.192.51.105
317005742126f07df9d136835c22f208	2	16	2021-01-03 22:18:34.769545+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n  \n\treturn 9000;\n}	4	{"err": null, "data": [{"error": 0, "memory": 3448832, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 2, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 3563520, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 2, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 3461120, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 3, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3584000, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 2, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3612672, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 3, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3629056, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 40, "real_time": 2, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3563520, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 3, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3584000, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 3, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3375104, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 2, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 3584000, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 40, "real_time": 2, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 3543040, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 2, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3567616, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 2, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 2, "memory_cost": 3629056}	2011314262	211.218.8.61
60bd7dd74dbc8043417b731205334ebc	2	12	2021-01-03 18:47:47.862744+00	56	#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int arr[4], n = 0;\n  for (int i = 0; i < 4; i++) {\n\t\tcin >> arr[i];\n\t}\n\tcout << endl;\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] >= arr[i + 1]) break;\n\t\tif (i == 2) cout << "Uphill";\n\t\tn = 1;\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] <= arr[i + 1]) break;\n\t\tif (i == 2) cout << "Downhill";\n\t\tn = 1;\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] < arr[i + 1] || arr[i] > arr[i + 1]) break;\n\t\tif (i == 2) cout << "Flat Land";\n\t\tn = 1;\n\t}\n\tif (n == 0) cout << "Unknown";\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3416064, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "8cadfcfd02daa1eeaf79a38309d3a3e8"}, {"error": 0, "memory": 3547136, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "91c36ea28a40c78f648efd201cb13dc1"}, {"error": 0, "memory": 3366912, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3485696, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "cee952d4cc367943b0622a2488fbe177"}, {"error": 0, "memory": 3538944, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	C++	f	{"time_cost": 1, "memory_cost": 3547136}	2020310646	175.192.196.92
1b8608b178e0cc89bf9f901a27cda97c	2	20	2021-01-03 19:04:20.018454+00	21	#include <bits/stdc++.h>\nusing namespace std;\n#pragma region\ntypedef long long ll;\n#define sz(v) int((v).size())\n#define f first\n#define s second\n#define mp make_pair\n#define mt make_tuple\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#pragma endregion\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\n//출처: https://codeforces.com/blog/entry/68809\nvoid __print(int x) {cerr << x;}\nvoid __print(long x) {cerr << x;}\nvoid __print(long long x) {cerr << x;}\nvoid __print(unsigned x) {cerr << x;}\nvoid __print(unsigned long x) {cerr << x;}\nvoid __print(unsigned long long x) {cerr << x;}\nvoid __print(float x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(long double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '"' << x << '"';}\nvoid __print(const string &x) {cerr << '"' << x << '"';}\nvoid __print(bool x) {cerr << (x ? "true" : "false");}\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}\nvoid _print() {cerr << "]\\n";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}\n#ifndef ONLINE_JUDGE\n#define debug(x...) cerr << "[" << (#x) << "] = [", _print(x)\n#else\n#define debug(x...)\n#endif\nvoid solve()\n{\n    //how?\n    int n; cin>>n;\n    vector<array<int, 3>> edge;\n    int sm = 0;\n    forn(i, n*(n-1)/2)\n    {\n        int u, v, w; cin>>u>>v>>w;\n        --u, --v;\n        if (u > v) swap(u, v);\n        edge.push_back({w, u, v});\n        sm += w;\n    }\n    sort(edge.rbegin(), edge.rend());\n    int elen = n*(n-1)/2;\n    int ans = 0;\n    forn(i, elen)\n    {\n        bool f = false;\n        forn(a, 2) forn(b, 2) f |= (edge[i][1+a] == edge[(i+1)%elen][1+b]);\n        if (f) ans += abs(edge[i][0] - edge[(i+1)%elen][0]);\n    }\n    cout << ans + sm <<'\\n';\n}\nsigned main(void)\n{\n    ios_base::sync_with_stdio(0); cin.tie(0);\n    solve();\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1c383cd30b7c298ab50293adfecb7b18"}, {"error": 0, "memory": 3555328, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "38babdd47c4a1c497d531519ead50702"}, {"error": 0, "memory": 3731456, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "4", "output_md5": "79d1f53c3fde827d6781643b618a9b2f"}, {"error": 0, "memory": 4890624, "output": null, "result": -1, "signal": 0, "cpu_time": 35, "exit_code": 0, "real_time": 36, "test_case": "5", "output_md5": "08ca54a6e606450e9969bf711adb0be7"}, {"error": 0, "memory": 9646080, "output": null, "result": -1, "signal": 0, "cpu_time": 118, "exit_code": 0, "real_time": 123, "test_case": "6", "output_md5": "d44e9ab3364a6a6fb5478619d551340b"}, {"error": 0, "memory": 9674752, "output": null, "result": -1, "signal": 0, "cpu_time": 177, "exit_code": 0, "real_time": 182, "test_case": "7", "output_md5": "ba561f2e087a61f27810646fbd81c6e2"}, {"error": 0, "memory": 9609216, "output": null, "result": -1, "signal": 0, "cpu_time": 121, "exit_code": 0, "real_time": 122, "test_case": "8", "output_md5": "5824d29a2cc14f753d3f63fbc6b120ab"}, {"error": 0, "memory": 9560064, "output": null, "result": -1, "signal": 0, "cpu_time": 116, "exit_code": 0, "real_time": 121, "test_case": "9", "output_md5": "81a0e195ef8c08ac3b16c732b53509d5"}, {"error": 0, "memory": 9695232, "output": null, "result": -1, "signal": 0, "cpu_time": 114, "exit_code": 0, "real_time": 126, "test_case": "10", "output_md5": "6f11fbaeb06b80dceea918b40cbaf00e"}, {"error": 0, "memory": 9629696, "output": null, "result": -1, "signal": 0, "cpu_time": 133, "exit_code": 0, "real_time": 133, "test_case": "11", "output_md5": "e6174418997afc86eae49e10776e5db6"}, {"error": 0, "memory": 9539584, "output": null, "result": -1, "signal": 0, "cpu_time": 191, "exit_code": 0, "real_time": 195, "test_case": "12", "output_md5": "cfa4184b8321b5b80ea6a77f1bbb56e3"}, {"error": 0, "memory": 9568256, "output": null, "result": -1, "signal": 0, "cpu_time": 137, "exit_code": 0, "real_time": 146, "test_case": "13", "output_md5": "7e9d4606488fbb7cbe11bcc6d6610cbd"}, {"error": 0, "memory": 9580544, "output": null, "result": -1, "signal": 0, "cpu_time": 105, "exit_code": 0, "real_time": 122, "test_case": "14", "output_md5": "de8b3f715c765b592d05fc06cdf9ef93"}, {"error": 0, "memory": 9592832, "output": null, "result": -1, "signal": 0, "cpu_time": 120, "exit_code": 0, "real_time": 126, "test_case": "15", "output_md5": "fcc2f5e224c458b72adacb83ea0470e8"}, {"error": 0, "memory": 9646080, "output": null, "result": -1, "signal": 0, "cpu_time": 135, "exit_code": 0, "real_time": 144, "test_case": "16", "output_md5": "7e7fc5ff9830c02cf1e1746ae086884e"}, {"error": 0, "memory": 9564160, "output": null, "result": -1, "signal": 0, "cpu_time": 135, "exit_code": 0, "real_time": 140, "test_case": "17", "output_md5": "fb5f5efb0d02df33d833b92b41ef3c2c"}, {"error": 0, "memory": 9691136, "output": null, "result": 0, "signal": 0, "cpu_time": 118, "exit_code": 0, "real_time": 119, "test_case": "18", "output_md5": "25eaff2332195674190f2db8d2dfe4bd"}, {"error": 0, "memory": 9572352, "output": null, "result": -1, "signal": 0, "cpu_time": 156, "exit_code": 0, "real_time": 156, "test_case": "19", "output_md5": "05f48d32eecedbd62dfd947dbf2657fd"}]}	C++	f	{"time_cost": 191, "memory_cost": 9695232}	2020310781	210.219.176.200
8caf728d76bc611814384cf6fc41152c	2	12	2021-01-03 20:45:58.047633+00	14	//\n//  main.cpp\n//  steep_incline\n//\n//  Created by nano on 2021/01/04.\n//\n\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    enum {FLAT, UP, DOWN, UNKNOWN};\n    int current = FLAT;\n    int input[4] = {0};\n    \n    for(int i=0;i<4;i++) {\n        cin >> input[i];\n    }\n    \n    for(int i=0;i<3;i++) {\n        if(input[i] == input[i+1]) continue;\n        else if(input[i] < input[i+1]) {\n            if(current == DOWN) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = UP;\n            }\n        } else if(input[i] > input[i+1]) {\n            if(current == UP) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = DOWN;\n            }\n        }\n    }\n    \n    switch (current) {\n        case FLAT:\n            cout << "Flat Land" << endl;\n            break;\n            \n        case UP:\n            cout << "Uphill" << endl;\n            break;\n            \n        case DOWN:\n            cout << "Downhill" << endl;\n            break;\n            \n        case UNKNOWN:\n            cout << "Unknown" << endl;\n            break;\n            \n        default:\n            break;\n    }\n    \n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3502080, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	C++	f	{"time_cost": 0, "memory_cost": 3538944}	2015313016	125.130.9.253
87f3435f9a1b0bfcf8a11a0de36674b4	2	13	2021-01-03 21:44:03.600756+00	7	word = input()\nword = list(word)\n\ncheck = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\n\nfor i in word:\n    if i not in check:\n        print("NO")\n        exit(0)\n    \nprint("YES")	0	{"err": null, "data": [{"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8908800, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8859648, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8851456, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9039872}	2015318907	211.219.82.2
8a850865cab4190d42c571d0bb8d2146	2	12	2021-01-03 16:37:05.663081+00	52	h = [0,0,0,0]\nh[0] = int(input())\nh[1] = int(input())\nh[2] = int(input())\nh[3] = int(input())\n\nif h[0]<h[1]<h[2]<h[3]:\n    print("Uphill")\nelif h[0]>h[1]>h[2]>h[3]:\n    print("Downhill")\nelif h[0]==h[1]==h[2]==h[3]:\n    print("Flat Land")\nelse:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 8802304, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9031680}	2018310766	175.192.51.105
a6c4f056aa99c2ac9624a7c19e9b8c9b	2	14	2021-01-03 16:41:42.743469+00	23	n = int(input())\narr = [input() for _ in range(n)]\nl_max = 0\nt_max = 0\nn_max = 0\nfor chk in arr:\n    l_max = 0\n    n_max = 0\n    now = arr[0]\n    for _ in arr:\n        if chk == _:\n            continue\n        if now != _:\n            n_max = 1\n            now = _\n        else:\n            n_max += 1\n\n        l_max = max(l_max, n_max)\n    t_max = max(t_max, l_max)\nprint(t_max)	0	{"err": null, "data": [{"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8966144, "output": null, "result": 0, "signal": 0, "cpu_time": 312, "exit_code": 0, "real_time": 312, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9048064, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9109504, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 19, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 325, "exit_code": 0, "real_time": 333, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 271, "exit_code": 0, "real_time": 276, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 341, "exit_code": 0, "real_time": 346, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 280, "exit_code": 0, "real_time": 288, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 276, "exit_code": 0, "real_time": 284, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 281, "exit_code": 0, "real_time": 290, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 312, "exit_code": 0, "real_time": 317, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9048064, "output": null, "result": 0, "signal": 0, "cpu_time": 183, "exit_code": 0, "real_time": 184, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 215, "exit_code": 0, "real_time": 218, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 282, "exit_code": 0, "real_time": 287, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 312, "exit_code": 0, "real_time": 313, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 279, "exit_code": 0, "real_time": 287, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 288, "exit_code": 0, "real_time": 297, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 350, "exit_code": 0, "real_time": 355, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 277, "exit_code": 0, "real_time": 286, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 350, "memory_cost": 9109504}	2016312057	221.140.190.220
ac844a1650fccc056322b17b5f4a5f8d	2	13	2021-01-04 02:39:28.086196+00	32	#include<iostream> \n\nusing namespace std;\n\nint main()\n{\n\tstring s;\n\tcin >> s;\n\tstring a = "HINOSXZ";\n\tif(s.find_first_not_of(a, 0) == -1)\n\t\tcout << "YES";\n\telse\n\t\tcout << "NO";\n}	0	{"err": null, "data": [{"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3436544, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3252224, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3465216, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3612672}	2020312218	61.255.225.91
91078ce618f3296b8b2540c621ffb9d5	2	12	2021-01-03 16:47:41.054162+00	8	#include <bits/stdc++.h>\nusing namespace std;\n\nint h[4];\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    for (int i = 0; i < 4; i++) {\n        cin >> h[i];\n    }\n\n    if (h[0] < h[1] && h[1] < h[2] && h[2] < h[3]) {\n        cout << "Uphill\\n";\n    }\n    else if (h[0] > h[1] && h[1] > h[2] && h[2] > h[3]) {\n        cout << "Downhill\\n";\n    }\n    else if (h[0] == h[1] && h[1] == h[2] && h[2] == h[3]) {\n        cout << "Flat Land\\n";\n    }\n    else {\n        cout << "Unknown\\n";\n    }\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/18a68f91e8c84e5c9014eb0de2b8779a/main.c:1:10: fatal error: bits/stdc++.h: No such file or directory\\n #include <bits/stdc++.h>\\n          ^~~~~~~~~~~~~~~\\ncompilation terminated."}	2019311680	221.148.63.27
f8cdec14beb60eb1ec50854cbb481cf3	2	12	2021-01-03 16:47:49.82236+00	8	#include <bits/stdc++.h>\nusing namespace std;\n\nint h[4];\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    for (int i = 0; i < 4; i++) {\n        cin >> h[i];\n    }\n\n    if (h[0] < h[1] && h[1] < h[2] && h[2] < h[3]) {\n        cout << "Uphill\\n";\n    }\n    else if (h[0] > h[1] && h[1] > h[2] && h[2] > h[3]) {\n        cout << "Downhill\\n";\n    }\n    else if (h[0] == h[1] && h[1] == h[2] && h[2] == h[3]) {\n        cout << "Flat Land\\n";\n    }\n    else {\n        cout << "Unknown\\n";\n    }\n}	0	{"err": null, "data": [{"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3612672}	2019311680	221.148.63.27
526ffec5713cbcc94cee01558bef7749	2	15	2021-01-03 16:59:17.880953+00	17	#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, m;\nint a[10005];\nint parent[10005];\nbool check[10005];\n\nint find_parent(int num)\n{\n    if (num == parent[num])\n        return num;\n\n    return parent[num] = find_parent(parent[num]);\n}\n\nvoid union_rel(int num1, int num2)\n{\n    num1 = find_parent(num1);\n    num2 = find_parent(num2);\n\n    parent[num2] = num1;\n}\n\nint main(void)\n{\n    scanf("%d %d", &n, &m);\n\n    for (int i = 0; i < n; i++)\n        scanf("%d", &a[i]);\n\n    for (int i = 0; i < n; i++)\n    {\n        parent[i] = i;\n        check[i] = false;\n    }\n\n    /* making tree */\n    for (int i = 0; i < m; i++)\n    {\n        int f1, f2;\n\n        scanf("%d %d", &f1, &f2);\n\n        int f1_parent = find_parent(f1);\n        int f2_parent = find_parent(f2);\n\n        if (f1_parent != f2_parent)\n            union_rel(f1_parent, f2_parent);\n    }\n\n    int flag = 0;\n\n    if (m != 0)\n    {\n        for (int i = 0; i < n - 1; i++)\n        {\n            flag = 0;\n\n            if (!check[i])\n            {\n                flag += a[i];\n                check[i] = true;\n            }\n\n            else\n                continue;\n\n            for (int j = i + 1; j < n; j++)\n            {\n                if (check[j])\n                    continue;\n\n                int p1 = find_parent(i);\n                int p2 = find_parent(j);\n\n                if (p1 == p2)\n                {\n                    flag += a[j];\n                    check[j] = true;\n                }\n\n                printf("Now : %d, %d\\n", i, j);\n                printf("flag : %d\\n", flag);\n            }\n\n            if (flag < 0)\n                break;\n        }\n    }\n\n\n    else\n    {\n        for (int i = 0; i < n; i++)\n        {\n            if (a[i] != 0)\n            {\n                flag = -1;\n                break;\n            }\n        }\n    }\n\n    if (flag < 0)\n        printf("IMPOSSIBLE");\n\n    else\n        printf("POSSIBLE");\n\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3723264, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 9, "test_case": "1", "output_md5": "c6e13a1b3b922e2fb2aa83e257822035"}, {"error": 0, "memory": 3715072, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "9d54af0c84f79d6b4d37dec049a7f37b"}, {"error": 0, "memory": 3784704, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "82577a956865a153d260daf3707a4d19"}, {"error": 0, "memory": 3719168, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "aa371e276bf778ff775768257bdb89b9"}, {"error": 0, "memory": 3780608, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 9, "test_case": "5", "output_md5": "24e8f01c0b691c885d61f8bb27e91eaf"}, {"error": 0, "memory": 3694592, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 8, "test_case": "6", "output_md5": "e7f964d2530d7f7daefbbafd2d86f143"}, {"error": 0, "memory": 3792896, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 9, "test_case": "7", "output_md5": "c5fc5fe50f063b01bf1c06a499c19874"}, {"error": 0, "memory": 3792896, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 6, "test_case": "8", "output_md5": "b88cc3016047836a5e8799e89855627b"}, {"error": 0, "memory": 3715072, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "9", "output_md5": "e415d89ad8f89f53ec61e45cd051d3c5"}]}	C++	f	{"time_cost": 13, "memory_cost": 3792896}	2019311277	218.39.120.122
e3c42f803da1cac82953b7f9b63003f5	2	15	2021-01-03 16:48:07.037622+00	17	#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, m;\nint a[10005];\nint parent[10005];\nbool check[10005];\n\nint find_parent(int num)\n{\n    if (num == parent[num])\n        return num;\n\n    return parent[num] = find_parent(parent[num]);\n}\n\nvoid union_rel(int num1, int num2)\n{\n    num1 = find_parent(num1);\n    num2 = find_parent(num2);\n\n    parent[num2] = num1;\n}\n\nint main(void)\n{\n    scanf("%d %d", &n, &m);\n\n    for (int i = 0; i < n; i++)\n        scanf("%d", &a[i]);\n\n    for (int i = 0; i < n; i++)\n    {\n        parent[i] = i;\n        check[i] = false;\n    }\n    //map<int, int> rel;\n    //int index = 0;\n\n    /* making tree */\n    for (int i = 0; i < m; i++)\n    {\n        int f1, f2;\n\n        scanf("%d %d", &f1, &f2);\n\n        /*if (rel.count(f1) == 0)\n            rel[f1] = idx++;\n\n        if (rel.count(f2) == 0)\n            rel[f2] = idx++;*/\n\n        int f1_parent = find_parent(f1);\n        int f2_parent = find_parent(f2);\n\n        if (f1_parent != f2_parent)\n            union_rel(f1_parent, f2_parent);\n    }\n\n    int flag = 0;\n\n    for (int i = 0; i < n - 1; i++)\n    {\n\n        if (!check[i])\n        {\n            flag += a[i];\n            check[i] = true;\n        }\n\n        else\n            continue;\n\n        for (int j = i + 1; j < n; j++)\n        {\n            if (check[j])\n                continue;\n\n            int p1 = find_parent(i);\n            int p2 = find_parent(j);\n\n            if (p1 == p2)\n            {\n                flag += a[j];\n                check[j] = true;\n            }\n        }\n\n        if (flag < 0)\n            break;\n    }\n\n    if (flag < 0)\n        printf("IMPOSSIBLE");\n\n    else\n        printf("POSSIBLE");\n\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3768320, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3678208, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3665920, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3604480, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "7", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3678208, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3760128, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 9, "memory_cost": 3768320}	2019311277	218.39.120.122
c7db5da3c13ada3c4cf5ccca61ed6950	2	12	2021-01-04 02:53:58.870306+00	63	#include <iostream>\n\nusing namespace std;\n\nint main(){\n        double height[4] = {0, };\n        for(int i=0;i<4;i++){\n                cin >>height[i];\n        }\n        int result = 0;\n        if(height[0] < height[1] && height[1] < height[2] && height[2] < height[3])\n                result = 1;\n        if(height[0] > height[1] && height[1] > height[2] && height[2] > height[3])\n                result = 2;\n        if(height[0] == height[1] && height[1] == height[2] && height[2] == height[3])\n                result = 3;\n\n        if(result == 0)\n                cout <<"Unknown" <<endl;\n        else if(result == 1)\n                cout <<"Uphill" <<endl;\n        else if(result == 2)\n                cout <<"Downhill" <<endl;\n        else if(result == 3)\n                cout <<"Flat Land" <<endl;\n        return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3604480}	2014311686	220.118.98.98
d226d46ee743e00a8220bbcdfc583211	2	15	2021-01-03 16:52:44.6427+00	17	#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, m;\nint a[10005];\nint parent[10005];\nbool check[10005];\n\nint find_parent(int num)\n{\n    if (num == parent[num])\n        return num;\n\n    return parent[num] = find_parent(parent[num]);\n}\n\nvoid union_rel(int num1, int num2)\n{\n    num1 = find_parent(num1);\n    num2 = find_parent(num2);\n\n    parent[num2] = num1;\n}\n\nint main(void)\n{\n    scanf("%d %d", &n, &m);\n\n    for (int i = 0; i < n; i++)\n        scanf("%d", &a[i]);\n\n    for (int i = 0; i < n; i++)\n    {\n        parent[i] = i;\n        check[i] = false;\n    }\n    //map<int, int> rel;\n    //int index = 0;\n\n    /* making tree */\n    for (int i = 0; i < m; i++)\n    {\n        int f1, f2;\n\n        scanf("%d %d", &f1, &f2);\n\n        /*if (rel.count(f1) == 0)\n            rel[f1] = idx++;\n\n        if (rel.count(f2) == 0)\n            rel[f2] = idx++;*/\n\n        int f1_parent = find_parent(f1);\n        int f2_parent = find_parent(f2);\n\n        if (f1_parent != f2_parent)\n            union_rel(f1_parent, f2_parent);\n    }\n\n    int flag = 0;\n\n    if (m != 0)\n    {\n        for (int i = 0; i < n - 1; i++)\n        {\n\n            if (!check[i])\n            {\n                flag += a[i];\n                check[i] = true;\n            }\n\n            else\n                continue;\n\n            for (int j = i + 1; j < n; j++)\n            {\n                if (check[j])\n                    continue;\n\n                int p1 = find_parent(i);\n                int p2 = find_parent(j);\n\n                if (p1 == p2)\n                {\n                    flag += a[j];\n                    check[j] = true;\n                }\n            }\n\n            if (flag < 0)\n                break;\n        }\n    }\n\n\n    else\n    {\n        for (int i = 0; i < n; i++)\n        {\n            if (a[i] != 0)\n            {\n                flag = -1;\n                break;\n            }\n        }\n    }\n\n    if (flag < 0)\n        printf("IMPOSSIBLE");\n\n    else\n        printf("POSSIBLE");\n\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3809280, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3710976, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3665920, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3690496, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 9, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3710976, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "7", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 9, "memory_cost": 3809280}	2019311277	218.39.120.122
4826c0a5828468a3b7e47b24333ea64d	2	15	2021-01-03 16:56:27.205708+00	23	n, m = map(int, input().split())\n\nmoney = [int(input()) for _ in range(n)]\ncheck = [True] * n\nfriend = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    friend[a].append(b)\n    friend[b].append(a)\n\ndef dfs(x):\n    if check[x] == False:\n        return\n    check[x] = False\n    global total\n    total += money[x]\n    for _ in friend[x]:\n        dfs(_)\nFlag = True\nfor _ in range(n):\n    if check[_] == False:\n        continue\n    total = 0\n    dfs(_)\n    if total != 0:\n        Flag = False\n        break\nif Flag:\n    print("POSSIBLE")\nelse:\n    print("IMPOSSIBLE")	4	{"err": null, "data": [{"error": 0, "memory": 12378112, "output": null, "result": 4, "signal": 0, "cpu_time": 49, "exit_code": 1, "real_time": 54, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 12439552, "output": null, "result": 4, "signal": 0, "cpu_time": 40, "exit_code": 1, "real_time": 62, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 11223040, "output": null, "result": 4, "signal": 0, "cpu_time": 22, "exit_code": 1, "real_time": 34, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 13164544, "output": null, "result": 0, "signal": 0, "cpu_time": 77, "exit_code": 0, "real_time": 91, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10977280, "output": null, "result": 0, "signal": 0, "cpu_time": 39, "exit_code": 0, "real_time": 60, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10506240, "output": null, "result": 0, "signal": 0, "cpu_time": 44, "exit_code": 0, "real_time": 57, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11952128, "output": null, "result": 4, "signal": 0, "cpu_time": 41, "exit_code": 1, "real_time": 46, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9981952, "output": null, "result": 0, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 31, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 12320768, "output": null, "result": 4, "signal": 0, "cpu_time": 48, "exit_code": 1, "real_time": 52, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 77, "memory_cost": 13164544}	2016312057	221.140.190.220
e43b3f36e96726d15c01507a8fe9a377	2	13	2021-01-03 16:56:31.643987+00	8	#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    string str;\n    cin >> str;\n    bool isPossible = true;\n    for (auto c : str) {\n        switch (c) {\n        case 'H':\n        case 'I':\n        case 'N':\n        case 'O':\n        case 'S':\n        case 'X':\n        case 'Z':\n            break;\n        default:\n            isPossible = false;\n            break;\n        }\n        if (!isPossible) break;\n    }\n    \n    if (isPossible) {\n        cout << "YES\\n";\n    }\n    else {\n        cout << "NO\\n";\n    }\n}	0	{"err": null, "data": [{"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3416064, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3649536}	2019311680	221.148.63.27
33ac2437b08ce6968ce39bf4bab637e8	2	15	2021-01-03 16:57:25.562718+00	23	import sys\nsys.setrecursionlimit(50000000) \nn, m = map(int, input().split())\n\nmoney = [int(input()) for _ in range(n)]\ncheck = [True] * n\nfriend = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    friend[a].append(b)\n    friend[b].append(a)\n\ndef dfs(x):\n    if check[x] == False:\n        return\n    check[x] = False\n    global total\n    total += money[x]\n    for _ in friend[x]:\n        dfs(_)\nFlag = True\nfor _ in range(n):\n    if check[_] == False:\n        continue\n    total = 0\n    dfs(_)\n    if total != 0:\n        Flag = False\n        break\nif Flag:\n    print("POSSIBLE")\nelse:\n    print("IMPOSSIBLE")	0	{"err": null, "data": [{"error": 0, "memory": 13127680, "output": null, "result": 0, "signal": 0, "cpu_time": 53, "exit_code": 0, "real_time": 57, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 12595200, "output": null, "result": 0, "signal": 0, "cpu_time": 71, "exit_code": 0, "real_time": 88, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 12025856, "output": null, "result": 0, "signal": 0, "cpu_time": 39, "exit_code": 0, "real_time": 44, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 13135872, "output": null, "result": 0, "signal": 0, "cpu_time": 84, "exit_code": 0, "real_time": 92, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11038720, "output": null, "result": 0, "signal": 0, "cpu_time": 32, "exit_code": 0, "real_time": 37, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10670080, "output": null, "result": 0, "signal": 0, "cpu_time": 48, "exit_code": 0, "real_time": 53, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 14086144, "output": null, "result": 0, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 51, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 10006528, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 26, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 12730368, "output": null, "result": 0, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 56, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	Python3	f	{"time_cost": 84, "memory_cost": 14086144}	2016312057	221.140.190.220
bf96961c25048725cdee8f79bb429593	2	15	2021-01-03 17:01:16.833721+00	17	#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, m;\nint a[10005];\nint parent[10005];\nbool check[10005];\n\nint find_parent(int num)\n{\n    if (num == parent[num])\n        return num;\n\n    return parent[num] = find_parent(parent[num]);\n}\n\nvoid union_rel(int num1, int num2)\n{\n    num1 = find_parent(num1);\n    num2 = find_parent(num2);\n\n    parent[num2] = num1;\n}\n\nint main(void)\n{\n    scanf("%d %d", &n, &m);\n\n    for (int i = 0; i < n; i++)\n        scanf("%d", &a[i]);\n\n    for (int i = 0; i < n; i++)\n    {\n        parent[i] = i;\n        check[i] = false;\n    }\n\n    /* making tree */\n    for (int i = 0; i < m; i++)\n    {\n        int f1, f2;\n\n        scanf("%d %d", &f1, &f2);\n\n        int f1_parent = find_parent(f1);\n        int f2_parent = find_parent(f2);\n\n        if (f1_parent != f2_parent)\n            union_rel(f1_parent, f2_parent);\n    }\n\n    int flag = 0;\n\n    if (m != 0)\n    {\n        for (int i = 0; i < n - 1; i++)\n        {\n            flag = 0;\n\n            if (!check[i])\n            {\n                flag += a[i];\n                check[i] = true;\n            }\n\n            else\n                continue;\n\n            for (int j = i + 1; j < n; j++)\n            {\n                if (check[j])\n                    continue;\n\n                int p1 = find_parent(i);\n                int p2 = find_parent(j);\n\n                if (p1 == p2)\n                {\n                    flag += a[j];\n                    check[j] = true;\n                }\n\n                printf("Now : %d, %d\\n", i, j);\n                printf("flag : %d\\n", flag);\n            }\n\n            if (flag < 0)\n                break;\n        }\n    }\n\n\n    else\n    {\n        for (int i = 0; i < n; i++)\n        {\n            if (a[i] < 0)\n            {\n                flag = -1;\n                break;\n            }\n        }\n    }\n\n    if (flag < 0)\n        printf("IMPOSSIBLE");\n\n    else\n        printf("POSSIBLE");\n\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3686400, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "1", "output_md5": "c6e13a1b3b922e2fb2aa83e257822035"}, {"error": 0, "memory": 3698688, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 11, "test_case": "2", "output_md5": "9d54af0c84f79d6b4d37dec049a7f37b"}, {"error": 0, "memory": 3756032, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "3", "output_md5": "82577a956865a153d260daf3707a4d19"}, {"error": 0, "memory": 3768320, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "aa371e276bf778ff775768257bdb89b9"}, {"error": 0, "memory": 3727360, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 8, "test_case": "5", "output_md5": "24e8f01c0b691c885d61f8bb27e91eaf"}, {"error": 0, "memory": 3731456, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 8, "test_case": "6", "output_md5": "e7f964d2530d7f7daefbbafd2d86f143"}, {"error": 0, "memory": 3792896, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "7", "output_md5": "c5fc5fe50f063b01bf1c06a499c19874"}, {"error": 0, "memory": 3641344, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 6, "test_case": "8", "output_md5": "b88cc3016047836a5e8799e89855627b"}, {"error": 0, "memory": 3739648, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "9", "output_md5": "e415d89ad8f89f53ec61e45cd051d3c5"}]}	C++	f	{"time_cost": 12, "memory_cost": 3792896}	2019311277	218.39.120.122
5fab0f0612639dc8a9ca0049549ddba5	2	12	2021-01-03 18:49:22.978427+00	56	#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int arr[4], n = 0;\n  for (int i = 0; i < 4; i++) {\n\t\tcin >> arr[i];\n\t}\n\tcout << endl;\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] >= arr[i + 1]) break;\n\t\tif (i == 2) {\n\t\t\tcout << "Uphill";\n\t\t\tn = 1;\n\t\t}\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] <= arr[i + 1]) break;\n\t\tif (i == 2) {\n\t\t\tcout << "Downhill";\n\t\t\tn = 1;\n\t\t}\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] < arr[i + 1] || arr[i] > arr[i + 1]) break;\n\t\tif (i == 2) {\n\t\t\tcout << "Flat Land";\n\t\t\tn = 1;\n\t\t}\n\t}\n\tif (n == 0) cout << "Unknown";\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3543040, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "8cadfcfd02daa1eeaf79a38309d3a3e8"}, {"error": 0, "memory": 3416064, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "91c36ea28a40c78f648efd201cb13dc1"}, {"error": 0, "memory": 3489792, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "19cc5da1cc60d766a9e6097bf205cba0"}, {"error": 0, "memory": 3514368, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "cee952d4cc367943b0622a2488fbe177"}, {"error": 0, "memory": 3416064, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "19cc5da1cc60d766a9e6097bf205cba0"}]}	C++	f	{"time_cost": 2, "memory_cost": 3543040}	2020310646	175.192.196.92
8cfd660fb81eb5de9c5c11a1be874528	2	15	2021-01-03 19:39:28.82654+00	52	N, M = map(int, input().split())\ndebt = []\nd = 0\nfriends = []\nnew_freinds = []\n\nfor i in range(N):\n    debt.append(int(input()))\n    goal.append(0)\n\nfor i in range(M):\n    x, y = map(int, input().split())\n    friends.append([x,y])\n\nfor i in range(M-1):\n    for x in friends[i]:\n        for k in range(1, M-1-i):\n            if x in friends[i+k]:\n                new_set = list(set().union(friends[i],friends[i+k]))\n                friends[i] = new_set\n                friends.remove(friends[i+k])\n\nfor i in range(len(friends)):\n    for j in friends[i]:\n        d += debt[j]\n\nif d==0:\n    print("POSSIBLE")\nelse:\n    print("IMPOSSIBLE")	4	{"err": null, "data": [{"error": 0, "memory": 8990720, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 16, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 8933376, "output": null, "result": 4, "signal": 0, "cpu_time": 19, "exit_code": 1, "real_time": 19, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9027584, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 18, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9039872, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 17, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8933376, "output": null, "result": 4, "signal": 0, "cpu_time": 18, "exit_code": 1, "real_time": 19, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 8916992, "output": null, "result": 4, "signal": 0, "cpu_time": 19, "exit_code": 1, "real_time": 19, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 9109504, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 17, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 8925184, "output": null, "result": 4, "signal": 0, "cpu_time": 18, "exit_code": 1, "real_time": 19, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 9097216, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 19, "memory_cost": 9109504}	2018310766	175.192.51.105
9d724ed1ca0bd35dfd4c76b77d856a9a	2	16	2021-01-03 17:22:32.603557+00	23	def find(a,b):\n    return (a - b) * (a - b)\n\nn, m = map(int, input().split())\nt = [int(input()) for _ in range(n)]\narr = []\nlocal_arr = []\nans = 100*100*10\ndef find_dfs(x, m):\n    global arr\n    global local_arr\n    global n\n    if (n == x):\n        if(m == 0):\n            arr.append(list(local_arr))\n            return\n        else:\n            return\n    for i in range(1, 100):\n        if i * i > m:\n            break\n        local_arr.append(i)\n        find_dfs(x + 1, m - i * i)\n        del local_arr[-1]\n        \nfind_dfs(0, m)\nif len(arr) == 0:\n    print(-1)\nelse:\n    for temp in arr:\n        l_min = 0\n        for i in range(len(temp)):\n            l_min += find(temp[i], t[i])\n        ans = min(ans, l_min)\n    print(ans)	1	{"err": null, "data": [{"error": 0, "memory": 9121792, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 146, "exit_code": 0, "real_time": 154, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 9146368, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1997, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9068544, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1997, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 160, "exit_code": 0, "real_time": 161, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9076736, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 25, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 28, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 8716288, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9129984, "output": null, "result": 0, "signal": 0, "cpu_time": 44, "exit_code": 0, "real_time": 45, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 97, "exit_code": 0, "real_time": 101, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 9367552, "output": null, "result": 1, "signal": 9, "cpu_time": 1991, "exit_code": 0, "real_time": 2000, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 9146368, "output": null, "result": 1, "signal": 9, "cpu_time": 1995, "exit_code": 0, "real_time": 2000, "test_case": "12", "output_md5": null}]}	Python3	f	{"time_cost": 1995, "memory_cost": 9367552}	2016312057	221.140.190.220
a8cb4f341fb54599459d5ddf48440b88	2	15	2021-01-03 20:46:51.045505+00	52	N, M = map(int, input().split())\ndebt = []\ngoal=[]\nfriends = []\n\nfor i in range(N):\n    debt.append(int(input()))\n\nfor i in range(M):\n    x, y = map(int, input().split())\n    friends.append([x,y])\n\nfor i in range(M-1):\n    for x in friends[i]:\n        for k in range(1, M-1-i):\n            if x in friends[i+k]:\n                new_set = list(set().union(friends[i],friends[i+k]))\n                friends[i] = new_set\n                friends.remove(friends[i+k])\n\ndebt_group = []\nfor i in range(len(friends)):\n    d=0\n    for j in range(len(friends[i])):\n        d += debt[friends[i][j]]\n    debt_group.append(d)\n    goal.append(0)\n\nif debt_group==goal:\n    print("POSSIBLE")\nelse:\n    print("IMPOSSIBLE")	4	{"err": null, "data": [{"error": 0, "memory": 12259328, "output": null, "result": 4, "signal": 0, "cpu_time": 50, "exit_code": 1, "real_time": 54, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 13406208, "output": null, "result": 4, "signal": 0, "cpu_time": 56, "exit_code": 1, "real_time": 61, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 10530816, "output": null, "result": 4, "signal": 0, "cpu_time": 24, "exit_code": 1, "real_time": 37, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 15126528, "output": null, "result": 4, "signal": 0, "cpu_time": 73, "exit_code": 1, "real_time": 86, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 10461184, "output": null, "result": 4, "signal": 0, "cpu_time": 32, "exit_code": 1, "real_time": 37, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 10309632, "output": null, "result": 4, "signal": 0, "cpu_time": 22, "exit_code": 1, "real_time": 31, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 11972608, "output": null, "result": 4, "signal": 0, "cpu_time": 42, "exit_code": 1, "real_time": 51, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9875456, "output": null, "result": 4, "signal": 0, "cpu_time": 26, "exit_code": 1, "real_time": 31, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 11661312, "output": null, "result": 4, "signal": 0, "cpu_time": 44, "exit_code": 1, "real_time": 48, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 73, "memory_cost": 15126528}	2018310766	175.192.51.105
740cdb940dc326905b4e9d80f1f1603b	2	12	2021-01-04 02:43:51.442606+00	66	#include <stdio.h>\nint main() {\n\tint arr[4],mode;\n\tint count = 0;\n\tfor(int i = 0; i < 4; i++) {\n\t\tscanf("%d", &arr[i]);\n\t}\n\n\tif ((arr[0] == arr[1]) && (arr[2] == arr[3])) {\n\t\tif (arr[1] == arr[3]) {\n\t\t\tprintf("Flat Land");\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse if (arr[0] > arr[1]) {\n\t\tmode = 1;\n\t\tfor (int i = 1; i < 3; i++) {\n\t\t\tif (arr[i] > arr[i + 1]) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 1; i < 3; i++) {\n\t\t\tif (arr[i] < arr[i + 1]) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\n\t\t}\n\t}\n\tif (count != 2) {\n\t\tprintf("Unknown");\n\t}\n\telse {\n\t\tif (mode == 1) {\n\t\t\tprintf("Downhill");\n\t\t}\n\t\telse {\n\t\t\tprintf("Uphill");\n\t\t}\n\t}\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1646592, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1642496, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1646592}	2019314907	59.11.8.100
1e85e1e9a8f7b30550d1952ff8cdca8f	2	14	2021-01-03 17:23:16.846548+00	8	#include <bits/stdc++.h>\nusing namespace std;\n\nint N;\nint a[1'000];\nset<int> checkNumber;\nbool numExists(int n) {\n    return (checkNumber.find(n) != checkNumber.cend());\n}\nvector<int> np;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    cin >> N;\n    for (int i = 0; i < N; i++) {\n        cin >> a[i];\n        if (!numExists(a[i])) {\n            checkNumber.insert(a[i]);\n            np.push_back(a[i]);\n        }\n    }\n    \n    int res = 0;\n    for (auto ban : np) {\n        int llen = 0, cnum = a[0], clen = 0;\n        for (int i = 0; i < N; i++) {\n            if (a[i] != ban) {\n                if (a[i] == cnum) {\n                    clen++;\n                    if (clen > llen) {\n                        llen = clen;\n                    }\n                }\n                else {\n                    cnum = a[i];\n                    clen = 1;\n                }\n            }\n        }\n        if (res < llen) {\n            res = llen;\n        }\n    }\n    cout << res << '\\n';\n}	0	{"err": null, "data": [{"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3465216, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3452928, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3670016, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 4, "memory_cost": 3670016}	2019311680	221.148.63.27
a48c04b16c8d9d1630b5bad9df45592c	2	16	2021-01-03 22:18:44.634214+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n  \n\treturn 9000;\n}	4	{"err": null, "data": [{"error": 0, "memory": 3522560, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 40, "real_time": 1, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 3579904, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 3, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 3448832, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 3, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3575808, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 2, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3522560, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 2, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3485696, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 40, "real_time": 2, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3514368, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 40, "real_time": 2, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3629056, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 3, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3604480, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 40, "real_time": 2, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 3305472, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 3, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 3354624, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 3, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3457024, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 3, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 2, "memory_cost": 3629056}	2011314262	211.218.8.61
f3d9ee7d9f2837dae8a2f965ac6cf891	2	15	2021-01-03 17:23:53.046171+00	17	#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, m;\nint a[10005];\nint parent[10005];\nbool check[10005];\n\nint find_parent(int num)\n{\n    if (num == parent[num])\n        return num;\n\n    return parent[num] = find_parent(parent[num]);\n}\n\nvoid union_rel(int num1, int num2)\n{\n    num1 = find_parent(num1);\n    num2 = find_parent(num2);\n\n    parent[num2] = num1;\n}\n\nint main(void)\n{\n    scanf("%d %d", &n, &m);\n\n    for (int i = 0; i < n; i++)\n        scanf("%d", &a[i]);\n\n    for (int i = 0; i < n; i++)\n    {\n        parent[i] = i;\n        check[i] = false;\n    }\n\n    /* making tree */\n    for (int i = 0; i < m; i++)\n    {\n        int f1, f2;\n\n        scanf("%d %d", &f1, &f2);\n\n        int f1_parent = find_parent(f1);\n        int f2_parent = find_parent(f2);\n\n        if (f1_parent != f2_parent)\n            union_rel(f1_parent, f2_parent);\n    }\n\n    int flag = 0;\n\n    if (m != 0)\n    {\n        for (int i = 0; i < n - 1; i++)\n        {\n            flag = 0;\n\n            if (!check[i])\n            {\n                flag += a[i];\n                check[i] = true;\n            }\n\n            else\n                continue;\n\n            for (int j = i + 1; j < n; j++)\n            {\n                if (check[j])\n                    continue;\n\n                int p1 = find_parent(i);\n                int p2 = find_parent(j);\n\n                if (p1 == p2)\n                {\n                    flag += a[j];\n                    check[j] = true;\n                }\n            }\n\n            if (flag < 0)\n                break;\n        }\n    }\n\n\n    else\n    {\n        for (int i = 0; i < n; i++)\n        {\n            if (a[i] < 0)\n            {\n                flag = -1;\n                break;\n            }\n        }\n    }\n\n    if (flag < 0)\n        printf("IMPOSSIBLE");\n\n    else\n        printf("POSSIBLE");\n\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3686400, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3686400, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3653632, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3792896, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3670016, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 6, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3756032, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 10, "memory_cost": 3792896}	2019311277	218.39.120.122
5c55643af865df9ccd313c4b7f0b27c9	2	12	2021-01-03 18:49:43.679749+00	56	#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int arr[4], n = 0;\n  for (int i = 0; i < 4; i++) {\n\t\tcin >> arr[i];\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] >= arr[i + 1]) break;\n\t\tif (i == 2) {\n\t\t\tcout << "Uphill";\n\t\t\tn = 1;\n\t\t}\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] <= arr[i + 1]) break;\n\t\tif (i == 2) {\n\t\t\tcout << "Downhill";\n\t\t\tn = 1;\n\t\t}\n\t}\n\tfor (int i = 0; i < 3; i++) {\n\t\tif (arr[i] < arr[i + 1] || arr[i] > arr[i + 1]) break;\n\t\tif (i == 2) {\n\t\t\tcout << "Flat Land";\n\t\t\tn = 1;\n\t\t}\n\t}\n\tif (n == 0) cout << "Unknown";\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3522560}	2020310646	175.192.196.92
ebea8dd2bf0b3eba63c491c06d6562af	2	16	2021-01-03 17:24:23.163464+00	23	def find(a,b):\n    return (a - b) * (a - b)\n\nn, m = map(int, input().split())\nt = [int(input()) for _ in range(n)]\narr = []\nlocal_arr = []\nans = 100*100*10\ndef find_dfs(x, m):\n    global arr\n    global local_arr\n    global n\n    if (n == x):\n        if(m == 0):\n            arr.append(list(local_arr))\n            return\n        else:\n            return\n    for i in range(1, 100):\n        if i * i > m:\n            break\n        local_arr.append(i)\n        find_dfs(x + 1, m - i * i)\n        local_arr.pop()\n        \nfind_dfs(0, m)\nif len(arr) == 0:\n    print(-1)\nelse:\n    for temp in arr:\n        l_min = 0\n        for i in range(len(temp)):\n            l_min += find(temp[i], t[i])\n        ans = min(ans, l_min)\n    print(ans)	1	{"err": null, "data": [{"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9072640, "output": null, "result": 0, "signal": 0, "cpu_time": 161, "exit_code": 0, "real_time": 166, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 9129984, "output": null, "result": 1, "signal": 9, "cpu_time": 2000, "exit_code": 0, "real_time": 2005, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9089024, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1998, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 172, "exit_code": 0, "real_time": 177, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 27, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 27, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 11, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 59, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 8974336, "output": null, "result": 0, "signal": 0, "cpu_time": 108, "exit_code": 0, "real_time": 112, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 9400320, "output": null, "result": 1, "signal": 9, "cpu_time": 1991, "exit_code": 0, "real_time": 2000, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 9121792, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2000, "test_case": "12", "output_md5": null}]}	Python3	f	{"time_cost": 2000, "memory_cost": 9400320}	2016312057	221.140.190.220
202cc0c230ea67b4f94bb85d4ff0a71c	2	13	2021-01-04 05:55:58.255001+00	74	string = input()\nlen = len(string)\ncand = "HINOSXZ"\ncnt = 0\nfor i in range(len):\n  if string[i] not in cand:\n    print("NO")\n    break\n  cnt += 1\n  if cnt == len : print("YES")	0	{"err": null, "data": [{"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 20, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8851456, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 19, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 20, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 20, "memory_cost": 8986624}	2015310543	115.145.154.253
3a05085b155b5a1099ad4d1b1b140ac1	2	16	2021-01-03 17:27:46.52745+00	23	import sys\ndef find(a,b):\n    return (a - b) * (a - b)\n\nn, m = map(int, sys.stdin.readline().split())\nt = [int(sys.stdin.readline()) for _ in range(n)]\narr = []\nlocal_arr = []\nans = 100*100*10\ndef find_dfs(x, m):\n    global arr\n    global local_arr\n    global n\n    if (n == x):\n        if(m == 0):\n            arr.append(list(local_arr))\n            return\n        else:\n            return\n    for i in range(1, 100):\n        if i * i > m:\n            break\n        local_arr.append(i)\n        find_dfs(x + 1, m - i * i)\n        local_arr.pop()\n        \nfind_dfs(0, m)\nif len(arr) == 0:\n    print(-1)\nelse:\n    for temp in arr:\n        l_min = 0\n        for i in range(len(temp)):\n            l_min += find(temp[i], t[i])\n        ans = min(ans, l_min)\n    print(ans)	1	{"err": null, "data": [{"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 21, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9113600, "output": null, "result": 0, "signal": 0, "cpu_time": 164, "exit_code": 0, "real_time": 164, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 9084928, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2000, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9121792, "output": null, "result": 1, "signal": 9, "cpu_time": 1987, "exit_code": 0, "real_time": 1997, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 164, "exit_code": 0, "real_time": 169, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 32, "exit_code": 0, "real_time": 37, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 20, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 49, "exit_code": 0, "real_time": 58, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 106, "exit_code": 0, "real_time": 111, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 9449472, "output": null, "result": 1, "signal": 9, "cpu_time": 1990, "exit_code": 0, "real_time": 1999, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 9072640, "output": null, "result": 1, "signal": 9, "cpu_time": 1994, "exit_code": 0, "real_time": 1999, "test_case": "12", "output_md5": null}]}	Python3	f	{"time_cost": 1999, "memory_cost": 9449472}	2016312057	221.140.190.220
af690d97ca563d55fb601cc4c445e5ce	2	15	2021-01-03 19:45:24.64813+00	52	N, M = map(int, input().split())\ndebt = []\nd = 0\nfriends = []\nnew_freinds = []\n\nfor i in range(N):\n    debt.append(int(input()))\n    goal.append(0)\n\nfor i in range(M):\n    x, y = map(int, input().split())\n    friends.append([x,y])\n\nfor i in range(M-1):\n    for x in friends[i]:\n        for k in range(1, M-1-i):\n            if x in friends[i+k]:\n                new_set = list(set().union(friends[i],friends[i+k]))\n                friends[i] = new_set\n                friends.remove(friends[i+k])\n\nfor i in range(len(friends)):\n    for j in friends[i]:\n        d += debt[j]\n\nif d==0:\n    print("POSSIBLE")\nelse:\n    print("IMPOSSIBLE")	4	{"err": null, "data": [{"error": 0, "memory": 9015296, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 16, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 9011200, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 18, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8978432, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 18, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9023488, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 19, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8986624, "output": null, "result": 4, "signal": 0, "cpu_time": 19, "exit_code": 1, "real_time": 20, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 9019392, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 16, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 8896512, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 20, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9019392, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 11, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 9023488, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 15, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 19, "memory_cost": 9023488}	2018310766	175.192.51.105
cd9eea5d84fb9026b59eded6ad7351f4	2	12	2021-01-04 10:19:17.541329+00	89	temp_1 = int(input())\ntemp_2 = int(input())\ntemp_3 = int(input())\ntemp_4 = int(input())\n\na = temp_1 - temp_2\nb = temp_2 - temp_3\nc = temp_3 - temp_4\n\nif (a<0) and (b<0) and (c<0):\n  print("Uphill")\nelif (a>0) and (b>0) and (c>0):\n  print("Downhill")\nelif (a=0) and (b=0) and (c=0):\n  print("Flat Land")\nelse:\n  print("Unknown")	-2	{}	Python3	f	{"score": 0, "err_info": "File \\"/judger/run/ce0fc8669141438b8f3978655d6d8ab6/solution.py\\", line 14\\n    elif (a=0) and (b=0) and (c=0):\\n           ^\\nSyntaxError: invalid syntax"}	2020314257	14.39.21.208
c51858aea519c4fc954f86d77a2b09b3	2	15	2021-01-03 17:38:55.893586+00	8	#include <bits/stdc++.h>\nusing namespace std;\n\nint N, M, x, y;\nint a[10'000];\n\nstruct DisjointSet {\n    vector<int> par;\n    DisjointSet(int a) {\n        par.resize(a + 1, -1);\n    }\n\n    int f(int v) {\n        if (par[v] == -1) return v;\n        return par[v] = f(par[v]);\n    }\n\n    void u(int x, int y) {\n        x = f(x), y = f(y);\n        if (x == y) return;\n        par[x] = y;\n    }\n};\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    cin >> N >> M;\n\n    DisjointSet ds(N);\n\n    for (int i = 0; i < N; i++) {\n        cin >> a[i];\n    }\n    for (int i =0; i < M; i++) {\n        cin >> x >> y;\n        ds.u(x, y);\n    }\n\n    for (int i = 0; i < N; i++) {\n        if (i != ds.f(i)) {\n            a[ds.f(i)] += a[i];\n            a[i] = 0;\n        }\n    }\n\n    for (int i = 0; i < N; i++) {\n        if (a[i] != 0) {\n            cout << "IMPOSSIBLE\\n";\n            return 0;\n        }\n    }\n    cout << "POSSIBLE\\n";\n}	0	{"err": null, "data": [{"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3674112, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 6, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3420160, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 8, "memory_cost": 3674112}	2019311680	221.148.63.27
7b4f413c49f46a098a00bcecd2fb6cd9	2	16	2021-01-03 17:45:06.569687+00	23	from itertools import permutations\ndef find(a,b):\n    return (a - b) * (a - b)\n\nn, m = map(int, input().split())\nt = [int(input()) for _ in range(n)]\narr = []\nlocal_arr = []\nans = 100*100*10\ndef find_dfs(x, m, k):\n    global arr\n    global local_arr\n    global n\n    if (n == x):\n        if(m == 0):\n            arr.append(list(local_arr))\n            return\n        else:\n            return\n    for i in range(k, 100):\n        if i * i > m:\n            break\n        local_arr.append(i)\n        find_dfs(x + 1, m - i * i, i)\n        local_arr.pop()\n        \nfind_dfs(0, m, 1)\nif len(arr) == 0:\n    print(-1)\nelse:\n    for tempx in arr:\n        permute = permutations(tempx)\n        for temp in permute:\n            l_min = 0\n            for i in range(len(temp)):\n                l_min += find(temp[i], t[i])\n            ans = min(ans, l_min)\n    print(ans)	1	{"err": null, "data": [{"error": 0, "memory": 9076736, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9187328, "output": null, "result": 0, "signal": 0, "cpu_time": 51, "exit_code": 0, "real_time": 55, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 9191424, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1998, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9125888, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 39, "exit_code": 0, "real_time": 44, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9211904, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 23, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 8970240, "output": null, "result": 1, "signal": 9, "cpu_time": 1993, "exit_code": 0, "real_time": 1998, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9113600, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9089024, "output": null, "result": 0, "signal": 0, "cpu_time": 732, "exit_code": 0, "real_time": 737, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 9150464, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 33, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 9592832, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1997, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 9154560, "output": null, "result": 1, "signal": 9, "cpu_time": 1995, "exit_code": 0, "real_time": 2001, "test_case": "12", "output_md5": null}]}	Python3	f	{"time_cost": 1998, "memory_cost": 9592832}	2016312057	221.140.190.220
98a992da8f727bc41faceba8707fd9a2	2	15	2021-01-03 17:55:49.999625+00	52	N, M = map(int, input().split())\ndebt = []\nfriends = []\nfor i in range(N):\n    debt.append(int(input()))\n\nfor i in range(M):\n    x, y = map(int, input().split())\n    friends.append([x,y])\n\nfor i in range(M):\n    if debt[friends[i][0]]+debt[friends[i][1]]>0:\n        debt[friends[i][0]] += debt[friends[i][1]]\n        debt[friends[i][1]] =0\n    elif debt[friends[i][0]]+debt[friends[i][1]]==0:\n        debt[friends[i][0]] =0\n        debt[friends[i][1]] =0\n    else:\n        debt[friends[i][1]] += debt[friends[i][0]]\n        debt[friends[i][0]] =0\nsum(debt)\nif sum(debt)==0:\n    print("POSSIBLE")\nelse:\n    print("IMPOSSIBLE")	-1	{"err": null, "data": [{"error": 0, "memory": 12242944, "output": null, "result": 0, "signal": 0, "cpu_time": 54, "exit_code": 0, "real_time": 63, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 13316096, "output": null, "result": 0, "signal": 0, "cpu_time": 64, "exit_code": 0, "real_time": 73, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10579968, "output": null, "result": 0, "signal": 0, "cpu_time": 34, "exit_code": 0, "real_time": 43, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 15163392, "output": null, "result": 0, "signal": 0, "cpu_time": 93, "exit_code": 0, "real_time": 98, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10309632, "output": null, "result": 0, "signal": 0, "cpu_time": 27, "exit_code": 0, "real_time": 39, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10387456, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 37, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11853824, "output": null, "result": -1, "signal": 0, "cpu_time": 74, "exit_code": 0, "real_time": 79, "test_case": "7", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9875456, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 31, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11595776, "output": null, "result": 0, "signal": 0, "cpu_time": 48, "exit_code": 0, "real_time": 70, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	Python3	f	{"time_cost": 93, "memory_cost": 15163392}	2018310766	175.192.51.105
112bcbddced7d8ad0b856f6609bc7ba6	2	15	2021-01-03 17:56:00.940606+00	52	N, M = map(int, input().split())\ndebt = []\nfriends = []\nfor i in range(N):\n    debt.append(int(input()))\n\nfor i in range(M):\n    x, y = map(int, input().split())\n    friends.append([x,y])\n\nfor i in range(M):\n    if debt[friends[i][0]]+debt[friends[i][1]]>0:\n        debt[friends[i][0]] += debt[friends[i][1]]\n        debt[friends[i][1]] =0\n    elif debt[friends[i][0]]+debt[friends[i][1]]==0:\n        debt[friends[i][0]] =0\n        debt[friends[i][1]] =0\n    else:\n        debt[friends[i][1]] += debt[friends[i][0]]\n        debt[friends[i][0]] =0\n\nif sum(debt)==0:\n    print("POSSIBLE")\nelse:\n    print("IMPOSSIBLE")	-1	{"err": null, "data": [{"error": 0, "memory": 12361728, "output": null, "result": 0, "signal": 0, "cpu_time": 54, "exit_code": 0, "real_time": 62, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 13324288, "output": null, "result": 0, "signal": 0, "cpu_time": 57, "exit_code": 0, "real_time": 72, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10579968, "output": null, "result": 0, "signal": 0, "cpu_time": 37, "exit_code": 0, "real_time": 45, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 15249408, "output": null, "result": 0, "signal": 0, "cpu_time": 127, "exit_code": 0, "real_time": 136, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10223616, "output": null, "result": 0, "signal": 0, "cpu_time": 36, "exit_code": 0, "real_time": 49, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10223616, "output": null, "result": 0, "signal": 0, "cpu_time": 37, "exit_code": 0, "real_time": 55, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11878400, "output": null, "result": -1, "signal": 0, "cpu_time": 71, "exit_code": 0, "real_time": 87, "test_case": "7", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9846784, "output": null, "result": 0, "signal": 0, "cpu_time": 30, "exit_code": 0, "real_time": 30, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11624448, "output": null, "result": 0, "signal": 0, "cpu_time": 50, "exit_code": 0, "real_time": 67, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	Python3	f	{"time_cost": 127, "memory_cost": 15249408}	2018310766	175.192.51.105
ae1b212dd82c59025d341722b706640c	2	12	2021-01-04 01:31:28.114898+00	47	#include <iostream>\nusing namespace std;\n\nint main(){\n  int temp[4] = {0}, key = 0;\n  for(int i = 0; i < 4; i++){\n    cin >> temp[i];\n  }\n  for(int i = 0; i < 3; i++){\n    if(temp[i] < temp[i+1]){\n      key++;\n    }\n    else if(temp[i] > temp[i+1]){\n      key--;\n    }\n  }\n  if(key == 3) {cout << "Uphill"; }\n  else if(key == 0) {cout << "Flat Land"; }\n  else if(key == -3) {cout << "Downhill"; }\n  else {cout << "Unknown";}\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3264512, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3518464}	2020312552	121.168.152.64
2b900473cb27229ad9b7e35a12b62b79	2	16	2021-01-03 18:56:09.41169+00	23	from itertools import combinations_with_replacement\n\ndef find(a,b):\n    return (a - b) * (a - b)\n\nn, m = map(int, input().split())\nt = [int(input()) for _ in range(n)]\nt.sort()\narr1 = [[] for _ in range(m + 1)]\narr2 = [[] for _ in range(m + 1)]\nlocal_arr = []\nans = 100*100*10\ncnt =0\ndiv = n // 2\nfor cwr in combinations_with_replacement([1,2,3,4,5,6,7,8,9,10], div):\n    add = 0\n    for _ in cwr:\n        add += _ * _\n    if add > m:\n        continue\n    arr1[add].append(list(cwr))\n\nif n % 2 == 1:\n    div += 1\nfor cwr in combinations_with_replacement([1,2,3,4,5,6,7,8,9,10], div):\n    add = 0\n    for _ in cwr:\n        add += _ * _\n    if add > m:\n        continue\n    arr2[add].append(list(cwr))\n\nfor _ in range (1, m):\n    if len(arr1[_]) != 0 and len(arr2[m - _]) != 0:\n        for x in arr1[_]:\n            for y in arr2[m - _]:\n                test = []\n                test.extend(x)\n                test.extend(y)\n                test.sort()\n                chk = 0\n                for i in range(len(test)):\n                    chk += find(test[i], t[i])\n                ans = min(ans, chk)\n\nif ans == 100*100*10:\n    print(-1)\nelse:\n    print(ans)	-1	{"err": null, "data": [{"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 10252288, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 24, "test_case": "2", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 10817536, "output": null, "result": -1, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 24, "test_case": "3", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 10829824, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 21, "test_case": "4", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 10379264, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9113600, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9150464, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9076736, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 9932800, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 23, "test_case": "10", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 10141696, "output": null, "result": -1, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 23, "test_case": "11", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 10055680, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 21, "test_case": "12", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}]}	Python3	f	{"time_cost": 22, "memory_cost": 10829824}	2016312057	221.140.190.220
d5ca4a97f97ab8be8d1b3e13442d955f	2	16	2021-01-03 22:18:54.17907+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n  \n\treturn 100;\n}	4	{"err": null, "data": [{"error": 0, "memory": 3371008, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 100, "real_time": 2, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 3534848, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 100, "real_time": 3, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 3530752, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 100, "real_time": 3, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3354624, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 100, "real_time": 3, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3444736, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 100, "real_time": 2, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3514368, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 100, "real_time": 3, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3493888, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 100, "real_time": 3, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3526656, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 100, "real_time": 3, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3383296, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 100, "real_time": 2, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 3637248, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 100, "real_time": 2, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 3473408, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 100, "real_time": 2, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3604480, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 100, "real_time": 3, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 2, "memory_cost": 3637248}	2011314262	211.218.8.61
7d668eebbedac3115772feb172bca718	2	15	2021-01-03 19:46:41.856678+00	52	N, M = map(int, input().split())\ndebt = []\nd = 0\nfriends = []\n\nfor i in range(N):\n    debt.append(int(input()))\n\nfor i in range(M):\n    x, y = map(int, input().split())\n    friends.append([x,y])\n\nfor i in range(M-1):\n    for x in friends[i]:\n        for k in range(1, M-1-i):\n            if x in friends[i+k]:\n                new_set = list(set().union(friends[i],friends[i+k]))\n                friends[i] = new_set\n                friends.remove(friends[i+k])\n\nfor i in range(len(friends)):\n    for j in friends[i]:\n        d += debt[j]\n\nif d==0:\n    print("POSSIBLE")\nelse:\n    print("IMPOSSIBLE")	4	{"err": null, "data": [{"error": 0, "memory": 12222464, "output": null, "result": 4, "signal": 0, "cpu_time": 62, "exit_code": 1, "real_time": 75, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 13328384, "output": null, "result": 4, "signal": 0, "cpu_time": 54, "exit_code": 1, "real_time": 63, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 10555392, "output": null, "result": 4, "signal": 0, "cpu_time": 50, "exit_code": 1, "real_time": 59, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 15278080, "output": null, "result": 4, "signal": 0, "cpu_time": 79, "exit_code": 1, "real_time": 84, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 10366976, "output": null, "result": 4, "signal": 0, "cpu_time": 29, "exit_code": 1, "real_time": 37, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 10371072, "output": null, "result": 4, "signal": 0, "cpu_time": 45, "exit_code": 1, "real_time": 50, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 11890688, "output": null, "result": 4, "signal": 0, "cpu_time": 42, "exit_code": 1, "real_time": 47, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9891840, "output": null, "result": 4, "signal": 0, "cpu_time": 37, "exit_code": 1, "real_time": 42, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 11739136, "output": null, "result": 4, "signal": 0, "cpu_time": 45, "exit_code": 1, "real_time": 49, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 79, "memory_cost": 15278080}	2018310766	175.192.51.105
94cd974e46cd8e6f188f25d068c5d84d	2	12	2021-01-03 20:47:53.331153+00	14	//\n//  main.cpp\n//  steep_incline\n//\n//  Created by nano on 2021/01/04.\n//\n\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    enum {FLAT, UP, DOWN, UNKNOWN};\n    int current = FLAT;\n    int input[4] = {0};\n    \n    for(int i=0;i<4;i++) {\n        cin >> input[i];\n    }\n    \n    for(int i=0;i<3;i++) {\n        if(input[i] == input[i+1]) {\n            if(current != FLAT) {\n                current = UNKNOWN;\n                break;\n            }\n        }\n        else if(input[i] < input[i+1]) {\n            if(current == DOWN) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = UP;\n            }\n        } else if(input[i] > input[i+1]) {\n            if(current == UP) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = DOWN;\n            }\n        }\n    }\n    \n    switch (current) {\n        case FLAT:\n            cout << "Flat Land" << endl;\n            break;\n            \n        case UP:\n            cout << "Uphill" << endl;\n            break;\n            \n        case DOWN:\n            cout << "Downhill" << endl;\n            break;\n            \n        case UNKNOWN:\n            cout << "Unknown" << endl;\n            break;\n            \n        default:\n            break;\n    }\n    \n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3387392, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3530752}	2015313016	125.130.9.253
7e8a5e4c343cbc4a65d2ce5abfac2e87	2	12	2021-01-04 01:52:13.925187+00	59	array_input = list()\narray_diff = list()\nfor i in range(4):\n    array_input.append(int(input()))\n    if i > 0:\n        array_diff.append(array_input[i]-array_input[i-1])\nif min(array_diff) > 0 and max(array_diff) > 0:\n    print("Uphill")\nelif min(array_diff) < 0 and max(array_diff) < 0:\n    print("Downhill")\nelif min(array_diff) == 0 and max(array_diff) == 0:\n    print("Flat Land")\nelse:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8916992, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9084928, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 20, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9084928}	2015310874	218.237.108.150
3f844629ac7f78c31c04f298fb1a0162	2	12	2021-01-03 20:49:20.45953+00	14	//\n//  main.cpp\n//  steep_incline\n//\n//  Created by nano on 2021/01/04.\n//\n\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    enum {FLAT, UP, DOWN, UNKNOWN};\n    int current = FLAT;\n    int input[4];\n    \n    for(int i=0;i<4;i++) {\n        cin >> input[i];\n    }\n    \n    for(int i=0;i<3;i++) {\n        if(input[i] == input[i+1]) {\n            if(current != FLAT) {\n                current = UNKNOWN;\n                break;\n            }\n        }\n        else if(input[i] < input[i+1]) {\n            if(current == DOWN) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = UP;\n            }\n        } else if(input[i] > input[i+1]) {\n            if(current == UP) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = DOWN;\n            }\n        }\n    }\n    \n    switch (current) {\n        case FLAT:\n            cout << "Flat Land" << endl;\n            break;\n            \n        case UP:\n            cout << "Uphill" << endl;\n            break;\n            \n        case DOWN:\n            cout << "Downhill" << endl;\n            break;\n            \n        case UNKNOWN:\n            cout << "Unknown" << endl;\n            break;\n            \n        default:\n            break;\n    }\n    \n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3362816, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3522560}	2015313016	125.130.9.253
a9ec327e1e338384a09723b707b90ecc	2	16	2021-01-03 22:15:07.582382+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3514368, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3411968, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3387392, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3452928, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3461120, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3555328, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3522560, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3526656, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3362816, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3641344, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3534848, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "12", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3641344}	2011314262	211.218.8.61
df23a1d12e425249a23d250981114ef0	2	12	2021-01-03 20:51:38.621501+00	14	//\n//  main.cpp\n//  steep_incline\n//\n//  Created by nano on 2021/01/04.\n//\n\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    enum {FLAT, UP, DOWN, UNKNOWN};\n    int current = FLAT;\n    int input[4];\n    \n    for(int i=0;i<4;i++) {\n        cin >> input[i];\n    }\n    \n    if(input[0] == input[3]) {\n        current = FLAT;\n    } else if(input[0] < input[3]) {\n        current = UP;\n    } else {\n        current = DOWN;\n    }\n    \n    for(int i=0;i<3;i++) {\n        if(input[i] == input[i+1]) {\n            if(current != FLAT) {\n                current = UNKNOWN;\n                break;\n            }\n        }\n        else if(input[i] < input[i+1]) {\n            if(current == DOWN) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = UP;\n            }\n        } else {\n            if(current == UP) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = DOWN;\n            }\n        }\n    }\n    \n    switch (current) {\n        case FLAT:\n            cout << "Flat Land" << endl;\n            break;\n            \n        case UP:\n            cout << "Uphill" << endl;\n            break;\n            \n        case DOWN:\n            cout << "Downhill" << endl;\n            break;\n            \n        case UNKNOWN:\n            cout << "Unknown" << endl;\n            break;\n            \n        default:\n            break;\n    }\n    \n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3362816, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3534848}	2015313016	125.130.9.253
b733524e84ff0f5c47ada4965e9d2adf	2	12	2021-01-03 20:51:55.46519+00	14	//\n//  main.cpp\n//  steep_incline\n//\n//  Created by nano on 2021/01/04.\n//\n\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    enum {FLAT, UP, DOWN, UNKNOWN};\n    int current = FLAT;\n    int input[4];\n    \n    for(int i=0;i<4;i++) {\n        cin >> input[i];\n    }\n    \n    for(int i=0;i<3;i++) {\n        if(input[i] == input[i+1]) {\n            if(current != FLAT) {\n                current = UNKNOWN;\n                break;\n            }\n        }\n        else if(input[i] < input[i+1]) {\n            if(current == DOWN) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = UP;\n            }\n        } else {\n            if(current == UP) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = DOWN;\n            }\n        }\n    }\n    \n    switch (current) {\n        case FLAT:\n            cout << "Flat Land" << endl;\n            break;\n            \n        case UP:\n            cout << "Uphill" << endl;\n            break;\n            \n        case DOWN:\n            cout << "Downhill" << endl;\n            break;\n            \n        case UNKNOWN:\n            cout << "Unknown" << endl;\n            break;\n            \n        default:\n            break;\n    }\n    \n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3547136}	2015313016	125.130.9.253
decb2446391c8a213b85a6ba9c56804c	2	12	2021-01-04 10:19:58.971677+00	89	temp_1 = int(input())\ntemp_2 = int(input())\ntemp_3 = int(input())\ntemp_4 = int(input())\n\na = temp_1 - temp_2\nb = temp_2 - temp_3\nc = temp_3 - temp_4\n\nif ((a<0) and (b<0) and (c<0)):\n  print("Uphill")\nelif ((a>0) and (b>0) and (c>0)):\n  print("Downhill")\nelif ((a=0) and (b=0) and (c=0)):\n  print("Flat Land")\nelse:\n  print("Unknown")	-2	{}	Python3	f	{"score": 0, "err_info": "File \\"/judger/run/d7254dccb9054763b4e007f24d7e2420/solution.py\\", line 14\\n    elif ((a=0) and (b=0) and (c=0)):\\n            ^\\nSyntaxError: invalid syntax"}	2020314257	14.39.21.208
5befbfee1dd816ee57681a6d51fec309	2	12	2021-01-03 20:52:58.535279+00	14	//\n//  main.cpp\n//  steep_incline\n//\n//  Created by nano on 2021/01/04.\n//\n\n#include <iostream>\n#define FLAT 0\n#define UP 1\n#define DOWN 2\n#define UNKNOWN 3\n\nusing namespace std;\n\nint main() {\n    int current = FLAT;\n    int input[4];\n    \n    for(int i=0;i<4;i++) {\n        cin >> input[i];\n    }\n    \n    for(int i=0;i<3;i++) {\n        if(input[i] == input[i+1]) {\n            if(current != FLAT) {\n                current = UNKNOWN;\n                break;\n            }\n        }\n        else if(input[i] < input[i+1]) {\n            if(current == DOWN) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = UP;\n            }\n        } else {\n            if(current == UP) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = DOWN;\n            }\n        }\n    }\n    \n    switch (current) {\n        case FLAT:\n            cout << "Flat Land" << endl;\n            break;\n            \n        case UP:\n            cout << "Uphill" << endl;\n            break;\n            \n        case DOWN:\n            cout << "Downhill" << endl;\n            break;\n            \n        case UNKNOWN:\n            cout << "Unknown" << endl;\n            break;\n            \n        default:\n            break;\n    }\n    \n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3547136}	2015313016	125.130.9.253
7b6e460301f64c7b9d1e81f857d9877e	2	15	2021-01-04 02:44:47.076246+00	65	n,m,*l=map(int,open(0).read().split())\nc,r=l[:n],range\np,V=[*r(n)],[0]*n\ndef f(i):\n    if i!=p[i]:p[i]=f(p[i])\n    return p[i]\nfor v,w in zip(l[n::2],l[1+n::2]):\n    v,w=f(v),f(w)\n    if V[v]>V[w]:v,w=w,v\n    V[v]+=1;p[w]=v\nd={}\nfor i in r(n):\n    if f(i) not in d:d[p[i]]=0\n    d[p[i]]+=c[i]\nprint(['','IM'][min(d.values())<0]+'POSSIBLE')	0	{"err": null, "data": [{"error": 0, "memory": 13832192, "output": null, "result": 0, "signal": 0, "cpu_time": 40, "exit_code": 0, "real_time": 49, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 15253504, "output": null, "result": 0, "signal": 0, "cpu_time": 58, "exit_code": 0, "real_time": 96, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11907072, "output": null, "result": 0, "signal": 0, "cpu_time": 34, "exit_code": 0, "real_time": 38, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 18186240, "output": null, "result": 0, "signal": 0, "cpu_time": 64, "exit_code": 0, "real_time": 69, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11255808, "output": null, "result": 0, "signal": 0, "cpu_time": 32, "exit_code": 0, "real_time": 33, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11227136, "output": null, "result": 0, "signal": 0, "cpu_time": 33, "exit_code": 0, "real_time": 33, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 13340672, "output": null, "result": 0, "signal": 0, "cpu_time": 48, "exit_code": 0, "real_time": 52, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 10592256, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 30, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 13307904, "output": null, "result": 0, "signal": 0, "cpu_time": 40, "exit_code": 0, "real_time": 45, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	Python3	f	{"time_cost": 64, "memory_cost": 18186240}	2020711601	115.145.209.173
50b65fb9f4326bf6803edf2d61b279ff	2	15	2021-01-03 20:54:34.378004+00	52	import sys\nsys.setrecursionlimit(100000)\n\nN, M = map(int, input().split())\ndebt = []\ngoal = []\nfriends = []\n\nfor i in range(N):\n    debt.append(int(input()))\n\nfor i in range(M):\n    x, y = map(int, input().split())\n    friends.append([x,y])\n\nfor i in range(M-1):\n    for x in friends[i]:\n        for k in range(1, M-1-i):\n            if x in friends[i+k]:\n                new_set = list(set().union(friends[i],friends[i+k]))\n                friends[i] = new_set\n                friends.remove(friends[i+k])\n\ndebt_group = []\nfor i in range(len(friends)):\n    d=0\n    for j in range(len(friends[i])):\n        d += debt[friends[i][j]]\n    debt_group.append(d)\n    goal.append(0)\n\nif debt_group==goal:\n    print("POSSIBLE")\nelse:\n    print("IMPOSSIBLE")	4	{"err": null, "data": [{"error": 0, "memory": 12144640, "output": null, "result": 4, "signal": 0, "cpu_time": 38, "exit_code": 1, "real_time": 54, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 13238272, "output": null, "result": 4, "signal": 0, "cpu_time": 47, "exit_code": 1, "real_time": 64, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 10534912, "output": null, "result": 4, "signal": 0, "cpu_time": 24, "exit_code": 1, "real_time": 36, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 15278080, "output": null, "result": 4, "signal": 0, "cpu_time": 77, "exit_code": 1, "real_time": 90, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 10272768, "output": null, "result": 4, "signal": 0, "cpu_time": 24, "exit_code": 1, "real_time": 36, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 10264576, "output": null, "result": 4, "signal": 0, "cpu_time": 26, "exit_code": 1, "real_time": 31, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 11976704, "output": null, "result": 4, "signal": 0, "cpu_time": 37, "exit_code": 1, "real_time": 49, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9932800, "output": null, "result": 4, "signal": 0, "cpu_time": 26, "exit_code": 1, "real_time": 31, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 11714560, "output": null, "result": 4, "signal": 0, "cpu_time": 46, "exit_code": 1, "real_time": 50, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 77, "memory_cost": 15278080}	2018310766	175.192.51.105
d39ab81e93dad78707193d38d6557794	2	12	2021-01-03 20:53:22.803526+00	14	//\n//  main.cpp\n//  steep_incline\n//\n//  Created by nano on 2021/01/04.\n//\n\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    enum {FLAT, UP, DOWN, UNKNOWN};\n    int current = FLAT;\n    int input[4] = {0};\n    \n    for(int i=0;i<4;i++) {\n        cin >> input[i];\n    }\n    \n    for(int i=0;i<3;i++) {\n        if(input[i] == input[i+1]) {\n            if(current != FLAT) {\n                current = UNKNOWN;\n                break;\n            }\n        }\n        else if(input[i] < input[i+1]) {\n            if(current == DOWN) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = UP;\n            }\n        } else if(input[i] > input[i+1]) {\n            if(current == UP) {\n                current = UNKNOWN;\n                break;\n            } else {\n                current = DOWN;\n            }\n        }\n    }\n    \n    switch (current) {\n        case FLAT:\n            cout << "Flat Land" << endl;\n            break;\n            \n        case UP:\n            cout << "Uphill" << endl;\n            break;\n            \n        case DOWN:\n            cout << "Downhill" << endl;\n            break;\n            \n        case UNKNOWN:\n            cout << "Unknown" << endl;\n            break;\n            \n        default:\n            break;\n    }\n    \n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3362816, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3538944}	2015313016	125.130.9.253
9510b51e73db25580bca6bc7674ce158	2	12	2021-01-04 01:37:09.418559+00	59	array_input = list()\narray_diff = list()\nfor i in range(4):\n  array_input.append(int(input()))\n  if i > 0:\n    array_diff.append(array_input[i]-array_input[i-1])\nif min(array_diff) > 0 and max(array_diff) > 0:\n  print("Uphill")\nelif min(array_diff) < 0 and max(array_diff) < 0:\n  print("Downhill")\nelse:\n  print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "1", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9039872}	2015310874	218.237.108.150
fd9edf2817b65e74037a0a1e14093c87	2	16	2021-01-03 22:19:41.432058+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t//cout << "Tile Length: " << curTileLength << endl;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t//for (auto it = areaSum[1].begin(); it != areaSum[1].end(); it++) {\n\t//\tcout << "M:" << it->first << endl;\n\t//\tcout << "Answer:" << it->second << endl;\n\t//}\n\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = 2147483647;\n\n\tfor (auto it = areaSum[N].begin(); it != areaSum[N].end(); it++) {\n\t\t//cout << it->first << ":" << it->second << endl;\n\t\tif (it->first == M) {\n\t\t\tfound = true;\n\t\t\tif (min > it->second) {\n\t\t\t\tmin = it->second;\n\t\t\t}\n\t\t\t//cout << "M:" << it->first << endl;\n\t\t\t//cout << "Answer:" << it->second << endl;\n\t\t}\n\t}\n\n\tif (found) {\n\t\tcout << min;\n\t\treturn 0;\n\t}\n\telse {\n\t\tcout << -1;\n\t\treturn 0;\n\t}\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4538368, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 9474048, "output": null, "result": 4, "signal": 11, "cpu_time": 34, "exit_code": 0, "real_time": 104, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8835072, "output": null, "result": 4, "signal": 11, "cpu_time": 34, "exit_code": 0, "real_time": 105, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4603904, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 6, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 4247552, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 6529024, "output": null, "result": 4, "signal": 11, "cpu_time": 20, "exit_code": 0, "real_time": 89, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7335936, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 22, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 34, "memory_cost": 9474048}	2011314262	211.218.8.61
dd1e2865d7af07fdf6ce8318e0fa4c19	2	13	2021-01-04 09:44:08.821623+00	84	#include <stdio.h>\n\nint main(void)\n{\n\tint bucket[100];\n\tchar str[31];\n\n\tfor (int i = 0; i < 100; i++)\n\t\tbucket[i] = 0;\n\tbucket[(int)'H'] = 1;\n\tbucket[(int)'I'] = 1;\n\tbucket[(int)'N'] = 1;\n\tbucket[(int)'O'] = 1;\n\tbucket[(int)'S'] = 1;\n\tbucket[(int)'X'] = 1;\n\tbucket[(int)'Z'] = 1;\n\n\tscanf("%s", str);\n\tint i = 0;\n\twhile (str && str[i])\n\t{\n\t\tif (bucket[str[i]] == 0)\n\t\t{\n\t\t\tprintf("NO");\n\t\t\treturn (0);\n\t\t}\n\t\ti++;\n\t}\n\tprintf("YES");\n\treturn (1);\n}	4	{"err": null, "data": [{"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1708032, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 1, "real_time": 1, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 1699840, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 2, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1695744, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 2, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 1593344, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 1, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 1589248, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1556480, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 2, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1708032}	soysauce	58.29.80.140
d48336e2c2e5589463d187b148d0f618	2	12	2021-01-04 02:45:11.555219+00	66	#include <stdio.h>\nint main() {\n\tint arr[4],mode;\n\tint count = 0;\n\tfor(int i = 0; i < 4; i++) {\n\t\tscanf("%d", &arr[i]);\n\t}\n\n\tif ((arr[0] == arr[1]) && (arr[2] == arr[3])) {\n\t\tif (arr[1] == arr[3]) {\n\t\t\tprintf("Flat Land");\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse if (arr[0] > arr[1]) {\n\t\tmode = 1;\n\t\tfor (int i = 1; i < 3; i++) {\n\t\t\tif (arr[i] > arr[i + 1]) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tmode = 2;\n\t\tfor (int i = 1; i < 3; i++) {\n\t\t\tif (arr[i] < arr[i + 1]) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\n\t\t}\n\t}\n\tif (count != 2) {\n\t\tprintf("Unknown");\n\t}\n\telse {\n\t\tif (mode == 1) {\n\t\t\tprintf("Downhill");\n\t\t}\n\t\telse {\n\t\t\tprintf("Uphill");\n\t\t}\n\t}\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1695744, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1736704}	2019314907	59.11.8.100
6c6d868ca8c239206ceac72ffcc44027	2	13	2021-01-04 02:54:31.107982+00	25	h = input()\n\nList = ['H','I','N','O','S','X','Z']\nBol= 1\nfor i in range(len(h)):\n    if h[i] not in List:\n        print('NO')\n        Bol = 0\nif Bol ==1:          \n    print("YES")	-1	{"err": null, "data": [{"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8859648, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8859648, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8884224, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "9d762d3b96b04534bd794cb8e15960f8"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8888320, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "8", "output_md5": "646da0df850e1bf42ee11fcce0fa17ac"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8982528}	2020313223	221.143.30.115
63a5d326f0f7093ebbf2474aab08027b	2	12	2021-01-03 21:27:29.573559+00	7	#include <iostream>\n\nusing namespace std;\n\nint main(){\n  int a, b, c, d;\n  cin >> a >> b >> c >> d;\n  \n  if(a < b && b < c && c < d){\n  \tcout << "Uphill" << endl;\n  }\n  else if(a > b && b > c && c > d){\n  \tcout << "Downhill" << endl;\n  }\n  else if(a == b && b == c && c == d){\n    cout << "Flat land" << endl;\n  }\n  else{\n    cout << "Unknown" << endl;\n  }\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3420160, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 3420160, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3358720, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3362816, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3534848}	2015318907	211.219.82.2
1ad78b148c111a3386caff242fa38ea6	2	12	2021-01-04 04:13:36.889955+00	68	#include<bits/stdc++.h>\n\nusing namespace std;\n\nint h[4];\n\nint main()\n{\n    for(int i=0 ; i<4 ; i++) scanf("%d",&h[i]);\n    if(h[0]<h[1] && h[1]<h[2] && h[2]<h[3]) printf("Uphill");\n    else if(h[0]>h[1] && h[1]>h[2] && h[2]>h[3]) printf("Downhill");\n    else if(h[0]==h[1] && h[1]==h[2] && h[2]==h[3]) printf("Flat Land");\n    else printf("Unknown");\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3653632, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3661824, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3702784}	2018312723	39.7.47.101
634b43483cc3c9d11a39c3a7e8ea31ef	2	16	2021-01-03 22:20:00.612716+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t//cout << "Tile Length: " << curTileLength << endl;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t//for (auto it = areaSum[1].begin(); it != areaSum[1].end(); it++) {\n\t//\tcout << "M:" << it->first << endl;\n\t//\tcout << "Answer:" << it->second << endl;\n\t//}\n\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = 2147483647;\n\n\tcout << 0;\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3481600, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 4431872, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 9330688, "output": null, "result": 4, "signal": 11, "cpu_time": 31, "exit_code": 0, "real_time": 105, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8839168, "output": null, "result": 4, "signal": 11, "cpu_time": 31, "exit_code": 0, "real_time": 101, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4546560, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3489792, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3530752, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3547136, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3563520, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 4124672, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "10", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 6524928, "output": null, "result": 4, "signal": 11, "cpu_time": 19, "exit_code": 0, "real_time": 90, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7110656, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 24, "test_case": "12", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}]}	C++	f	{"time_cost": 31, "memory_cost": 9330688}	2011314262	211.218.8.61
aeadffead4da62b842d110b616b2acf7	2	12	2021-01-04 02:18:33.75546+00	47	#include <iostream>\nusing namespace std;\n\nint main(){\n  int temp[4] = {0}, key = 0;\n  for(int i = 0; i < 4; i++){\n    cin >> temp[i];\n    if(i >= 1){\n      \tif(temp[i-1] < temp[i]){\n      \t\tkey++;\n    \t}\n    \telse if(temp[i-1] > temp[i]){\n     \t\tkey--;\n    \t}\n    }\n  }\n  if(key == 3) {cout << "Uphill"; }\n  else if(key == 0) {cout << "Flat Land"; }\n  else if(key == -3) {cout << "Downhill"; }\n  else {cout << "Unknown";}\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3354624, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3530752, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3534848}	2020312552	121.168.152.64
59d8ecaa9579a8b466e34259d6ae1175	2	16	2021-01-04 02:48:45.772643+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t// 다음 단계\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3616768, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 4325376, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9330688, "output": null, "result": 4, "signal": 11, "cpu_time": 35, "exit_code": 0, "real_time": 108, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9084928, "output": null, "result": 4, "signal": 11, "cpu_time": 31, "exit_code": 0, "real_time": 105, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4190208, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3653632, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3543040, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3534848, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3391488, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3919872, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 6475776, "output": null, "result": 4, "signal": 11, "cpu_time": 12, "exit_code": 0, "real_time": 87, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7069696, "output": null, "result": -1, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 25, "test_case": "12", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	C++	f	{"time_cost": 35, "memory_cost": 9330688}	2011314262	211.218.8.61
12b4b72889131ddf562c11fa5ee0d945	2	13	2021-01-04 02:56:38.100969+00	66	#include <stdio.h>\n#include <string.h> \nint main() {\n\tchar arr[31];\n\tchar dic[8] ="HINOSXZ" ;\n\tint count=0;\n\n\n\tscanf("%s", arr);\n\tint a = strlen(arr);\n\tfor (int i = 0; i < a; i++) {\n\t\tfor (int j = 0; j < 7; j++) {\n\t\t\tif (arr[i] == dic[j]) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == a) {\n\t\tprintf("YES");\n\t}\n\telse {\n\t\tprintf("NO");\n\t}\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1585152, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1703936}	2019314907	59.11.8.100
fca31864dde629e8031b7b31f2dcf3b2	2	12	2021-01-03 21:37:01.996859+00	7	#include <iostream>\n\nusing namespace std;\n\nint main(){\n  int a, b, c, d;\n  cin >> a >> b >> c >> d;\n  \n  if(a < b && b < c && c < d){\n  \tcout << "Uphill" << endl;\n  }\n  else if(a > b && b > c && c > d){\n  \tcout << "Downhill" << endl;\n  }\n  else if(a == b && b == c && c == d){\n    cout << "Flat Land" << endl;\n  }\n  else{\n    cout << "Unknown" << endl;\n  }\n  return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3375104, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3547136}	2015318907	211.219.82.2
60849b1b3c585657260c4701cfea1088	2	12	2021-01-04 11:54:04.463292+00	93	h1=int(input())\nh2=int(input())\nh3=int(input())\nh4=int(input())\n\nif(h1<h2 and h2<h3 and h3<h4):\n    print("Uphill")\nelif (h1>h2 and h2>h3 and h3>h4):\n    print("Downhill")\nelif (h1==h2==h3==h4):\n    print("Flat land")\nelse:\n    print("Unknown")	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/c7da4985b3ec4003aac8c162729f3bab/main.c:1:4: error: expected expression before 'int'\\n h1=int(input())\\n    ^~~"}	이지연	114.205.106.66
5323ce13cc8c897a9cd33ab401047a6d	2	16	2021-01-03 22:13:18.643812+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t//cout << "Tile Length: " << curTileLength << endl;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t//for (auto it = areaSum[1].begin(); it != areaSum[1].end(); it++) {\n\t//\tcout << "M:" << it->first << endl;\n\t//\tcout << "Answer:" << it->second << endl;\n\t//}\n\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = INT_MAX;\n\n\tfor (auto it = areaSum[N].begin(); it != areaSum[N].end(); it++) {\n\t\t//cout << it->first << ":" << it->second << endl;\n\t\tif (it->first == M) {\n\t\t\tfound = true;\n\t\t\tif (min > it->second) {\n\t\t\t\tmin = it->second;\n\t\t\t}\n\t\t\t//cout << "M:" << it->first << endl;\n\t\t\t//cout << "Answer:" << it->second << endl;\n\t\t}\n\t}\n\n\tif (found) {\n\t\t//cout << "Last Answer: "<< min << endl;\n\t\treturn min;\n\t}\n\telse {\n\t\t//cout << "Last Answer: " << -1 << endl;\n\t\treturn -1;\n\t}\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-2	{}	C++	f	{"score": 0, "err_info": "/judger/run/c1a72b29d7944e54841b66da7b0dcdd9/main.cpp: In function 'int main(int, char**)':\\n/judger/run/c1a72b29d7944e54841b66da7b0dcdd9/main.cpp:143:12: error: 'INT_MAX' was not declared in this scope\\n  int min = INT_MAX;\\n            ^~~~~~~\\n/judger/run/c1a72b29d7944e54841b66da7b0dcdd9/main.cpp:143:12: note: suggested alternative: 'INT8_MAX'\\n  int min = INT_MAX;\\n            ^~~~~~~\\n            INT8_MAX"}	2011314262	211.218.8.61
371cc7052e75f899d0b94672119bd42f	2	16	2021-01-03 22:20:45.527032+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t//cout << "Tile Length: " << curTileLength << endl;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t//for (auto it = areaSum[1].begin(); it != areaSum[1].end(); it++) {\n\t//\tcout << "M:" << it->first << endl;\n\t//\tcout << "Answer:" << it->second << endl;\n\t//}\n\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = 10000;\n\n\tcout << min;\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3534848, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "b7a782741f667201b54880c925faec4b"}, {"error": 0, "memory": 4599808, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "b7a782741f667201b54880c925faec4b"}, {"error": 0, "memory": 9277440, "output": null, "result": 4, "signal": 11, "cpu_time": 37, "exit_code": 0, "real_time": 107, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9048064, "output": null, "result": 4, "signal": 11, "cpu_time": 38, "exit_code": 0, "real_time": 107, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4546560, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "b7a782741f667201b54880c925faec4b"}, {"error": 0, "memory": 3420160, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "b7a782741f667201b54880c925faec4b"}, {"error": 0, "memory": 3383296, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "b7a782741f667201b54880c925faec4b"}, {"error": 0, "memory": 3543040, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "b7a782741f667201b54880c925faec4b"}, {"error": 0, "memory": 3510272, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "b7a782741f667201b54880c925faec4b"}, {"error": 0, "memory": 4038656, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "10", "output_md5": "b7a782741f667201b54880c925faec4b"}, {"error": 0, "memory": 6696960, "output": null, "result": 4, "signal": 11, "cpu_time": 14, "exit_code": 0, "real_time": 84, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7081984, "output": null, "result": -1, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 23, "test_case": "12", "output_md5": "b7a782741f667201b54880c925faec4b"}]}	C++	f	{"time_cost": 38, "memory_cost": 9277440}	2011314262	211.218.8.61
419f3f3839980171713865ef86e27c53	2	16	2021-01-03 22:15:27.801177+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3543040, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3637248, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3624960, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3383296, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3457024, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3465216, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3383296, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3371008, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3452928, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3534848, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3387392, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "11", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3473408, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "12", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3637248}	2011314262	211.218.8.61
bcd4708b9fbedf7dd7084f3ae78f904b	2	12	2021-01-04 01:39:54.066267+00	20	heights = []\n\nfor i in range(4):\n    heights.append(int(input()))\n\nstatus = 'Uphill' if heights[0] < heights[1] else 'Downhill'\nprev = heights[1]\n\nfor i in range(2, 4):\n    if (heights[i] < prev and status == 'Uphill') or (heights[i] > prev and status == 'Downhill'):\n        status = 'Unknown'\n        break\n    else:\n        prev = heights[i]\n\nprint(status)	-1	{"err": null, "data": [{"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	Python3	f	{"time_cost": 18, "memory_cost": 9060352}	2018312058	58.122.118.89
f995c064f29e25ce6059ac80af2da2b6	2	13	2021-01-04 02:21:55.137144+00	64	a='HINOSXZ'\n\nb=str(input())\ncount=0\nfor i in range(len(b)):\n    if b[i] in a:\n        continue\n    else:\n        print('NO')\n        count+=1\n        break\nif count==0:\n    print('YES')	0	{"err": null, "data": [{"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 20, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8843264, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8855552, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 18, "memory_cost": 8982528}	2017314804	113.199.59.51
686e8c48f685f664459b6c9a39a7c14d	2	16	2021-01-03 22:14:02.790293+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t//cout << "Tile Length: " << curTileLength << endl;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t//for (auto it = areaSum[1].begin(); it != areaSum[1].end(); it++) {\n\t//\tcout << "M:" << it->first << endl;\n\t//\tcout << "Answer:" << it->second << endl;\n\t//}\n\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = 2147483647;\n\n\tfor (auto it = areaSum[N].begin(); it != areaSum[N].end(); it++) {\n\t\t//cout << it->first << ":" << it->second << endl;\n\t\tif (it->first == M) {\n\t\t\tfound = true;\n\t\t\tif (min > it->second) {\n\t\t\t\tmin = it->second;\n\t\t\t}\n\t\t\t//cout << "M:" << it->first << endl;\n\t\t\t//cout << "Answer:" << it->second << endl;\n\t\t}\n\t}\n\n\tif (found) {\n\t\t//cout << "Last Answer: "<< min << endl;\n\t\treturn min;\n\t}\n\telse {\n\t\t//cout << "Last Answer: " << -1 << endl;\n\t\treturn -1;\n\t}\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3391488, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 5, "real_time": 3, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 4222976, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 38, "real_time": 8, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9388032, "output": null, "result": 4, "signal": 11, "cpu_time": 40, "exit_code": 0, "real_time": 109, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8929280, "output": null, "result": 4, "signal": 11, "cpu_time": 28, "exit_code": 0, "real_time": 105, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4272128, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 255, "real_time": 7, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3481600, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 11, "real_time": 2, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3604480, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 21, "real_time": 3, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3489792, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 21, "real_time": 2, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3506176, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 50, "real_time": 2, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 3919872, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 105, "real_time": 4, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 6696960, "output": null, "result": 4, "signal": 11, "cpu_time": 11, "exit_code": 0, "real_time": 86, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7073792, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 138, "real_time": 21, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 40, "memory_cost": 9388032}	2011314262	211.218.8.61
97dba1656a868a87ae0bbdc6e3bce18f	2	16	2021-01-03 22:21:05.319013+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t//cout << "Tile Length: " << curTileLength << endl;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t//for (auto it = areaSum[1].begin(); it != areaSum[1].end(); it++) {\n\t//\tcout << "M:" << it->first << endl;\n\t//\tcout << "Answer:" << it->second << endl;\n\t//}\n\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = 100000;\n\n\tcout << min;\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3469312, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "14ee22eaba297944c96afdbe5b16c65b"}, {"error": 0, "memory": 4284416, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "14ee22eaba297944c96afdbe5b16c65b"}, {"error": 0, "memory": 9486336, "output": null, "result": 4, "signal": 11, "cpu_time": 33, "exit_code": 0, "real_time": 107, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9015296, "output": null, "result": 4, "signal": 11, "cpu_time": 30, "exit_code": 0, "real_time": 109, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4415488, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "14ee22eaba297944c96afdbe5b16c65b"}, {"error": 0, "memory": 3514368, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "14ee22eaba297944c96afdbe5b16c65b"}, {"error": 0, "memory": 3502080, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "14ee22eaba297944c96afdbe5b16c65b"}, {"error": 0, "memory": 3375104, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "14ee22eaba297944c96afdbe5b16c65b"}, {"error": 0, "memory": 3661824, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "14ee22eaba297944c96afdbe5b16c65b"}, {"error": 0, "memory": 4149248, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "10", "output_md5": "14ee22eaba297944c96afdbe5b16c65b"}, {"error": 0, "memory": 6369280, "output": null, "result": 4, "signal": 11, "cpu_time": 19, "exit_code": 0, "real_time": 88, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7176192, "output": null, "result": -1, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 22, "test_case": "12", "output_md5": "14ee22eaba297944c96afdbe5b16c65b"}]}	C++	f	{"time_cost": 33, "memory_cost": 9486336}	2011314262	211.218.8.61
fac99d2fbbfcbaa02e464e698e2743b6	2	16	2021-01-03 22:16:53.811517+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t\n  \n\t// 정답 체킹\n\tbool found = false;\n\tint min = 114748364;\n  \n\treturn min;\n\n\t//return 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3399680, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 204, "real_time": 2, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 3473408, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 2, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 3448832, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 204, "real_time": 2, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3608576, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 204, "real_time": 2, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3522560, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 2, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3485696, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 2, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3448832, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 204, "real_time": 3, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3362816, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 3, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3543040, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 204, "real_time": 3, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 3506176, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 204, "real_time": 3, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 3563520, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 204, "real_time": 2, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3497984, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 204, "real_time": 3, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 2, "memory_cost": 3608576}	2011314262	211.218.8.61
2b4956f1dde97bdc68ef79e33bf21d63	2	12	2021-01-04 02:24:02.798119+00	65	a,b,c,d=map(int,open(0))\nk='Unknown'\nif a<b<c<d:k='Uphill'\nif a>b>c>d:k='Downhill'\nif a==b==c==d:k='Flat Land'\nprint(k)	0	{"err": null, "data": [{"error": 0, "memory": 9117696, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9138176, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8916992, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8974336, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9048064, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 13, "memory_cost": 9138176}	2020711601	115.145.209.173
f9c7a2218983d5ba2f85d3c7519a398d	2	14	2021-01-04 02:45:19.100645+00	62	#include<iostream>\n#include<vector>\n#include<algorithm>\n\nint N, max, eq, arr[1005], temp[1005];\nstd::vector<int> num, deleted;\n\nint main(){\n    scanf("%d", &N);\n    for(int i = 0; i < N; ++i){\n        scanf("%d", &arr[i]);\n        temp[i] = arr[i];\n    }\n    if(N == 1){\n        printf("1");\n        return 0;\n    }\n    for(int i = 1; i < N; ++i)\n        eq += (arr[i] == arr[i - 1]) ? 1 : 0;\n    if(eq == N - 1){\n        printf("%d", N);\n        return 0;\n    }\n    std::sort(temp, temp + N);\n    num.push_back(temp[0]);\n    for(int i = 1; i < N; ++i)\n        if(temp[i] != num[num.size() - 1])\n            num.push_back(temp[i]);\n    for(int i = 0; i < num.size(); ++i){\n        deleted.clear();\n        for(int u = 0; u < N; ++u){\n            if(arr[u] != num[i])\n                deleted.push_back(arr[u]);\n        }\n        int cur = 0;\n        for(int u = 1; u < N; ++u){\n            if(deleted[u] == deleted[u - 1])\n                ++cur;\n            else{\n                max = (cur > max) ? cur : max;\n                cur = 0;\n            }\n        }\n    }\n    printf("%d", max + 1);\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3805184, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3678208, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 3624960, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3645440, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 3731456, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3727360, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3817472, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3706880, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3670016, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3653632, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "13", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3817472, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "14", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3698688, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3764224, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3710976, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3678208, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3706880, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 9, "memory_cost": 3817472}	2019314665	115.23.186.96
4c20fb83ce94810c9eb597c65d2a0fab	2	13	2021-01-04 02:48:57.985788+00	33	#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n\tchar S[30];\n\tint alpha[26];\n\tmemset(alpha, 0, sizeof(alpha));\n\tmemset(S, 0, sizeof(S));\n\talpha['H' - 65] = 1;\n\talpha['I' - 65] = 1;\n\talpha['N' - 65] = 1;\n\talpha['O' - 65] = 1;\n\talpha['S' - 65] = 1;\n\talpha['X' - 65] = 1;\n\talpha['Z' - 65] = 1;\n\tscanf("%s", S);\n\tint i = -1;\n\twhile (S[++i])\n\t{\n\t\tif (alpha[S[i] - 65] == 0)\n\t\t{\n\t\t\tprintf("NO");\n\t\t\treturn (0);\n\t\t}\n\t}\n\tprintf("YES");\n\treturn (0);\n}	0	{"err": null, "data": [{"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1638400, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1613824, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1699840}	2015313375	175.196.189.112
9877992caf6dd3c6cb201f59799cc15c	2	14	2021-01-04 04:45:54.978338+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 2e2 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nset<int>xset;\nvector <int> vi;\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\tint n; ci(n);\n\tfa(i, 0, n)\n\t{\n\t\tint x; ci(x);\n\t\txset.insert(x);\n\t\tvi.push_back(x);\n\t}\n\n\tint uans = 0;\n\n\tfor (auto x : xset)\n\t{\n\t\tvector <int> tmp;\n\n\t\tfor (auto y : vi)\n\t\t{\n\t\t\tif (y != x) tmp.push_back(y);\n\t\t}\n\n\n\t\tint rans = 0;\n\t\tint ans = 0;\n\n\t\ttmp.push_back(INF);\n\n\t\tfa(i, 1, tmp.size())\n\t\t{\n\t\t\tif (tmp[i] == tmp[i - 1]) ++ans;\n\t\t\telse\n\t\t\t{\n\t\t\t\tckmax(rans, ans);\n\t\t\t\tans = 0;\n\t\t\t}\n\t\t}\n\n\t\tckmax(uans, rans+1);\n\t}\n\n\tAT;\n\n\tco(uans);\n\tAE;\n\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 6, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3665920, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3682304, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 6, "memory_cost": 3682304}	2018314788	115.145.246.12
645803625d909a57af10d5a93f69b907	2	16	2021-01-03 22:15:40.980526+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3629056, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 4222976, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 8, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9469952, "output": null, "result": 4, "signal": 11, "cpu_time": 39, "exit_code": 0, "real_time": 111, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9043968, "output": null, "result": 4, "signal": 11, "cpu_time": 33, "exit_code": 0, "real_time": 106, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4202496, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3637248, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3637248, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3579904, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3411968, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3903488, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "10", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 6701056, "output": null, "result": 4, "signal": 11, "cpu_time": 13, "exit_code": 0, "real_time": 90, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 6926336, "output": null, "result": -1, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 23, "test_case": "12", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	C++	f	{"time_cost": 39, "memory_cost": 9469952}	2011314262	211.218.8.61
2b858b45edc6c53c63b22cebd7e115d8	2	16	2021-01-03 22:21:40.914164+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t//cout << "Tile Length: " << curTileLength << endl;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t//for (auto it = areaSum[1].begin(); it != areaSum[1].end(); it++) {\n\t//\tcout << "M:" << it->first << endl;\n\t//\tcout << "Answer:" << it->second << endl;\n\t//}\n\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = 100000;\n\n\tif (found) {\n\t\tcout << min;\n\t}\n\telse {\n\t\tcout << -1;\n\t}\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3354624, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4571136, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9318400, "output": null, "result": 4, "signal": 11, "cpu_time": 36, "exit_code": 0, "real_time": 111, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8839168, "output": null, "result": 4, "signal": 11, "cpu_time": 33, "exit_code": 0, "real_time": 103, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4308992, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 6, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3485696, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3530752, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3403776, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3416064, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4206592, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "10", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 6537216, "output": null, "result": 4, "signal": 11, "cpu_time": 19, "exit_code": 0, "real_time": 90, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7266304, "output": null, "result": -1, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 23, "test_case": "12", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}]}	C++	f	{"time_cost": 36, "memory_cost": 9318400}	2011314262	211.218.8.61
2d29cbe9fd56bc714d31f992472a873c	2	16	2021-01-03 22:15:54.389197+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\t// 정답 체킹\n\tbool found = false;\n\tint min = 2147483647;\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3584000, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 4222976, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9375744, "output": null, "result": 4, "signal": 11, "cpu_time": 36, "exit_code": 0, "real_time": 105, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8863744, "output": null, "result": 4, "signal": 11, "cpu_time": 33, "exit_code": 0, "real_time": 102, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4202496, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3641344, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3584000, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3395584, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3551232, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3977216, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "10", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 6516736, "output": null, "result": 4, "signal": 11, "cpu_time": 13, "exit_code": 0, "real_time": 86, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7008256, "output": null, "result": -1, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 22, "test_case": "12", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	C++	f	{"time_cost": 36, "memory_cost": 9375744}	2011314262	211.218.8.61
bed68ff22abfacf36ca387677cbf01b4	2	12	2021-01-04 01:41:36.1985+00	20	heights = []\n\nfor i in range(4):\n    heights.append(int(input()))\n\nstatus = None\nif heights[0] < heights[1]:\n    status = 'Uphill'\nelif heights[0] > heights[1]:\n    status = 'Downhill'\nelse:\n    status = 'Flat Land'\nprev = heights[1]\n\nfor i in range(2, 4):\n    if (heights[i] < prev and status == 'Uphill') or (heights[i] > prev and status == 'Downhill') or (heights[i] != prev and status == 'Flat Land'):\n        status = 'Unknown'\n        break\n    else:\n        prev = heights[i]\n\nprint(status)	-1	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9027584}	2018312058	58.122.118.89
48dc7802dce8ff8d116845c8e5166dc3	2	13	2021-01-04 02:25:19.287481+00	65	print(['NO','YES'][not({*input()}-{*"HINOSXZ"})])	0	{"err": null, "data": [{"error": 0, "memory": 8970240, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8867840, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8933376, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8986624}	2020711601	115.145.209.173
a84e78feb968a5b9a375a29dca77a734	2	13	2021-01-04 02:45:50.993483+00	25	h = input()\n\nList = ['H','I','N','O','S','X','Z']\nBol= 1\nfor i in range(len(h)):\n\tif h[i] not in List:\n\t\tprint('NO')\n        Bol = 0\nif Bol ==1:          \n\tprint("YES")	-2	{}	Python3	f	{"score": 0, "err_info": "Sorry: TabError: inconsistent use of tabs and spaces in indentation (solution.py, line 8)"}	2020313223	221.143.30.115
6dc5ed5fad431c7a4e7c7393975264a2	2	16	2021-01-04 02:47:58.928432+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t// 다음 단계\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = 100000;\n\n\tfor (auto it = areaSum[N].begin(); it != areaSum[N].end(); it++) {\n\t\tif (it->first == M) {\n\t\t\tfound = true;\n\t\t\tif (min > it->second) {\n\t\t\t\tmin = it->second;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (found) {\n\t\tcout << min;\n\t\treturn 0;\n\t}\n\telse {\n\t\tcout << -1;\n\t\treturn 0;\n\t}\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4513792, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 9474048, "output": null, "result": 4, "signal": 11, "cpu_time": 35, "exit_code": 0, "real_time": 111, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8839168, "output": null, "result": 4, "signal": 11, "cpu_time": 31, "exit_code": 0, "real_time": 104, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4362240, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3424256, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3334144, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 4083712, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 6623232, "output": null, "result": 4, "signal": 11, "cpu_time": 15, "exit_code": 0, "real_time": 88, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7290880, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 35, "memory_cost": 9474048}	2011314262	211.218.8.61
ff91015b54f51a9782ae20c9eebe3517	2	17	2021-01-04 04:06:43.62592+00	65	#include<bits/stdc++.h>\nint n,z=0,Q,A[26][1<<20],D[26][1<<20],B[1<<20][2];char c[1<<20];\nvoid u(int*a,int*d,int x, int v)\n{\n    int t=v-a[x];a[x]=v;\n    for(;x<=n;x+=x&-x)d[x]+=t;\n}\nint q(int*d,int x){\n    int t=0;\n    for(;x;x&=x-1)t+=d[x];\n    return t;\n}\nint U(int v, int w)\n{\n    for(int i=0;i<26;i++){\n        if(q(D[i],w)-q(D[i],v-1)>1){\n            int k,t;scanf("%d",&k);t=c[k-1]-97;\n            u(A[t],D[t],k,0);z+=1;\n            return 1;\n        }\n    }\n    return 0;\n}\nint main()\n{\n    scanf("%s%d",c,&Q);n=strlen(c);\n    for(int i=0;i<n;i++){int t=c[i]-97;u(A[t],D[t],i+1,1);}\n    for(int i=0;i<Q;i++){scanf("%d%d",&B[i][0],&B[i][1]);}\n    for(int i=0;i<Q;i++){int v=B[i][0],w=B[i][1];for(;U(v,w););}\n    printf("%d",z);\n}	0	{"err": null, "data": [{"error": 0, "memory": 3670016, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3678208, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 25456640, "output": null, "result": 0, "signal": 0, "cpu_time": 82, "exit_code": 0, "real_time": 95, "test_case": "4", "output_md5": "023fcbb6cc093f6f06e0cfcb02565a48"}, {"error": 0, "memory": 7745536, "output": null, "result": 0, "signal": 0, "cpu_time": 68, "exit_code": 0, "real_time": 73, "test_case": "5", "output_md5": "d800c6cf5d304e013ec4f95ab772d62e"}, {"error": 0, "memory": 6135808, "output": null, "result": 0, "signal": 0, "cpu_time": 103, "exit_code": 0, "real_time": 112, "test_case": "6", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 3792896, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "34ed066df378efacc9b924ec161e7639"}, {"error": 0, "memory": 3682304, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "7fe1f8abaad094e0b5cb1b01d712f708"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "3cf166c6b73f030b4f67eeaeba301103"}, {"error": 0, "memory": 3919872, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "8dd48d6a2e2cad213179a3992c0be53c"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "019d385eb67632a7e958e23f24bd07d7"}, {"error": 0, "memory": 3588096, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "12", "output_md5": "05f971b5ec196b8c65b75d2ef8267331"}, {"error": 0, "memory": 4288512, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "13", "output_md5": "8d9fc2308c8f28d2a7d2f6f48801c705"}, {"error": 0, "memory": 3751936, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "14", "output_md5": "ac5dab2e99eee9cf9ec672e383691302"}, {"error": 0, "memory": 3772416, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "15", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 4280320, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "16", "output_md5": "90599c8fdd2f6e7a03ad173e2f535751"}, {"error": 0, "memory": 3735552, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "17", "output_md5": "15d185eaa7c954e77f5343d941e25fbd"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "18", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 4411392, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "19", "output_md5": "dc16622ddc767e6bc1200fe5df2fbdfb"}, {"error": 0, "memory": 3813376, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "20", "output_md5": "90aef91f0d9e7c3be322bd7bae41617d"}, {"error": 0, "memory": 3727360, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 5357568, "output": null, "result": 0, "signal": 0, "cpu_time": 67, "exit_code": 0, "real_time": 72, "test_case": "22", "output_md5": "017335bad48f4cae20a7fb8201cc1323"}, {"error": 0, "memory": 5443584, "output": null, "result": 0, "signal": 0, "cpu_time": 74, "exit_code": 0, "real_time": 75, "test_case": "23", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 5275648, "output": null, "result": 0, "signal": 0, "cpu_time": 98, "exit_code": 0, "real_time": 99, "test_case": "24", "output_md5": "d1189a6e530de53bd545ae83f266820c"}, {"error": 0, "memory": 5337088, "output": null, "result": 0, "signal": 0, "cpu_time": 75, "exit_code": 0, "real_time": 76, "test_case": "25", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 25346048, "output": null, "result": 0, "signal": 0, "cpu_time": 84, "exit_code": 0, "real_time": 96, "test_case": "26", "output_md5": "8ecdbbf4ca2a3715337c02cb8d2ea4cc"}, {"error": 0, "memory": 7688192, "output": null, "result": 0, "signal": 0, "cpu_time": 76, "exit_code": 0, "real_time": 77, "test_case": "27", "output_md5": "a0e26081e098a15167d39b7194c5e467"}, {"error": 0, "memory": 6189056, "output": null, "result": 0, "signal": 0, "cpu_time": 78, "exit_code": 0, "real_time": 79, "test_case": "28", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 25427968, "output": null, "result": 0, "signal": 0, "cpu_time": 74, "exit_code": 0, "real_time": 87, "test_case": "29", "output_md5": "2b4226dd7ed6eb2d419b881f3ae9c97c"}, {"error": 0, "memory": 7786496, "output": null, "result": 0, "signal": 0, "cpu_time": 74, "exit_code": 0, "real_time": 75, "test_case": "30", "output_md5": "a195e29a87f723b4f0dc559794e86038"}, {"error": 0, "memory": 6164480, "output": null, "result": 0, "signal": 0, "cpu_time": 70, "exit_code": 0, "real_time": 75, "test_case": "31", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}]}	C++	f	{"time_cost": 103, "memory_cost": 25456640}	2020711601	115.145.209.173
904900838753a1282fb098a3ae0c2172	2	16	2021-01-03 22:16:04.483472+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\t// 정답 체킹\n\tbool found = false;\n\tint min = 2147483647;\n  \n\tfor (auto it = areaSum[N].begin(); it != areaSum[N].end(); it++) {\n\t\t//cout << it->first << ":" << it->second << endl;\n\t\tif (it->first == M) {\n\t\t\tfound = true;\n\t\t\tif (min > it->second) {\n\t\t\t\tmin = it->second;\n\t\t\t}\n\t\t\t//cout << "M:" << it->first << endl;\n\t\t\t//cout << "Answer:" << it->second << endl;\n\t\t}\n\t}\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3452928, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 4304896, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9334784, "output": null, "result": 4, "signal": 11, "cpu_time": 36, "exit_code": 0, "real_time": 109, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8949760, "output": null, "result": 4, "signal": 11, "cpu_time": 33, "exit_code": 0, "real_time": 104, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4173824, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3563520, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3604480, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3461120, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3657728, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 4096000, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 6586368, "output": null, "result": 4, "signal": 11, "cpu_time": 13, "exit_code": 0, "real_time": 88, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7065600, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 24, "test_case": "12", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	C++	f	{"time_cost": 36, "memory_cost": 9334784}	2011314262	211.218.8.61
da7e0a183879365caeb50f2fb02ba0bc	2	12	2021-01-04 01:42:26.370203+00	59	array_input = list()\narray_diff = list()\nfor i in range(4):\n  array_input.append(int(input()))\n  if i > 0:\n    array_diff.append(array_input[i]-array_input[i-1])\nif min(array_diff) > 0 and max(array_diff) > 0:\n  print("Uphill")\nelif min(array_diff) < 0 and max(array_diff) < 0:\n  print("Downhill")\nelse:\n  print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 8892416, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8994816}	2015310874	218.237.108.150
b83aedbe8e2d382591d8eae4ff6420b3	2	13	2021-01-04 02:07:15.315162+00	62	#include<iostream>\n\nint main(){\n    int can = 0;\n    std::string s;\n    std::cin >> s;\n    for(int i = 0; i < s.size(); ++i)\n        can += (s[i] != 'H' &&\n                s[i] != 'I' &&\n                s[i] != 'N' &&\n                s[i] != 'O' &&\n                s[i] != 'S' &&\n                s[i] != 'X' &&\n                s[i] != 'Z') ? 1 : 0;\n    if(can == 0)\n        printf("YES");\n    else \n        printf("NO");\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3354624, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3702784}	2019314665	115.23.186.96
70e90b7b0e931a3fd088ec946ca8e4c2	2	14	2021-01-04 02:32:21.234956+00	65	from itertools import*\nn,*l=map(int,open(0))\nprint(max(max(len([*w])for v,w in groupby(j for j in l if j!=i))for i in{*l}))	0	{"err": null, "data": [{"error": 0, "memory": 9191424, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9158656, "output": null, "result": 0, "signal": 0, "cpu_time": 260, "exit_code": 0, "real_time": 265, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9129984, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9207808, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9232384, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9203712, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9195520, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 18, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9220096, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9117696, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 22, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9216000, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9089024, "output": null, "result": 0, "signal": 0, "cpu_time": 29, "exit_code": 0, "real_time": 34, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9125888, "output": null, "result": 0, "signal": 0, "cpu_time": 40, "exit_code": 0, "real_time": 46, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9265152, "output": null, "result": 0, "signal": 0, "cpu_time": 127, "exit_code": 0, "real_time": 131, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9306112, "output": null, "result": 0, "signal": 0, "cpu_time": 187, "exit_code": 0, "real_time": 197, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9232384, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 16, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9224192, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9142272, "output": null, "result": 0, "signal": 0, "cpu_time": 42, "exit_code": 0, "real_time": 47, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9207808, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 9232384, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 22, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 9158656, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 32, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 9322496, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 29, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9158656, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 23, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 260, "memory_cost": 9322496}	2020711601	115.145.209.173
6c6beb9173e8cb655fc762d0cd02098b	2	13	2021-01-04 02:46:24.820845+00	25	h = input()\n\nList = ['H','I','N','O','S','X','Z']\nBol= 1\nfor i in range(len(h)):\n    if h[i] not in List:\n        print('NO')\n        Bol = 0\nif Bol ==1:          \n    print("YES")	-1	{"err": null, "data": [{"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8904704, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "9d762d3b96b04534bd794cb8e15960f8"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "8", "output_md5": "646da0df850e1bf42ee11fcce0fa17ac"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 11, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9031680}	2020313223	221.143.30.115
b1ab798dda303bc1ff6bbe644e4dded4	2	15	2021-01-04 03:48:20.820183+00	63	#include <iostream>\n#include <vector>\n#include <set>\n\nusing namespace std;\n\nint main(){\n        int memberNum, relationNum;\n        cin >>memberNum >>relationNum;\n        vector<int> debt;\n        for(int i=0;i<memberNum;i++){\n                int tempDebt;\n                cin >>tempDebt;\n                debt.push_back(tempDebt);\n        }\n        vector<set<int>> connected;\n        set<int> temp = {0};\n        connected.push_back(temp);\n        for(int i=0;i<relationNum;i++){\n                int first, second;\n                cin >>first >>second;\n                int size = connected.size();\n                for(int j=0;j<size;j++){\n                        if(connected[j].find(first) != connected[j].end()){\n                                connected[j].insert(second);\n                                break;\n                        }\n                        else if(connected[j].find(second) != connected[j].end()){\n                                connected[j].insert(first);\n                                break;\n                        }\n                        else{\n                                set<int> addTemp;\n                                addTemp.insert(first);\n                                addTemp.insert(second);\n                                connected.push_back(addTemp);\n                        }\n                }\n        }\n  \n  \t\tset<int>::iterator iter;\n        int possible = 1;\n        int size = connected.size();\n        for(int i=0;i<size;i++){\n                int sum = 0;\n                for(iter = connected[i].begin(); iter != connected[i].end(); iter++){\n                        int index = *iter;\n                        sum += debt[index];\n                }\n                if(sum != 0){\n                        possible = 0;\n                        break;\n                }\n        }\n\n        if(possible == 1)\n                cout <<"POSSIBLE" <<endl;\n        else if(possible == 0)\n                cout <<"IMPOSSIBLE" <<endl;\n        return 0;\n}	3	{"err": null, "data": [{"error": 0, "memory": 485203968, "output": null, "result": 3, "signal": 31, "cpu_time": 390, "exit_code": 0, "real_time": 638, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 485236736, "output": null, "result": 3, "signal": 31, "cpu_time": 391, "exit_code": 0, "real_time": 717, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 485220352, "output": null, "result": 3, "signal": 31, "cpu_time": 388, "exit_code": 0, "real_time": 717, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 485249024, "output": null, "result": 3, "signal": 31, "cpu_time": 408, "exit_code": 0, "real_time": 684, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 485216256, "output": null, "result": 3, "signal": 31, "cpu_time": 383, "exit_code": 0, "real_time": 705, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 485244928, "output": null, "result": 3, "signal": 31, "cpu_time": 372, "exit_code": 0, "real_time": 655, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 485216256, "output": null, "result": 3, "signal": 31, "cpu_time": 371, "exit_code": 0, "real_time": 693, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 485146624, "output": null, "result": 3, "signal": 31, "cpu_time": 385, "exit_code": 0, "real_time": 712, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 485294080, "output": null, "result": 3, "signal": 31, "cpu_time": 368, "exit_code": 0, "real_time": 707, "test_case": "9", "output_md5": null}]}	C++	f	{"time_cost": 408, "memory_cost": 485294080}	2014311686	220.118.98.98
4e31963ce4a2712d035118e8dfeee5e8	2	13	2021-01-04 04:04:28.000674+00	47	#include <iostream>\n#include <string>\nusing namespace std;\nint main(){\n  string s;\n  cin >> s;\n  int key = 0;\n  for(int i = 0; i < s.length(); i++){\n    if(s[i] != 'H' && s[i] != 'I' && s[i] != 'N' && s[i] == 'O' && s[i] == 'S' && s[i] == 'X' && s[i] == 'Z'){\n      key = 1;\n      break;\n    }\n  }\n  if(key == 1) {cout << "NO";}\n  else {cout << "YES"; }\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3620864, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3436544, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3469312, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3575808, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3465216, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3461120, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3428352, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "7469a286259799e5b37e5db9296f00b3"}]}	C++	f	{"time_cost": 2, "memory_cost": 3620864}	2020312552	121.168.152.64
c1294b40649078d7a5504e1cf383be21	2	16	2021-01-03 22:16:13.866796+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\t// 정답 체킹\n\tbool found = false;\n\tint min = 2147483647;\n  \n\tfor (auto it = areaSum[N].begin(); it != areaSum[N].end(); it++) {\n\t\t//cout << it->first << ":" << it->second << endl;\n\t\tif (it->first == M) {\n\t\t\tfound = true;\n\t\t\tif (min > it->second) {\n\t\t\t\tmin = it->second;\n\t\t\t}\n\t\t\t//cout << "M:" << it->first << endl;\n\t\t\t//cout << "Answer:" << it->second << endl;\n\t\t}\n\t}\n  \n\tif (found) {\n\t\t//cout << "Last Answer: "<< min << endl;\n\t\treturn min;\n\t}\n\telse {\n\t\t//cout << "Last Answer: " << -1 << endl;\n\t\treturn -1;\n\t}\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3538944, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 5, "real_time": 2, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 4116480, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 38, "real_time": 7, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9277440, "output": null, "result": 4, "signal": 11, "cpu_time": 32, "exit_code": 0, "real_time": 105, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9048064, "output": null, "result": 4, "signal": 11, "cpu_time": 36, "exit_code": 0, "real_time": 107, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4100096, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 255, "real_time": 7, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3596288, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 11, "real_time": 3, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3600384, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 21, "real_time": 2, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3457024, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 21, "real_time": 3, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3596288, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 50, "real_time": 3, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 3899392, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 105, "real_time": 6, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 6508544, "output": null, "result": 4, "signal": 11, "cpu_time": 20, "exit_code": 0, "real_time": 89, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 6873088, "output": null, "result": 4, "signal": 0, "cpu_time": 17, "exit_code": 138, "real_time": 21, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 36, "memory_cost": 9277440}	2011314262	211.218.8.61
52cd5d9591df58cdc1c601de1d2c6046	2	13	2021-01-04 11:03:38.369817+00	92	#include <stdio.h>\n#include <string.h>\n\nint main(void)\n{\n\tint i = 0;\n\tchar height[30];\t\n\tscanf("%s",height);\n\tint len = strlen(height);\n\tfor (i = 0;i< len; i++)\n\t{\n\t\tif ((height[i] == 'H') || (height[i] == 'I') || (height[i] == 'N') || (height[i] == 'O') || (height[i] == 'S') || (height[i] == 'X') || (height[i] == 'Z'))\n\t\t\tcontinue;\n\t\telse {\n\t\t\tprintf("NO");\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (i == len)\n\t\tprintf("YES");\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1695744, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1695744, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1699840}	2016314598	211.200.250.69
2e5b7411bacb06dd04b7a56032edca1b	2	16	2021-01-03 22:16:27.835766+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\t// 정답 체킹\n\tbool found = false;\n\tint min = 2147483647;\n  \n\treturn min;\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3395584, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 255, "real_time": 2, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 4112384, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 255, "real_time": 7, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9437184, "output": null, "result": 4, "signal": 11, "cpu_time": 38, "exit_code": 0, "real_time": 112, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9035776, "output": null, "result": 4, "signal": 11, "cpu_time": 41, "exit_code": 0, "real_time": 109, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4222976, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 255, "real_time": 5, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3493888, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 255, "real_time": 2, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3551232, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 255, "real_time": 2, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3649536, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 255, "real_time": 2, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3596288, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 255, "real_time": 3, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 4038656, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 255, "real_time": 5, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 6529024, "output": null, "result": 4, "signal": 11, "cpu_time": 17, "exit_code": 0, "real_time": 96, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 6889472, "output": null, "result": 4, "signal": 0, "cpu_time": 22, "exit_code": 255, "real_time": 23, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 41, "memory_cost": 9437184}	2011314262	211.218.8.61
e3e6f66cf7e135ac965cb544c8164488	2	12	2021-01-04 02:08:32.51333+00	62	#include<iostream>\n\nint main(){\n    int arr[4], slope[3], up = 0, down = 0;\n    scanf("%d %d %d %d", &arr[0], &arr[1], &arr[2], &arr[3]);\n    slope[0] = arr[1] - arr[0]; (slope[0] > 0) ? ++up : ++down;\n    slope[1] = arr[2] - arr[1]; (slope[1] > 0) ? ++up : ++down;\n    slope[2] = arr[3] - arr[2]; (slope[2] > 0) ? ++up : ++down;\n    if(slope[0] == 0 && slope[1] == 0 && slope[2] == 0)\n        printf("Flat Land");\n    else if(up == 3)\n        printf("Uphill");\n    else if(down == 3)\n        printf("Downhill");\n    else \n        printf("Unknown");\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3710976, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3682304, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3637248, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3710976}	2019314665	115.23.186.96
a66973a03627a61b56d53a43af888a39	2	12	2021-01-04 02:35:16.147919+00	32	#include<iostream>\n\nusing namespace std;\n\nint main()\n{\n\tint h[4];\n\tfor(int i=0;i<4;i++)\n\t{\n\t\tcin >> h[i];\n\t}\n\tif(h[0] < h[1] && h[1] < h[2] && h[2] < h[3])\n\t\tcout << "Uphill";\n\telse if(h[0] > h[1] && h[1] > h[2] && h[2] > h[3])\n\t\tcout << "Downhill";\n\telse if(h[0] == h[1] && h[1] == h[2] && h[2] == h[3])\n\t\tcout << "Flat Land";\n\telse cout << "Unknown";\n}	0	{"err": null, "data": [{"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3534848}	2020312218	61.255.225.91
bf1b0deb1acfe8d56e6955afda6e5cb8	2	16	2021-01-04 02:48:24.072243+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t// 다음 단계\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = 100000;\n\n\tfor (auto it = areaSum[N].begin(); it != areaSum[N].end(); it++) {\n\t\tif (it->first == M) {\n\t\t\tfound = true;\n\t\t\tif (min > it->second) {\n\t\t\t\tmin = it->second;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (found) {\n\t\tcout << min;\n\t}\n\telse {\n\t\tcout << -1;\n\t}\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4501504, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 9277440, "output": null, "result": 4, "signal": 11, "cpu_time": 35, "exit_code": 0, "real_time": 115, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8839168, "output": null, "result": 4, "signal": 11, "cpu_time": 37, "exit_code": 0, "real_time": 105, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4358144, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3600384, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 4128768, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 6578176, "output": null, "result": 4, "signal": 11, "cpu_time": 15, "exit_code": 0, "real_time": 93, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7262208, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 23, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 37, "memory_cost": 9277440}	2011314262	211.218.8.61
860a65e0bbe4973f60c7f52dc3c37f77	2	13	2021-01-04 03:05:39.052512+00	63	#include <iostream>\n#include <string>\n#include <set>\n\nusing namespace std;\n\nint main(){\n        set<char> rotate = {'H', 'I', 'N', 'O', 'S', 'X', 'Z'}  ;\n        string word;\n        cin >>word;\n        int len = word.length();\n        int possible = 1;\n        for(int i=0;i<len;i++){\n                char alpha = word[i];\n                if(rotate.find(alpha) == rotate.end()){\n                        possible = 0;\n                }\n        }\n\n        if(possible == 1)\n                cout <<"YES" <<endl;\n        else if(possible == 0)\n                cout <<"NO" <<endl;\n        return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3391488, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3391488, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3416064, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3637248}	2014311686	220.118.98.98
eda08ca48e9468bd90726e9f6d67d221	2	16	2021-01-03 22:16:34.130888+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\t// 정답 체킹\n\tbool found = false;\n\tint min = 214748364;\n  \n\treturn min;\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3473408, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 204, "real_time": 3, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 4210688, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 204, "real_time": 9, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9326592, "output": null, "result": 4, "signal": 11, "cpu_time": 38, "exit_code": 0, "real_time": 132, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8835072, "output": null, "result": 4, "signal": 11, "cpu_time": 28, "exit_code": 0, "real_time": 130, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4345856, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 204, "real_time": 8, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3444736, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 2, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3411968, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 2, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3633152, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 204, "real_time": 1, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3596288, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 204, "real_time": 2, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 4091904, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 204, "real_time": 6, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 6639616, "output": null, "result": 4, "signal": 11, "cpu_time": 19, "exit_code": 0, "real_time": 89, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 6946816, "output": null, "result": 4, "signal": 0, "cpu_time": 19, "exit_code": 204, "real_time": 19, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 38, "memory_cost": 9326592}	2011314262	211.218.8.61
8ea214319a1f7b36bbf9b95beabcd800	2	12	2021-01-04 01:43:59.620732+00	20	heights = []\n\nfor i in range(4):\n    heights.append(int(input()))\n\nstatus = None\nif heights[0] < heights[1]:\n    status = 'Uphill'\nelif heights[0] > heights[1]:\n    status = 'Downhill'\nelse:\n    status = 'Flat Land'\nprev = heights[1]\n\nfor i in range(2, 4):\n    if (heights[i] <= prev and status == 'Uphill') or (heights[i] >= prev and status == 'Downhill') or (heights[i] != prev and status == 'Flat Land'):\n        status = 'Unknown'\n        break\n    else:\n        prev = heights[i]\n\nprint(status)	0	{"err": null, "data": [{"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9105408}	2018312058	58.122.118.89
5fccc2b8c20a32c4da4b37f601da21ea	2	16	2021-01-03 22:16:39.727368+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\t// 정답 체킹\n\tbool found = false;\n\tint min = 214748364;\n  \n\treturn min;\n\n\t//return 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3616768, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 204, "real_time": 3, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 4345856, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 204, "real_time": 8, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9314304, "output": null, "result": 4, "signal": 11, "cpu_time": 38, "exit_code": 0, "real_time": 108, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9084928, "output": null, "result": 4, "signal": 11, "cpu_time": 32, "exit_code": 0, "real_time": 102, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4206592, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 204, "real_time": 7, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3563520, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 2, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3604480, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 2, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3596288, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 2, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3391488, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 204, "real_time": 1, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 4075520, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 204, "real_time": 5, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 6684672, "output": null, "result": 4, "signal": 11, "cpu_time": 14, "exit_code": 0, "real_time": 90, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 6905856, "output": null, "result": 4, "signal": 0, "cpu_time": 23, "exit_code": 204, "real_time": 23, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 38, "memory_cost": 9314304}	2011314262	211.218.8.61
90c21ee2eff875f7e38cf724ba39adb9	2	12	2021-01-04 02:09:27.949557+00	64	a=int(input())\nb=int(input())\nc=int(input())\nd=int(input())\n\ncount=0\nif a<b:\n    if b<c and c<d:\n        print("Uphill")\n    else:\n        count=1\nelif a>b:\n    if b>c and c>d:\n        print("Downhill")\n    else:\n        count=1\nelse:\n    if b==c and c==d:\n        print("Flat Land")\n    else:\n        count=1\nif count==1:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8896512, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8966144, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 14, "memory_cost": 9011200}	2017314804	113.199.59.51
8e154a0b95541b907168719b2212788c	2	16	2021-01-03 22:16:45.82866+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\t// 정답 체킹\n\tbool found = false;\n\tint min = 114748364;\n  \n\treturn min;\n\n\t//return 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3526656, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 204, "real_time": 2, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 4366336, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 204, "real_time": 6, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9408512, "output": null, "result": 4, "signal": 11, "cpu_time": 36, "exit_code": 0, "real_time": 110, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8896512, "output": null, "result": 4, "signal": 11, "cpu_time": 38, "exit_code": 0, "real_time": 109, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4202496, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 204, "real_time": 6, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3543040, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 2, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3473408, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 3, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3395584, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 2, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3420160, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 204, "real_time": 3, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 4096000, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 204, "real_time": 7, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 6422528, "output": null, "result": 4, "signal": 11, "cpu_time": 20, "exit_code": 0, "real_time": 89, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 6967296, "output": null, "result": 4, "signal": 0, "cpu_time": 23, "exit_code": 204, "real_time": 24, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 38, "memory_cost": 9408512}	2011314262	211.218.8.61
493cb9580659fa8670bd119e3be207ec	2	13	2021-01-04 11:46:37.580571+00	97	S = input()\nchars = "HINOSXZ"\noutput = "YES"\nfor i in S:\n  if not i in chars:\n    output = "NO"\n    break;\nprint(output)	0	{"err": null, "data": [{"error": 0, "memory": 8716288, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8818688, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8859648, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8847360, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 19, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8867840, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9011200}	2013314222	125.176.139.181
fdee80240e75853fe30eba32fdf850a0	2	16	2021-01-03 22:17:36.393512+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\t// 정답 체킹\n\t//bool found = false;\n\tint min = 10000;\n  \n\treturn min;\n\n\t//return 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3452928, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 16, "real_time": 2, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 4362240, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 16, "real_time": 7, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9289728, "output": null, "result": 4, "signal": 11, "cpu_time": 30, "exit_code": 0, "real_time": 111, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9003008, "output": null, "result": 4, "signal": 11, "cpu_time": 28, "exit_code": 0, "real_time": 106, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4190208, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 16, "real_time": 9, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3473408, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 16, "real_time": 3, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3485696, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 16, "real_time": 3, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3461120, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 16, "real_time": 3, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3416064, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 16, "real_time": 2, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 3903488, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 16, "real_time": 5, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 6508544, "output": null, "result": 4, "signal": 11, "cpu_time": 11, "exit_code": 0, "real_time": 87, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 6909952, "output": null, "result": 4, "signal": 0, "cpu_time": 18, "exit_code": 16, "real_time": 22, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 30, "memory_cost": 9289728}	2011314262	211.218.8.61
40e277b863c0ed960e4f276f8978e279	2	16	2021-01-03 22:17:43.812927+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\t// 정답 체킹\n\t//bool found = false;\n\tint min = 9000;\n  \n\treturn min;\n\n\t//return 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3633152, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 2, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 4370432, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 40, "real_time": 8, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9396224, "output": null, "result": 4, "signal": 11, "cpu_time": 40, "exit_code": 0, "real_time": 109, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8929280, "output": null, "result": 4, "signal": 11, "cpu_time": 36, "exit_code": 0, "real_time": 106, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4304896, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 40, "real_time": 7, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3612672, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 40, "real_time": 2, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3526656, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 3, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3465216, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 2, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3506176, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 3, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 3919872, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 5, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 6590464, "output": null, "result": 4, "signal": 11, "cpu_time": 11, "exit_code": 0, "real_time": 87, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7012352, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 40, "real_time": 21, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 40, "memory_cost": 9396224}	2011314262	211.218.8.61
cb89c69223595e1adbe8f8fa803b9687	2	12	2021-01-04 04:47:40.962111+00	71	#include <iostream>\n\n#define MAX(A,B) A>B?A:B;\n#define MIN(A,B) A<B?A:B;\nusing namespace std;\n\nint main()\n{\n\tint input[4];\n\tbool upH = true, downH = true, flat = true;\n\tfor (int i = 0; i < 4; i++)\n\t{\n\t\tcin >> input[i];\n\t\tif (i > 0)\n\t\t{\n\t\t\tif (input[i] > input[i - 1])\n\t\t\t{\n\t\t\t\tflat = false;\n\t\t\t\tdownH = false;\n\t\t\t}\n\t\t\telse if (input[i] < input[i - 1])\n\t\t\t{\n\t\t\t\tflat = false;\n\t\t\t\tupH = false;\n\t\t\t}\n\t\t\telse if (input[i] == input[i - 1])\n\t\t\t{\n\t\t\t\tupH = false;\n\t\t\t\tdownH = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (upH)\n\t{\n\t\tcout << "Uphill";\n\t}\n\telse if (downH)\n\t{\n\t\tcout << "Downhill";\n\t}\n\telse if (flat)\n\t{\n\t\tcout << "Flat Land";\n\t}\n\telse \n\t{\n\t\tcout << "Unknown";\n\t}\n}	0	{"err": null, "data": [{"error": 0, "memory": 3252224, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3354624, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3457024, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3526656}	2015310673	112.169.201.58
52bf2304f0c6554ea9922e6b0b476ff3	2	16	2021-01-03 22:17:50.991994+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\t// 정답 체킹\n\t//bool found = false;\n\t//int min = 9000;\n  \n\treturn 0;\n\n\t//return 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3395584, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 4116480, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 6, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9306112, "output": null, "result": 4, "signal": 11, "cpu_time": 35, "exit_code": 0, "real_time": 136, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8962048, "output": null, "result": 4, "signal": 11, "cpu_time": 31, "exit_code": 0, "real_time": 137, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4222976, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3473408, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3559424, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3543040, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3407872, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3923968, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "10", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 6619136, "output": null, "result": 4, "signal": 11, "cpu_time": 16, "exit_code": 0, "real_time": 84, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7012352, "output": null, "result": -1, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 22, "test_case": "12", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	C++	f	{"time_cost": 35, "memory_cost": 9306112}	2011314262	211.218.8.61
eda93aa24f6fc225538b82c609abb412	2	12	2021-01-04 02:12:11.767428+00	62	#include<iostream>\n\nint main(){\n    int arr[4], slope[3], up = 0, down = 0;\n    scanf("%d %d %d %d", &arr[0], &arr[1], &arr[2], &arr[3]);\n    slope[0] = arr[1] - arr[0]; (slope[0] > 0) ? ++up : ++down;\n    slope[1] = arr[2] - arr[1]; (slope[1] > 0) ? ++up : ++down;\n    slope[2] = arr[3] - arr[2]; (slope[2] > 0) ? ++up : ++down;\n    (slope[0] == 0) ? --down : down;\n    (slope[1] == 0) ? --down : down;\n    (slope[2] == 0) ? --down : down;\n    if(slope[0] == 0 && slope[1] == 0 && slope[2] == 0)\n        printf("Flat Land");\n    else if(up == 3)\n        printf("Uphill");\n    else if(down == 3)\n        printf("Downhill");\n    else \n        printf("Unknown");\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3702784}	2019314665	115.23.186.96
a1b50e6aa1cc9eed4925b0a4bb8d9fee	2	16	2021-01-03 22:17:57.402452+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n  \n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n  \n\t// 정답 체킹\n\t//bool found = false;\n\t//int min = 9000;\n  \n\treturn 9000;\n\n\t//return 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3489792, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 3, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 4308992, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 40, "real_time": 7, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9388032, "output": null, "result": 4, "signal": 11, "cpu_time": 36, "exit_code": 0, "real_time": 110, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8896512, "output": null, "result": 4, "signal": 11, "cpu_time": 38, "exit_code": 0, "real_time": 111, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4362240, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 40, "real_time": 7, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3534848, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 40, "real_time": 3, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3407872, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 40, "real_time": 2, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3637248, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 2, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3641344, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 40, "real_time": 2, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 3633152, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 40, "real_time": 5, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 6520832, "output": null, "result": 4, "signal": 11, "cpu_time": 22, "exit_code": 0, "real_time": 94, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 6918144, "output": null, "result": 4, "signal": 0, "cpu_time": 19, "exit_code": 40, "real_time": 24, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 38, "memory_cost": 9388032}	2011314262	211.218.8.61
30d6834c341bde1a9f258e41cfaf5b9e	2	12	2021-01-04 02:37:34.308571+00	33	#include <stdio.h>\n\n# define TRUE\t1\n# define FALSE\t0\n\nint main(void)\n{\n\tint\theight[4];\n\tint\tisUphill = TRUE;\n\tint\tisDownhill = TRUE;\n\tint isFlat = TRUE;\n\n\tfor (int i = 0; i < 4; i++)\n\t\tscanf("%d", &height[i]);\n\tfor (int i = 1; i < 4; i++)\n\t{\n\t\tif (height[i] <= height[i - 1])\n\t\t\tisUphill = FALSE;\n\t\tif (height[i] >= height[i - 1])\n\t\t\tisDownhill = FALSE;\n\t\tif (height[i] != height[i - 1])\n\t\t\tisFlat = FALSE;\n\t}\n\tif (isUphill)\n\t\tprintf("Uphill");\n\telse if (isDownhill)\n\t\tprintf("Downhill");\n\telse if (isFlat)\n\t\tprintf("Flat Land");\n\telse\n\t\tprintf("Unknown");\n    return (1);\n}	4	{"err": null, "data": [{"error": 0, "memory": 1630208, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 1, "real_time": 2, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 1683456, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 1, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 1703936, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 1, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 1601536, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 1, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 1703936, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 1, "test_case": "5", "output_md5": null}]}	C	f	{"time_cost": 1, "memory_cost": 1703936}	2015313375	175.196.189.112
9497e41b73a7296c285bcb007268ea2f	2	16	2021-01-04 02:47:28.687396+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t//cout << "Tile Length: " << curTileLength << endl;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t//for (auto it = areaSum[1].begin(); it != areaSum[1].end(); it++) {\n\t//\tcout << "M:" << it->first << endl;\n\t//\tcout << "Answer:" << it->second << endl;\n\t//}\n\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\t\t\t\t\t//cout << "Prev: " << areaSum[curIt][curArea] << endl;\n\t\t\t\t\t//cout << "Cur: " << tempCostSum << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t//cout << "Insert: " << curArea << " " << tempCostSum << endl;\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = 100000;\n\n\tif (found) {\n\t\tcout << min;\n\t}\n\telse {\n\t\tcout << -1;\n\t}\n\n\treturn 0;//정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3493888, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4513792, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9277440, "output": null, "result": 4, "signal": 11, "cpu_time": 34, "exit_code": 0, "real_time": 107, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8892416, "output": null, "result": 4, "signal": 11, "cpu_time": 35, "exit_code": 0, "real_time": 105, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4366336, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3571712, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3411968, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3641344, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3477504, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4149248, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 6623232, "output": null, "result": 4, "signal": 11, "cpu_time": 9, "exit_code": 0, "real_time": 87, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7176192, "output": null, "result": -1, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 24, "test_case": "12", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}]}	C++	f	{"time_cost": 35, "memory_cost": 9277440}	2011314262	211.218.8.61
acc5be197614aa607973a192628ab100	2	15	2021-01-04 03:56:12.510435+00	63	#include <iostream>\n#include <vector>\n#include <set>\n\nusing namespace std;\n\nint main(){\n        int memberNum, relationNum;\n        cin >>memberNum >>relationNum;\n        vector<int> debt;\n        for(int i=0;i<memberNum;i++){\n                int tempDebt;\n                cin >>tempDebt;\n                debt.push_back(tempDebt);\n        }\n        vector<set<int>> connected;\n        set<int> temp = {0};\n        connected.push_back(temp);\n        for(int i=0;i<relationNum;i++){\n                int first, second;\n                cin >>first >>second;\n                int size = connected.size();\n                for(int j=0;j<size;j++){\n                        if(connected[j].find(first) != connected[j].end() || connected[j].find(second) != connected[j].end()){\n                                connected[j].insert(second);\n                          \t\tconnected[j].insert(first);\n                                break;\n                        }\n                        else{\n                                set<int> addTemp;\n                                addTemp.insert(first);\n                                addTemp.insert(second);\n                                connected.push_back(addTemp);\n                        }\n                }\n        }\n  \n  \t\tset<int>::iterator iter;\n        int possible = 1;\n        int size = connected.size();\n        for(int i=0;i<size;i++){\n                int sum = 0;\n                for(iter = connected[i].begin(); iter != connected[i].end(); iter++){\n                        int index = *iter;\n                        sum += debt[index];\n                }\n                if(sum != 0){\n                        possible = 0;\n                        break;\n                }\n        }\n\n        if(possible == 1)\n                cout <<"POSSIBLE" <<endl;\n        else if(possible == 0)\n                cout <<"IMPOSSIBLE" <<endl;\n        return 0;\n}	3	{"err": null, "data": [{"error": 0, "memory": 485371904, "output": null, "result": 3, "signal": 31, "cpu_time": 376, "exit_code": 0, "real_time": 632, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 485203968, "output": null, "result": 3, "signal": 31, "cpu_time": 401, "exit_code": 0, "real_time": 676, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 485019648, "output": null, "result": 3, "signal": 31, "cpu_time": 401, "exit_code": 0, "real_time": 709, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 485240832, "output": null, "result": 3, "signal": 31, "cpu_time": 421, "exit_code": 0, "real_time": 705, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 485203968, "output": null, "result": 3, "signal": 31, "cpu_time": 420, "exit_code": 0, "real_time": 722, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 485154816, "output": null, "result": 3, "signal": 31, "cpu_time": 412, "exit_code": 0, "real_time": 686, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 485265408, "output": null, "result": 3, "signal": 31, "cpu_time": 415, "exit_code": 0, "real_time": 715, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 485371904, "output": null, "result": 3, "signal": 31, "cpu_time": 379, "exit_code": 0, "real_time": 702, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 485298176, "output": null, "result": 3, "signal": 31, "cpu_time": 425, "exit_code": 0, "real_time": 717, "test_case": "9", "output_md5": null}]}	C++	f	{"time_cost": 425, "memory_cost": 485371904}	2014311686	220.118.98.98
cb1c541071b8407acff827159903c9d9	2	14	2021-01-04 07:51:41.280874+00	68	#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n, m[1005];\nvector<int> lst;\n\nint solve(int v)\n{\n    int prev=-1, cnt=1, ret=0;\n    for(int i=1 ; i<=n ; i++){\n        if(m[i]==v) continue;\n        if(m[i]==prev) cnt++;\n        else cnt=1;\n        m[i]=prev; ret=max(ret,cnt);\n    }\n    return ret;\n}\n\nint main()\n{\n    int ans=0;\n    scanf("%d",&n);\n    for(int i=1 ; i<=n ; i++){\n        scanf("%d",&m[i]); lst.push_back(m[i]);\n    }\n    sort(lst.begin(),lst.end());\n    lst.erase(unique(lst.begin(),lst.end()),lst.end());\n    for(int v : lst) ans=max(ans,solve(v));\n    printf("%d",ans);\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3649536, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "d3d9446802a44259755d38e6d163e820"}, {"error": 0, "memory": 3670016, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 5, "test_case": "2", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3743744, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3624960, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3645440, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "38b3eff8baf56627478ec76a704e9b52"}, {"error": 0, "memory": 3665920, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "38b3eff8baf56627478ec76a704e9b52"}, {"error": 0, "memory": 3633152, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "38b3eff8baf56627478ec76a704e9b52"}, {"error": 0, "memory": 3756032, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3706880, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3649536, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3813376, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3653632, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3702784, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "13", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3645440, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3817472, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3747840, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "16", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3698688, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3702784, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "18", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3641344, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3624960, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "20", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3760128, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}, {"error": 0, "memory": 3637248, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "b8c37e33defde51cf91e1e03e51657da"}]}	C++	f	{"time_cost": 3, "memory_cost": 3817472}	2018312723	39.7.47.101
9f5b50ec1d3c9959183d2b11765c6495	2	16	2021-01-04 02:50:58.198346+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t// 다음 단계\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = 100000;\n\n\n\n\tif (found) {\n\t\tcout << min;\n\t}\n\telse {\n\t\tcout << -1;\n\t}\n\n\treturn 0; //정상종료시 반드시 0을 리턴해야합니다.\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3371008, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4366336, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "2", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9338880, "output": null, "result": 4, "signal": 11, "cpu_time": 38, "exit_code": 0, "real_time": 110, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8908800, "output": null, "result": 4, "signal": 11, "cpu_time": 35, "exit_code": 0, "real_time": 107, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4362240, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3584000, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3502080, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3522560, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3567616, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4108288, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "10", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 6586368, "output": null, "result": 4, "signal": 11, "cpu_time": 18, "exit_code": 0, "real_time": 87, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7114752, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 21, "test_case": "12", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}]}	C++	f	{"time_cost": 38, "memory_cost": 9338880}	2011314262	211.218.8.61
dc03024d05a41a7f8f8ae18ee845583d	2	12	2021-01-04 04:36:27.39343+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 2e2 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nint x, y, z, q;\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\tci(x >> y >> z >> q);\n\n\tif (x == y && y == z && z == q) co("Flat Land");\n\telse if (x < y && y < z && z < q) co("Uphill");\n\telse if (x > y&& y > z&& z > q)co("Downhill");\n\telse co("Unknown");\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3387392, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3559424}	2018314788	115.145.246.12
4ee2ae70582ffc46894261eed96af475	2	16	2021-01-04 02:51:05.929841+00	57	/////////////////////////////////////////////////////////////////////////////////////////////\n// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의\n// 아래 표준 입출력 예제 필요시 참고하세요.\n// 표준 입력 예제\n// int a;\n// float b, c;\n// double d, e, f;\n// char g;\n// char var[256];\n// long long AB;\n// cin >> a;                            // int 변수 1개 입력받는 예제\n// cin >> b >> c;                       // float 변수 2개 입력받는 예제 \n// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제\n// cin >> g;                            // char 변수 1개 입력받는 예제\n// cin >> var;                          // 문자열 1개 입력받는 예제\n// cin >> AB;                           // long long 변수 1개 입력받는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n// 표준 출력 예제\n// int a = 0;                            \n// float b = 1.0, c = 2.0;               \n// double d = 3.0, e = 0.0; f = 1.0;\n// char g = 'b';\n// char var[256] = "ABCDEFG";\n// long long AB = 12345678901234567L;\n// cout << a;                           // int 변수 1개 출력하는 예제\n// cout << b << " " << c;               // float 변수 2개 출력하는 예제\n// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제\n// cout << g;                           // char 변수 1개 출력하는 예제\n// cout << var;                         // 문자열 1개 출력하는 예제\n// cout << AB;                          // long long 변수 1개 출력하는 예제\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n#include<iostream>\n#include<vector>\n#include<algorithm>\n#include<unordered_map>\n\nusing namespace std;\n\nint main(int argc, char** argv)\n{\n\tint N, M;\n\tvector<int> A;\n\n\tcin >> N >> M;\n\n\t/*\n\t   N개의 타일 입력\n\t*/\n\tA.push_back(-1);\n\tfor (int i = 0; i < N; ++i)\n\t{\n\t\tint temp;\n\t\tcin >> temp;\n\t\tA.push_back(temp);\n\t}\n\n\tsort(A.begin(), A.end());\n\n\tvector<unordered_map<int, int>> lastLength(10);\n\tvector<unordered_map<int, int>> areaSum(10);\n\n\tint curTileLength = A[1];\n\tint curIt = 1;\n\n\t// 첫번째 단계\n\tfor (int i = 1; i <= 100; ++i)\n\t{\n\t\tint itTileLength = i;\n\t\tint curArea = itTileLength * itTileLength;\n\t\tif (curArea > M) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// 타일 가격 차이\n\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\ttileDiffCost *= tileDiffCost;\n\t\t\n\t\tlastLength[1][curArea] = i;\n\t\tareaSum[1][curArea]= tileDiffCost;\n\t}\n\n\t// 다음 단계\n\twhile (N > curIt) {\n\t\t++curIt;\n\t\t//cout << "CURRENT ITERATION: " << curIt << endl;\n\n\t\t// 이번 타일 길이\n\t\tcurTileLength = A[curIt];\n\n\t\t// 이전 단계 타일 이터레이션\n\t\tfor (auto it = areaSum[curIt - 1].begin(); it != areaSum[curIt - 1].end(); it++) {\n\t\t\t//cout << "Iteration: " << it->first << endl;\n\n\t\t\t// 이번 단계 타일 이터레이션\n\t\t\tfor (int i = lastLength[curIt-1][it->first]; i <= 100; ++i) {\n\t\t\t\t//cout << "i: " << i << endl;\n\n\t\t\t\tint itTileLength = i;\n\t\t\t\tint curTileArea = i * i;\n\t\t\t\t// 현재 합은 이전 단계의 넓이 + 현재 타일의 넓이\n\t\t\t\tint curArea = it->first + curTileArea;\n\n\t\t\t\t// 너무 크면 다음 이전 단계 타일로\n\t\t\t\tif (curArea > M) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// 가격 차이\n\t\t\t\tint tileDiffCost = abs(curTileLength - itTileLength);\n\t\t\t\ttileDiffCost *= tileDiffCost;\n\n\t\t\t\tint tempCostSum = it->second + tileDiffCost;\n\n\t\t\t\tif (areaSum[curIt].find(curArea) != areaSum[curIt].end()) {\n\t\t\t\t\t//cout << "---Collision---" << endl;\n\n\t\t\t\t\tif (areaSum[curIt][curArea] > tempCostSum) {\n\t\t\t\t\t\t//cout << "Replaced!!" << endl;\n\t\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\t\tareaSum[curIt][curArea] = tempCostSum;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlastLength[curIt][curArea] = i;\n\t\t\t\t\tareaSum[curIt][curArea]=tempCostSum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 정답 체킹\n\tbool found = false;\n\tint min = 100000;\n\n\tfor (auto it = areaSum[N].begin(); it != areaSum[N].end(); it++) {\n\t\tif (it->first == M) {\n\t\t\tfound = true;\n\t\t\tif (min > it->second) {\n\t\t\t\tmin = it->second;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (found) {\n\t\tcout << min;\n\t}\n\telse {\n\t\tcout << -1;\n\t}\n\n\treturn 0; //정상종료시 반드시 0을 리턴해야합니다.\n}	4	{"err": null, "data": [{"error": 0, "memory": 3371008, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4513792, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 9351168, "output": null, "result": 4, "signal": 11, "cpu_time": 41, "exit_code": 0, "real_time": 113, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8990720, "output": null, "result": 4, "signal": 11, "cpu_time": 33, "exit_code": 0, "real_time": 107, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4476928, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3600384, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 4280320, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 6569984, "output": null, "result": 4, "signal": 11, "cpu_time": 16, "exit_code": 0, "real_time": 89, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7086080, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 21, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 41, "memory_cost": 9351168}	2011314262	211.218.8.61
b009583115ba055c9363a404441d1219	2	12	2021-01-04 04:51:20.633206+00	13	# Function definition\ndef upHill(h_list):\n    for i in range(3):\n        if h_list[i] >= h_list[i+1]:\n            return False\n    return True\n\ndef downHill(h_list):\n    for i in range(3):\n        if h_list[i] <= h_list[i+1]:\n            return False \n    return True\n\ndef flat(h_list):\n    for i in range(3):\n        if h_list[i] != h_list[i+1]:\n            return False\n    return True\n\n# MAIN\nif __name__ == '__main__':\n    h = []\n    for i in range(4):\n        h.append(input())\n    \n    if upHill(h) :\n        print('Uphill')\n    elif downHill(h):\n        print('Downhill')\n    elif flat(h):\n        print('Flat Land')\n    else:\n        print('Unknown')	-1	{"err": null, "data": [{"error": 0, "memory": 8908800, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8884224, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8859648, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8962048}	2017313120	116.124.1.90
ee80efe72574c9a60df727c683b9a08f	2	14	2021-01-04 04:56:39.131059+00	64	c=int(input())\ntemp=[]\nfor i in range(c):\n    number=int(input())\n    temp.append(number)\nkkk=set(temp)\nkkk=list(kkk)\nfact=[]\nfor i in kkk:\n    for j in range(temp.count(i)):\n        temp2=temp.copy()\n        temp2.remove(i)\n    count=1\n    for j in range(len(temp2)):\n        if j==0:\n            start=temp2[j]\n            number=1\n        else:\n            if start==temp2[j]:\n                number+=1\n            else:\n                if number>count:\n                    count=number\n                start=temp2[j]\n                number=1\n    if number>count:\n        count=number\n    fact.append(count)\nif len(temp)==1:\n    print(1)\nelse:\n    print(max(fact))	-1	{"err": null, "data": [{"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "1", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9064448, "output": null, "result": 0, "signal": 0, "cpu_time": 228, "exit_code": 0, "real_time": 236, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9080832, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 22, "test_case": "8", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 22, "test_case": "9", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 28, "test_case": "10", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 30, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8912896, "output": null, "result": 0, "signal": 0, "cpu_time": 37, "exit_code": 0, "real_time": 50, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9064448, "output": null, "result": 0, "signal": 0, "cpu_time": 114, "exit_code": 0, "real_time": 119, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 164, "exit_code": 0, "real_time": 168, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9134080, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 22, "test_case": "15", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9072640, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 22, "test_case": "16", "output_md5": "c9f0f895fb98ab9159f51fd0297e236d"}, {"error": 0, "memory": 9048064, "output": null, "result": -1, "signal": 0, "cpu_time": 35, "exit_code": 0, "real_time": 44, "test_case": "17", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 26, "test_case": "18", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 29, "test_case": "19", "output_md5": "45c48cce2e2d7fbdea1afc51c7c6ad26"}, {"error": 0, "memory": 8876032, "output": null, "result": -1, "signal": 0, "cpu_time": 33, "exit_code": 0, "real_time": 38, "test_case": "20", "output_md5": "c20ad4d76fe97759aa27a0c99bff6710"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 28, "test_case": "21", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 8970240, "output": null, "result": -1, "signal": 0, "cpu_time": 29, "exit_code": 0, "real_time": 30, "test_case": "22", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}]}	Python3	f	{"time_cost": 228, "memory_cost": 9134080}	2017314804	113.199.59.51
38ef6dbb09c2ffa74758665f8d8421f2	2	12	2021-01-04 04:36:39.698122+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 2e2 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nint x, y, z, q;\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\tci(x >> y >> z >> q);\n\n\tif (x == y && y == z && z == q) co("Flat Land");\n\telse if (x < y && y < z && z < q) co("Uphill");\n\telse if (x > y&& y > z&& z > q)co("Downhill");\n\telse co("Unknown");\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3612672}	2018314788	115.145.246.12
590d2c3a5261589668e534633d318b9f	2	12	2021-01-04 08:18:42.60642+00	80	a = input()\nb = input()\nc = input()\nd = input()\nif (a<b) and (b<c) and (c<d):\n  print('Uphill')\nelif (a>b) and (b>c) and (c>d):\n  print('Downhill')\nelif (a==b) and (b==c) and (c==d):\n  print("Flat Land")\nelse:\n  print("Unkown	-2	{}	Python3	f	{"score": 0, "err_info": "File \\"/judger/run/939c969865f74fb8829b2792f0e0804e/solution.py\\", line 12\\n    print(\\"Unkown\\n                ^\\nSyntaxError: EOL while scanning string literal"}	hdh12345	115.145.188.47
912031f70655c47e09f60af5b26fa34d	2	14	2021-01-04 05:01:22.808491+00	64	c=int(input())\ntemp=[]\nfor i in range(c):\n    number=int(input())\n    temp.append(number)\nkkk=set(temp)\nkkk=list(kkk)\nfact=[]\nfor i in kkk:\n    ya=temp.count(i)\n    if ya==len(temp):\n        print(len(temp))\n        count=3\n        break\n    temp2=temp.copy()\n    for j in range(ya):\n        temp2.remove(i)\n    count=1\n    print(temp2,temp.count(i))\n    for j in range(len(temp2)):\n        if j==0:\n            start=temp2[j]\n            number=1\n        else:\n            if start==temp2[j]:\n                number+=1\n            else:\n                if number>count:\n                    count=number\n                start=temp2[j]\n                number=1\n    if number>count:\n        count=number\n    fact.append(count)\nif count !=3:\n    if len(temp)==1:\n        print(1)\n    else:\n        print(max(fact))	-1	{"err": null, "data": [{"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "194d2288f438e64211c39bc7cdd51f28"}, {"error": 0, "memory": 9080832, "output": null, "result": -1, "signal": 0, "cpu_time": 268, "exit_code": 0, "real_time": 272, "test_case": "2", "output_md5": "f4864e50d0356ae18f14c99f45e0e0cb"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "8d9486275dd7414339915eb9c6c58fa7"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "3c60368ebcfec69c86efda5f3dfff343"}, {"error": 0, "memory": 9015296, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "b1610eb2fe08002dd4e937d2d7414639"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "6", "output_md5": "bd7c55022bd5eb30e55ba0f259a6cb6e"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "67b482b005c776c91809f303e55ca84f"}, {"error": 0, "memory": 9072640, "output": null, "result": -1, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 23, "test_case": "8", "output_md5": "fc59552968ff67049e586bc2981a9ee0"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 22, "test_case": "9", "output_md5": "763b817d2b54e19d1e25d66446b4eedb"}, {"error": 0, "memory": 9003008, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 25, "test_case": "10", "output_md5": "a1898657a7e183b23c228b053f62e118"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 27, "exit_code": 0, "real_time": 32, "test_case": "11", "output_md5": "5323025d8c55b6216d9316721be0b110"}, {"error": 0, "memory": 9056256, "output": null, "result": -1, "signal": 0, "cpu_time": 34, "exit_code": 0, "real_time": 47, "test_case": "12", "output_md5": "e722c8b2dfdea2dfeabf1f5340e59f7e"}, {"error": 0, "memory": 9134080, "output": null, "result": -1, "signal": 0, "cpu_time": 139, "exit_code": 0, "real_time": 147, "test_case": "13", "output_md5": "72a78ca02935a8152756686bb8179be7"}, {"error": 0, "memory": 9170944, "output": null, "result": -1, "signal": 0, "cpu_time": 195, "exit_code": 0, "real_time": 208, "test_case": "14", "output_md5": "ad8fa2a36f2a7234b50e9df53e849ced"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "15", "output_md5": "bd2a98596b2656eb6ec84ceeb274f364"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 20, "test_case": "16", "output_md5": "4138aa9f8619e2a4ffc19b548a22d2ea"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 41, "exit_code": 0, "real_time": 46, "test_case": "17", "output_md5": "6ce516801e526c0401a78f83887da8b0"}, {"error": 0, "memory": 9150464, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 24, "test_case": "18", "output_md5": "cfb55b11bf5662133e9723be74779c3f"}, {"error": 0, "memory": 9068544, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 27, "test_case": "19", "output_md5": "7b4df4f8d3c3b0295a6cc7229ba3a50e"}, {"error": 0, "memory": 9048064, "output": null, "result": -1, "signal": 0, "cpu_time": 27, "exit_code": 0, "real_time": 32, "test_case": "20", "output_md5": "86065829606372e69c1514f43394f0ca"}, {"error": 0, "memory": 9048064, "output": null, "result": -1, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 28, "test_case": "21", "output_md5": "7a29f27e26185fb5eb863f5c1be9b770"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 34, "test_case": "22", "output_md5": "4051e21d1ac8a469e3819d81e77722f5"}]}	Python3	f	{"time_cost": 268, "memory_cost": 9170944}	2017314804	113.199.59.51
c5126122b3d0de3cf7e81aec8c66a065	2	14	2021-01-04 05:06:31.594843+00	64	c=int(input())\ntemp=[]\nfor i in range(c):\n    number=int(input())\n    temp.append(number)\nkkk=set(temp)\nkkk=list(kkk)\nfact=[]\nfor i in kkk:\n    ya=temp.count(i)\n    temp2=temp.copy()\n    for j in range(ya):\n        temp2.remove(i)\n    count=1\n    #print(temp2,temp.count(i))\n    for j in range(len(temp2)):\n        if j==0:\n            start=temp2[j]\n            number=1\n        else:\n            if start==temp2[j]:\n                number+=1\n            else:\n                if number>count:\n                    count=number\n                start=temp2[j]\n                number=1\n    if number>count:\n        count=number\n    fact.append(count)\nif len(kkk)==1:\n    print(len(temp))\n    \nelif len(temp)==1:\n    print(1)\nelse:\n    print(max(fact))	0	{"err": null, "data": [{"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 230, "exit_code": 0, "real_time": 234, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 18, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9064448, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9076736, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 23, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 24, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 28, "exit_code": 0, "real_time": 29, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 36, "exit_code": 0, "real_time": 43, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8974336, "output": null, "result": 0, "signal": 0, "cpu_time": 115, "exit_code": 0, "real_time": 119, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9076736, "output": null, "result": 0, "signal": 0, "cpu_time": 152, "exit_code": 0, "real_time": 161, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 18, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 36, "exit_code": 0, "real_time": 41, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9084928, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 26, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 9134080, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 31, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 26, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 24, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 230, "memory_cost": 9134080}	2017314804	113.199.59.51
315131e070925a190b75a6fd1d3d6ae3	2	13	2021-01-04 05:59:24.151143+00	48	word_set = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\n\ns = input()\nfor ch in s:\n    if ch not in word_set:\n        print('NO')\n        exit()\nprint('YES')	0	{"err": null, "data": [{"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 20, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8818688, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 19, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8892416, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 11, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8822784, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 20, "memory_cost": 8953856}	2017314875	175.209.114.219
704f5ac63457e19442ec6b16c6b169e8	2	13	2021-01-04 07:30:16.546187+00	68	#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n;\nchar s[35];\n\nint main()\n{\n    scanf("%s",s); n=strlen(s);\n    for(int i=0 ; i<n ; i++){\n        if(s[i]!='H' && s[i]!='I' && s[i]!='N' && s[i]!='O' && s[i]!='S' && s[i]!='X' && s[i]!='Z'){\n            printf("NO");\n            return 0;\n        }\n    }\n    printf("YES");\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3567616, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3715072, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3665920, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3715072}	2018312723	39.7.47.101
34865be8c6a3d9c3b86bd71c0aa6877e	2	14	2021-01-04 03:17:11.333625+00	32	#include<iostream>\n#include<queue>\n#include<vector>\n#include<algorithm>\n\nusing namespace std;\n\nint main()\n{\n\tint N, num, i, j; cin >> N;\n\tvector<int> line;\n\tvector<int> a;\n\tqueue<int> q;\n\tfor(i=0;i<N;i++)\n\t{\n\t\tcin >> num;\n\t\tif(find(line.begin(), line.end(), num)== line.end())\n\t\t\ta.push_back(num);\n\t\tline.push_back(num);\n\t}\n\t\n\tint max = 0;\n\tfor(i=0;i<a.size();i++)\n\t{\n\t\tint a_i = a[i], pre = -1, temp, count=1;\n\t\tfor(j=0;j<line.size();j++)\n\t\t{\n\t\t\tif(line[j] != a_i)\n\t\t\t\tq.push(line[j]);\n\t\t}\n\t\twhile(!q.empty())\n\t\t{\n\t\t\ttemp = q.front();\n\t\t\tq.pop();\n\t\t\tif(pre == -1)\n\t\t\t{\n\t\t\t\tpre = temp;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(pre == temp)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tif(q.empty() && count > max)\n\t\t\t\t{\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(count > max) max = count;\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t\tpre = temp;\n\t\t}\n\t}\n\tcout<<max;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3383296, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3661824, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 8, "memory_cost": 3661824}	2020312218	61.255.225.91
2039cc37064dde1ae9eaed8a97ee0f10	2	12	2021-01-04 12:34:05.734361+00	107	a = int(input("처음"))\n  b = int(input("둘"))\n  c = int(input("셋"))\n  d = int(input("넷"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelse:\n  print("Unknown")	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/d5b85a6468a7434cb3c272437ae95a1a/main.c:1:5: error: expected expression before 'int'\\n a = int(input(\\"처음\\"))\\n     ^~~"}	2020311650	1.251.170.216
645704e99bb33c688112de157f84edeb	2	14	2021-01-04 03:17:15.718867+00	63	#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main(){\n        int len;\n        cin >>len;\n        vector<int> buy;\n        for(int i=0;i<len;i++){\n                int num;\n                cin >>num;\n                buy.push_back(num);\n        }\n        int max_result = 0;\n        for(int i=0;i<len;i++){\n                int first = buy[i];\n                int result = 1;\n                int diff = -1;\n                for(int j=i+1; j<len;j++){\n                        if(buy[j] == first){\n                                result ++;\n                        }\n                        else{\n                                if(diff == -1)\n                                        diff = buy[j];\n                                else if (buy[j] != diff)\n                                        break;\n                        }\n                }\n                if(result > max_result){\n                        max_result = result;\n                }\n        }\n        cout <<max_result <<endl;\n        return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3358720, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3391488, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3383296, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3452928, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3395584, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3387392, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3399680, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 3, "memory_cost": 3645440}	2014311686	220.118.98.98
32bfbeee1b778850c1b86ace40280149	2	15	2021-01-04 04:52:06.478841+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 1e5 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nint p[max_v];\nint sb[max_v];\nint n,k;\n\nint find(int idx)\n{\n\treturn p[idx] < 0 ? idx : p[idx] = find(p[idx]);\n}\n\nvoid merge(int a, int b)\n{\n\ta = find(a);\n\tb = find(b);\n\n\tif (a == b) return;\n\n\n\tsb[a] += sb[b];\n\tp[b] = a;\n\n\treturn;\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\n\tmemset(p, -1, sizeof(p));\n\n\tci(n>>k);\n\tfa(i, 0, n) ci(sb[i]);\n\t\n\tfa(i, 0, k)\n\t{\n\t\tint x, y; ci(x >> y);\n\n\t\tmerge(x, y);\n\t}\n\n\tfa(i, 0, n)\n\t{\n\t\tint x = find(i);\n\n\t\tif (sb[x])\n\t\t{\n\t\t\tco("IMPOSSIBLE");\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tco("POSSIBLE");\n\t\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 4050944, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3903488, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 8, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4038656, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3948544, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3964928, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4042752, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3960832, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3923968, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3944448, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 6, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 10, "memory_cost": 4050944}	2018314788	115.145.246.12
5f1d459b69810ea0780ad3bc2683eb86	2	12	2021-01-04 05:19:45.996053+00	72	#include<iostream>\n#include<algorithm>\nusing namespace std;\nint a, b, c, d;\nint main(){\n    cin >> a >> b >> c >> d;\n    if(a < b && b < c && c < d) cout << "Uphill";\n    else if(a > b && b > c && c > d) cout << "Downhill";\n    else if(a == b && b == c && c == d) cout << "Flat Land";\n    else cout << "Unknown";\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3362816, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3538944}	9967han	222.112.181.211
4bb8c9de5156f6b92e6d098a63723173	2	13	2021-01-04 06:16:07.742122+00	76	S = input()\npossible = ["H", "I", "N", "O", "S", "X", "Z"]\nempty = []\n\nfor i in range(len(S)):\n    if S[i] in possible:\n        empty.append("TRUE")\n    else:\n        empty.append("FALSE")\n\nif "FALSE" in empty:\n    print("NO")\nelse:\n    print("YES")	-2	{}	Java	f	{"score": 0, "err_info": "/judger/run/3859e31b2dc7487aacbadd3086d5b3f5/Main.java:1: error: class, interface, or enum expected\\nS = input()\\n^\\n1 error"}	2020312429	211.105.153.248
5cb56207cbb8ffca75bb7233f0e532dc	2	15	2021-01-04 03:46:50.265759+00	32	#include<iostream>\n#include<queue>\n#include<vector>\n\nusing namespace std;\n\nint main()\n{\n\tint N, M, i, d, a, b;\n\tcin >> N >> M;\n\tvector<int> p[N];\n\tint  debt[N];\n\tfor(i=0;i<N;i++)\n\t{\n\t\tcin >>d;\n\t\tdebt[i] =d; \n\t}\n\tfor(i=0;i<M;i++)\n\t{\n\t\tcin >> a >> b;\n\t\tp[a].push_back(b); p[b].push_back(b);\n\t}\n\tint t, sum, result = 1;\n\tqueue<int> q;\n\tint visited[N] = {0,};\n\tfor(i=0;i<N;i++)\n\t{\n\t\tsum = 0;\n\t\tt = i;\n\t\tif(visited[t] == 1) continue;\n\t\tq.push(t);\n\t\tvisited[t] = 1;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tt = q.front(); q.pop();\n\t\t\tsum+=debt[t];\n\t\t\tfor(auto iter = p[t].begin();iter!=p[t].end();iter++)\n\t\t\t{\n\t\t\t\tif(visited[*iter] == 0)\n\t\t\t\t{\n\t\t\t\t\tq.push(*iter);\n\t\t\t\t\tvisited[*iter] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(sum != 0) {\n\t\t\tresult = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(result == 1) cout<<"POSSIBLE";\n\telse cout<<"IMPOSSIBLE" ;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 4096000, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "1", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3919872, "output": null, "result": -1, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 20, "test_case": "2", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3760128, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 4145152, "output": null, "result": -1, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 23, "test_case": "4", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3850240, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "5", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3801088, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 10, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3878912, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3850240, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "8", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 4329472, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}]}	C++	f	{"time_cost": 22, "memory_cost": 4329472}	2020312218	61.255.225.91
5fb6de90cf42ea67ec6ab94f76917d21	2	17	2021-01-04 03:52:40.699279+00	65	def u(a,d,x,v):\n    t=v-a[x];a[x]=v\n    while x<=n:d[x]+=t;x+=x&-x\ndef q(d,x):\n    t=0\n    while x:t+=d[x];x&=x-1\n    return t\nR=range\ns,k,*l=open(0).read().split();n,k,l=len(s),int(k)*2,[*map(int,l)]\nQ=iter(l[k:])\nA=[[0]*(n+1)for i in R(26)]\nD=[[0]*(n+1)for i in R(26)]\nfor i in R(n):t=ord(s[i])-97;u(A[t],D[t],i+1,1)\nz=0\nfor v,w in zip(l[:k:2],l[1::2]):\n    while any(q(D[i],w)-q(D[i],v-1)>1 for i in R(26)):k=next(Q);t=ord(s[k-1])-97;u(A[t],D[t],k,0);z+=1\nprint(z)	1	{"err": null, "data": [{"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9134080, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 65867776, "output": null, "result": 1, "signal": 9, "cpu_time": 2984, "exit_code": 0, "real_time": 3014, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 65900544, "output": null, "result": 1, "signal": 9, "cpu_time": 2980, "exit_code": 0, "real_time": 3014, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 65978368, "output": null, "result": 1, "signal": 9, "cpu_time": 2968, "exit_code": 0, "real_time": 3015, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 9289728, "output": null, "result": 0, "signal": 0, "cpu_time": 37, "exit_code": 0, "real_time": 42, "test_case": "7", "output_md5": "34ed066df378efacc9b924ec161e7639"}, {"error": 0, "memory": 9306112, "output": null, "result": 0, "signal": 0, "cpu_time": 29, "exit_code": 0, "real_time": 34, "test_case": "8", "output_md5": "7fe1f8abaad094e0b5cb1b01d712f708"}, {"error": 0, "memory": 9220096, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 32, "test_case": "9", "output_md5": "3cf166c6b73f030b4f67eeaeba301103"}, {"error": 0, "memory": 9306112, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 31, "test_case": "10", "output_md5": "8dd48d6a2e2cad213179a3992c0be53c"}, {"error": 0, "memory": 9289728, "output": null, "result": 0, "signal": 0, "cpu_time": 33, "exit_code": 0, "real_time": 34, "test_case": "11", "output_md5": "019d385eb67632a7e958e23f24bd07d7"}, {"error": 0, "memory": 9273344, "output": null, "result": 0, "signal": 0, "cpu_time": 33, "exit_code": 0, "real_time": 34, "test_case": "12", "output_md5": "05f971b5ec196b8c65b75d2ef8267331"}, {"error": 0, "memory": 10846208, "output": null, "result": 0, "signal": 0, "cpu_time": 167, "exit_code": 0, "real_time": 168, "test_case": "13", "output_md5": "8d9fc2308c8f28d2a7d2f6f48801c705"}, {"error": 0, "memory": 10862592, "output": null, "result": 0, "signal": 0, "cpu_time": 134, "exit_code": 0, "real_time": 139, "test_case": "14", "output_md5": "ac5dab2e99eee9cf9ec672e383691302"}, {"error": 0, "memory": 10956800, "output": null, "result": 0, "signal": 0, "cpu_time": 118, "exit_code": 0, "real_time": 123, "test_case": "15", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 10780672, "output": null, "result": 0, "signal": 0, "cpu_time": 122, "exit_code": 0, "real_time": 131, "test_case": "16", "output_md5": "90599c8fdd2f6e7a03ad173e2f535751"}, {"error": 0, "memory": 10903552, "output": null, "result": 0, "signal": 0, "cpu_time": 133, "exit_code": 0, "real_time": 134, "test_case": "17", "output_md5": "15d185eaa7c954e77f5343d941e25fbd"}, {"error": 0, "memory": 10997760, "output": null, "result": 0, "signal": 0, "cpu_time": 117, "exit_code": 0, "real_time": 126, "test_case": "18", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 10911744, "output": null, "result": 0, "signal": 0, "cpu_time": 136, "exit_code": 0, "real_time": 137, "test_case": "19", "output_md5": "dc16622ddc767e6bc1200fe5df2fbdfb"}, {"error": 0, "memory": 10842112, "output": null, "result": 0, "signal": 0, "cpu_time": 138, "exit_code": 0, "real_time": 143, "test_case": "20", "output_md5": "90aef91f0d9e7c3be322bd7bae41617d"}, {"error": 0, "memory": 11059200, "output": null, "result": 0, "signal": 0, "cpu_time": 116, "exit_code": 0, "real_time": 121, "test_case": "21", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 65802240, "output": null, "result": 1, "signal": 9, "cpu_time": 2973, "exit_code": 0, "real_time": 3011, "test_case": "22", "output_md5": null}, {"error": 0, "memory": 66015232, "output": null, "result": 1, "signal": 9, "cpu_time": 2982, "exit_code": 0, "real_time": 3012, "test_case": "23", "output_md5": null}, {"error": 0, "memory": 65691648, "output": null, "result": 1, "signal": 9, "cpu_time": 2960, "exit_code": 0, "real_time": 3012, "test_case": "24", "output_md5": null}, {"error": 0, "memory": 65978368, "output": null, "result": 1, "signal": 9, "cpu_time": 2962, "exit_code": 0, "real_time": 3012, "test_case": "25", "output_md5": null}, {"error": 0, "memory": 65974272, "output": null, "result": 1, "signal": 9, "cpu_time": 2986, "exit_code": 0, "real_time": 3013, "test_case": "26", "output_md5": null}, {"error": 0, "memory": 65888256, "output": null, "result": 1, "signal": 9, "cpu_time": 2977, "exit_code": 0, "real_time": 3012, "test_case": "27", "output_md5": null}, {"error": 0, "memory": 66052096, "output": null, "result": 1, "signal": 9, "cpu_time": 2965, "exit_code": 0, "real_time": 3011, "test_case": "28", "output_md5": null}, {"error": 0, "memory": 65875968, "output": null, "result": 1, "signal": 9, "cpu_time": 2965, "exit_code": 0, "real_time": 3012, "test_case": "29", "output_md5": null}, {"error": 0, "memory": 65892352, "output": null, "result": 1, "signal": 9, "cpu_time": 2965, "exit_code": 0, "real_time": 3012, "test_case": "30", "output_md5": null}, {"error": 0, "memory": 66052096, "output": null, "result": 1, "signal": 9, "cpu_time": 2979, "exit_code": 0, "real_time": 3012, "test_case": "31", "output_md5": null}]}	Python3	f	{"time_cost": 2986, "memory_cost": 66052096}	2020711601	115.145.209.173
f81a460f246b1a79eff679b4b2ec84c0	2	13	2021-01-04 04:39:34.239065+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 2e2 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nunordered_map <char, bool> h;\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\th['H'] = 1, h['I'] = 1, h['N'] = 1, h['O'] = 1, h['S'] = 1, h['X'] = 1, h['Z'] = 1;\n\tstring s;\n\tci(s);\n\tfor (auto x : s)\n\t{\n\t\tif (!h[x])\n\t\t{\n\t\t\tco("NO");\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tco("YES");\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3375104, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3334144, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3383296, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3645440}	2018314788	115.145.246.12
35ec8310a9811c25a1ff90c109c1de46	2	12	2021-01-04 04:52:46.287622+00	13	# Function definition\ndef upHill(h_list):\n    for i in range(3):\n        if h_list[i] >= h_list[i+1]:\n            return False\n    return True\n\ndef downHill(h_list):\n    for i in range(3):\n        if h_list[i] <= h_list[i+1]:\n            return False \n    return True\n\ndef flat(h_list):\n    for i in range(3):\n        if h_list[i] != h_list[i+1]:\n            return False\n    return True\n\n# MAIN\nif __name__ == '__main__':\n    h = []\n    for i in range(4):\n        h.append(int(input()))\n    \n    if upHill(h) :\n        print('Uphill')\n    elif downHill(h):\n        print('Downhill')\n    elif flat(h):\n        print('Flat Land')\n    else:\n        print('Unknown')	0	{"err": null, "data": [{"error": 0, "memory": 9068544, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 12, "memory_cost": 9068544}	2017313120	116.124.1.90
318e06c4b6bcf895698ffb1e06ecc8f2	2	14	2021-01-04 05:05:36.23847+00	71	#include <iostream>\n#include <string>\n\n#define MAX(A,B) A>B?A:B;\n#define MIN(A,B) A<B?A:B;\nusing namespace std;\n\nint arr[1000],n;\n\nint test(int a)\n{\n\tint prev=-1, cnt=1,m=0;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] == a)\n\t\t\tcontinue;\n\t\tif (prev==-1)\n\t\t{\n\t\t\tprev = arr[i];\n\t\t}\n\t\telse if(arr[i] == prev)\n\t\t{\n\t\t\tcnt++;\n\t\t\tm = MAX(m, cnt);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprev = arr[i];\n\t\t\tcnt = 1;\n\t\t}\n\t}\n\treturn m;\n}\n\nint main()\n{\n\tint result=0;\n\tscanf("%d", &n);\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tscanf("%d", &arr[i]);\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tresult = MAX(result, test(arr[i]));\n\t}\n\tcout << result;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3600384, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 5, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 6, "memory_cost": 3633152}	2015310673	112.169.201.58
e3bc698616f636f68f5d94325d785692	2	15	2021-01-04 03:57:46.612597+00	32	#include<iostream>\n#include<queue>\n#include<vector>\n\nusing namespace std;\n\nint main()\n{\n\tint N, M, i, d, a, b;\n\tcin >> N >> M;\n\tvector<int> p[N];\n\tint  debt[N];\n\tfor(i=0;i<N;i++)\n\t{\n\t\tcin >>d;\n\t\tdebt[i] =d; \n\t}\n\tfor(i=0;i<M;i++)\n\t{\n\t\tcin >> a >> b;\n\t\tp[a].push_back(b); p[b].push_back(a);\n\t}\n\tint t, sum, result = 1;\n\tqueue<int> q;\n\tint visited[N] = {0,};\n\tfor(i=0;i<N;i++)\n\t{\n\t\tsum = 0;\n\t\tt = i;\n\t\tif(visited[t] == 1) continue;\n\t\tq.push(t);\n\t\tvisited[t] = 1;\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tt = q.front(); q.pop();\n\t\t\tsum+=debt[t];\n\t\t\tfor(auto iter = p[t].begin();iter!=p[t].end();iter++)\n\t\t\t{\n\t\t\t\tif(visited[*iter] == 0)\n\t\t\t\t{\n\t\t\t\t\tq.push(*iter);\n\t\t\t\t\tvisited[*iter] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(sum != 0) { \n\t\t\tresult = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(result == 1) cout<<"POSSIBLE";\n\telse cout<<"IMPOSSIBLE" ;\n}	0	{"err": null, "data": [{"error": 0, "memory": 4112384, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3919872, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3866624, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4329472, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 22, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3940352, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3899392, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4042752, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3756032, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 6, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4071424, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 22, "memory_cost": 4329472}	2020312218	61.255.225.91
3d844d396f6d6797f08b0b585618a2c4	2	14	2021-01-04 04:06:39.965163+00	64	c=int(input())\ntemp=[]\nfor i in range(c):\n    number=int(input())\n    temp.append(number)\nkkk=set(temp)\nkkk=list(kkk)\nfact=[]\nfor i in kkk:\n    for j in range(temp.count(i)):\n        temp2=temp.copy()\n        temp2.remove(i)\n    count=1\n    for j in range(len(temp2)):\n        if j==0:\n            start=temp2[j]\n            number=1\n        else:\n            if start==temp2[j]:\n                number+=1\n            else:\n                if number>count:\n                    count=number\n                start=temp2[j]\n                number=1\n    if number>count:\n        count=number\n    fact.append(count)\nprint(max(fact))	-1	{"err": null, "data": [{"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 225, "exit_code": 0, "real_time": 225, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "8", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 25, "test_case": "9", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 26, "test_case": "10", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 30, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8970240, "output": null, "result": 0, "signal": 0, "cpu_time": 42, "exit_code": 0, "real_time": 43, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 104, "exit_code": 0, "real_time": 145, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9064448, "output": null, "result": 0, "signal": 0, "cpu_time": 149, "exit_code": 0, "real_time": 158, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9043968, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 27, "test_case": "15", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "16", "output_md5": "c9f0f895fb98ab9159f51fd0297e236d"}, {"error": 0, "memory": 8994816, "output": null, "result": -1, "signal": 0, "cpu_time": 41, "exit_code": 0, "real_time": 42, "test_case": "17", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 25, "test_case": "18", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9076736, "output": null, "result": -1, "signal": 0, "cpu_time": 32, "exit_code": 0, "real_time": 32, "test_case": "19", "output_md5": "45c48cce2e2d7fbdea1afc51c7c6ad26"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 28, "exit_code": 0, "real_time": 38, "test_case": "20", "output_md5": "c20ad4d76fe97759aa27a0c99bff6710"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 28, "exit_code": 0, "real_time": 29, "test_case": "21", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 34, "test_case": "22", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}]}	Python3	f	{"time_cost": 225, "memory_cost": 9076736}	2017314804	113.199.59.51
9b9fcf663491befebedfcaf73b199701	2	12	2021-01-04 12:36:07.542271+00	107	a = int(input("처음"))\nb = int(input("둘"))\nc = int(input("셋"))\nd = int(input("넷"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelse:\n  print("Unknown")	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/786fbdb1e5dc42f8a9fc048f1512abd7/main.c:1:5: error: expected expression before 'int'\\n a = int(input(\\"처음\\"))\\n     ^~~"}	2020311650	1.251.170.216
19d94bd4b9fd6821781a4320cb138fb3	2	13	2021-01-04 04:54:19.821945+00	71	#include <iostream>\n#include <string>\n\n#define MAX(A,B) A>B?A:B;\n#define MIN(A,B) A<B?A:B;\nusing namespace std;\n\nint main()\n{\n\tstring A;\n\tstring result = "YES";\n\tcin >> A;\n\tint alen = A.length();\n\tfor (int i = 0; i < alen; i++)\n\t{\n\t\tif (A[i] != 'H' && A[i] != 'I' && A[i] != 'N' && A[i] != 'O' && A[i] != 'S' && A[i] != 'X' && A[i] != 'Z')\n\t\t\tresult = "NO";\n\t}\n\tcout << result;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3383296, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3575808, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3624960}	2015310673	112.169.201.58
cc8b091240b94450501612e72a1c68bd	2	13	2021-01-04 05:23:24.079374+00	72	#include<iostream>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nstring str;\nint main(){\n    cin >> str;\n    for(int i=0; i<str.size(); i++){\n        if(str[i] == 'H' || str[i] == 'I' || str[i] == 'N' || str[i] == 'O' || str[i] == 'S' || str[i] == 'Z' || str[i] == 'X') continue;\n        cout << "NO";\n        return 0;\n    }\n    cout << "YES";\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3420160, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3358720, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3592192}	9967han	222.112.181.211
bba6d6c518b198787d161fd53abf2364	2	14	2021-01-04 05:25:37.378497+00	71	#include <iostream>\n#include <string>\n\n#define MAX(A,B) A>B?A:B;\n#define MIN(A,B) A<B?A:B;\nusing namespace std;\n\nint arr[1000],n;\n\nint test(int a)\n{\n\tint prev=-1, cnt=1,m=0;\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] == a)\n\t\t\tcontinue;\n\t\tif (prev==-1)\n\t\t{\n\t\t\tprev = arr[i];\n\t\t}\n\t\telse if(arr[i] == prev)\n\t\t{\n\t\t\tcnt++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprev = arr[i];\n\t\t\tcnt = 1;\n\t\t}\n\t\tm = MAX(m, cnt);\n\t}\n\treturn m;\n}\n\nint main()\n{\n\tint result=0;\n\tscanf("%d", &n);\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tscanf("%d", &arr[i]);\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tresult = MAX(result, test(arr[i]));\n\t}\n\tresult = MAX(result, test(-1));\n\tcout << result;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3600384, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3588096, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3588096, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 6, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3600384, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 6, "memory_cost": 3641344}	2015310673	112.169.201.58
3c29d3306a458ba3cb1a35f1a23d22a6	2	13	2021-01-04 06:16:31.943905+00	76	S == input()\npossible = ["H", "I", "N", "O", "S", "X", "Z"]\nempty = []\n\nfor i in range(len(S)):\n    if S[i] in possible:\n        empty.append("TRUE")\n    else:\n        empty.append("FALSE")\n\nif "FALSE" in empty:\n    print("NO")\nelse:\n    print("YES")	-2	{}	Java	f	{"score": 0, "err_info": "/judger/run/95901666a63345708ecb6cdcf087c50f/Main.java:1: error: class, interface, or enum expected\\nS == input()\\n^\\n1 error"}	2020312429	211.105.153.248
e8d2d3df8c56426783b493a74a4134e7	2	12	2021-01-04 05:26:52.652445+00	36	#include <stdio.h>\n\nint main ( void )\n{\n\tint tmp, last, sit1, sit2;\n\tint i;\n\tscanf("%d", &last);\n\tfor ( i = 1; i <= 3; i++ ) {\n\t\tscanf("%d", &tmp);\n\t\tif ( i == 1 ) {\n\t\t\tif ( tmp > last )\t\tsit1 = 1;\n\t\t\telse if ( tmp < last )\tsit1 = -1;\n\t\t\telse\t\t\t\t\tsit1 = 0;\n\t\t}\n\t\telse {\n\t\t\tif ( tmp > last )\t\tsit2 = 1;\n\t\t\telse if ( tmp < last )\tsit2 = -1;\n\t\t\telse\t\t\t\t\tsit2 = 0;\n\t\t\t\n\t\t\tif ( sit1 != sit2 ) {\n\t\t\t\tprintf("Unknown\\n");\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\tlast = tmp;\n\t}\n\tif ( sit2 == 1 )\tprintf("Uphill\\n");\n\telse if ( sit2 == -1 )\tprintf("Downhill\\n");\n\telse if ( sit2 == 0 )\tprintf("Flat Land\\n");\n\t\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1642496, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1699840}	2017313109	211.114.120.219
409f15b71856f1fe9b2b21d05f5e4f5a	2	12	2021-01-04 08:18:52.278499+00	80	a = input()\nb = input()\nc = input()\nd = input()\nif (a<b) and (b<c) and (c<d):\n  print('Uphill')\nelif (a>b) and (b>c) and (c>d):\n  print('Downhill')\nelif (a==b) and (b==c) and (c==d):\n  print("Flat Land")\nelse:\n  print("Unkown")	-1	{"err": null, "data": [{"error": 0, "memory": 8851456, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8892416, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}, {"error": 0, "memory": 8892416, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}, {"error": 0, "memory": 8867840, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}]}	Python3	f	{"time_cost": 15, "memory_cost": 8962048}	hdh12345	115.145.188.47
e37dc9bfd8dc5e84d1f923b7fe2a0491	2	12	2021-01-04 10:50:42.039291+00	93	h1=int(input())\nh2=int(input())\nh3=int(input())\nh4=int(input())\n\nif h1<h2 and h2<h3 and h3<h4:\n    print("Uphill")\nelif h1>h2 and h2>h3 and h3>h4:\n    print("Downhill")\nelif h1==h2 and h2==h3 and h3==h4:\n    print("Flat land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 7356416, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 7274496, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 7286784, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7294976, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 7438336, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 9, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python2	f	{"time_cost": 11, "memory_cost": 7438336}	이지연	114.205.106.66
3655aa50695745901cce3743950b9e71	2	15	2021-01-04 05:32:54.147088+00	64	a,b=input().split()\na=int(a)\nb=int(b)\n\nnumber=[]\nfriend=[]\nfor i in range(a):\n    c=int(input())\n    number.append(c)\nfor i in range(b):\n    c,d=input().split()\n    c=int(c)\n    d=int(d)\n    k=[c,d]\n    friend.append(k)\nresult=[]\nfor i in range(b):\n    if i==0:\n        result.append(friend[i])\n    else:\n        first=-1\n        second=-1\n        temp1=friend[i][0]\n        temp2=friend[i][1]\n        for j in range(len(result)):\n            if temp1 in result[j]:\n                first=j\n            if temp2 in result[j]:\n                second=j\n        if first==-1 and second== -1:\n            list1=[temp1,temp2]\n            result.append(list1)\n        elif first==-1:\n            result[second].append(temp1)\n        elif second==-1:\n            result[first].append(temp2)\n        else:\n            if first!=second:\n                result[first]=result[first]+result[second]\n            \n                result.remove(result[second])\ncount=0\nfor i in range(len(result)):\n    sum=0\n    for j in result[i]:\n        sum+=number[j]\n    if sum!=0:\n        print("IMPOSSIBLE")\n        count=1\n        break\nif count==0:\n    print("POSSIBLE")	1	{"err": null, "data": [{"error": 0, "memory": 12500992, "output": null, "result": 0, "signal": 0, "cpu_time": 987, "exit_code": 0, "real_time": 988, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 13189120, "output": null, "result": 0, "signal": 0, "cpu_time": 990, "exit_code": 0, "real_time": 1002, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10887168, "output": null, "result": 0, "signal": 0, "cpu_time": 580, "exit_code": 0, "real_time": 585, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 15106048, "output": null, "result": 0, "signal": 0, "cpu_time": 604, "exit_code": 0, "real_time": 617, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10571776, "output": null, "result": 0, "signal": 0, "cpu_time": 346, "exit_code": 0, "real_time": 352, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10371072, "output": null, "result": 0, "signal": 0, "cpu_time": 506, "exit_code": 0, "real_time": 515, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 12165120, "output": null, "result": 1, "signal": 0, "cpu_time": 1093, "exit_code": 0, "real_time": 1102, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 10145792, "output": null, "result": 0, "signal": 0, "cpu_time": 469, "exit_code": 0, "real_time": 470, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 12021760, "output": null, "result": 1, "signal": 0, "cpu_time": 1668, "exit_code": 0, "real_time": 1669, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 1668, "memory_cost": 15106048}	2017314804	113.199.59.51
1cdde9bfc2bba7f0c1bf0f78ff923479	2	13	2021-01-04 05:36:17.49945+00	36	#include <stdio.h>\n#include <string.h>\nchar same[10] = { 'H', 'I', 'N', 'O', 'S', 'X', 'Z' };\n\nint main ( void )\n{\n\tint i, j;\n\tchar tmp[50];\n\tscanf("%s", &tmp);\n\tfor ( i = 0; i < strlen(tmp); i++ ) {\n\t\tfor ( j = 0; j < 7; j++ ) {\n\t\t\tif ( tmp[i] == same[j] )\tbreak;\n\t\t}\n\t\tif ( j >= 7 ) {\n\t\t\tprintf("NO\\n");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf("YES\\n");\n\t\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1585152, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1736704}	2017313109	211.114.120.219
bcca9fde933a7cd1f481240b72d49efb	2	13	2021-01-04 06:17:07.603588+00	76	word = input()\npossible = ["H", "I", "N", "O", "S", "X", "Z"]\nempty = []\n\nfor i in range(len(word)):\n    if word[i] in possible:\n        empty.append("TRUE")\n    else:\n        empty.append("FALSE")\n\nif "FALSE" in empty:\n    print("NO")\nelse:\n    print("YES")	-2	{}	Java	f	{"score": 0, "err_info": "/judger/run/44b920d80e36458cabfb27f85508345c/Main.java:1: error: class, interface, or enum expected\\nword = input()\\n^\\n1 error"}	2020312429	211.105.153.248
b504cc270b783d84dec292262bbc7fcb	2	14	2021-01-04 05:34:59.325687+00	62	#include<iostream>\n#include<vector>\n#include<algorithm>\n\nint N, max, eq, arr[1005], temp[1005];\nstd::vector<int> num, deleted;\n\nint main(){\n    scanf("%d", &N);\n    for(int i = 0; i < N; ++i){\n        scanf("%d", &arr[i]);\n        temp[i] = arr[i];\n    }\n    if(N == 1){\n        printf("1");\n        return 0;\n    }\n    for(int i = 1; i < N; ++i)\n        eq += (arr[i] == arr[i - 1]) ? 1 : 0;\n    if(eq == N - 1){\n        printf("%d", N);\n        return 0;\n    }\n    std::sort(temp, temp + N);\n    \n    num.push_back(temp[0]);\n    for(int i = 1; i < N; ++i)\n        if(temp[i] != num[num.size() - 1])\n            num.push_back(temp[i]);\n    for(int i = 0; i < num.size(); ++i){\n        deleted.clear();\n        for(int u = 0; u < N; ++u){\n            if(arr[u] != num[i])\n                deleted.push_back(arr[u]);\n        }\n        int cur = 0;\n        for(int u = 1; u < N; ++u){\n            if(deleted[u] == deleted[u - 1])\n                ++cur;\n            else{\n                max = (cur > max) ? cur : max;\n                cur = 0;\n            }\n        }\n        max = (cur > max) ? cur : max;\n        cur = 0;\n    }\n    printf("%d", max + 1);\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3694592, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3629056, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 3813376, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3653632, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 3731456, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3747840, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "6f4922f45568161a8cdf4ad2299f6d23"}, {"error": 0, "memory": 3760128, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "757b505cfd34c64c85ca5b5690ee5293"}, {"error": 0, "memory": 3719168, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "2723d092b63885e0d7c260cc007e8b9d"}, {"error": 0, "memory": 3616768, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "a1d0c6e83f027327d8461063f4ac58a6"}, {"error": 0, "memory": 3751936, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "11", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3805184, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "12", "output_md5": "9bf31c7ff062936a96d3c8bd1f8f2ff3"}, {"error": 0, "memory": 3702784, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "13", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3649536, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "14", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3674112, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "05049e90fa4f5039a8cadc6acbb4b2cc"}, {"error": 0, "memory": 3735552, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "c9f0f895fb98ab9159f51fd0297e236d"}, {"error": 0, "memory": 3665920, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "f0935e4cd5920aa6c7c996a5ee53a70f"}, {"error": 0, "memory": 3760128, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3760128, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3739648, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 8, "memory_cost": 3813376}	2019314665	115.23.186.96
e976f8a6cdd3df60a90ec88518c4c957	2	12	2021-01-04 08:29:12.126044+00	80	#include <stdio.h>\n\nint main(void){\n  \n  int h1,h2,h3,h4;\n  scanf("%d",&h1);\n  getchar();\n  scanf("%d",&h2);\n  getchar();\n  scanf("%d",&h3);\n  getchar();\n  scanf("%d",&h4);\n  if (h1>h2&& h2>h3 &&h3>h4)\n    printf("Downhill");\n  else if (h1<h2&&h2<h3&&h3<h4)\n    printf("Uphill");\n  else if (h1==h2&&h2==h3&&h3==h4)\n    printf("Flat Land");\n  else\n    printf("Unknown");\n  \n  return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1687552, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1703936}	hdh12345	115.145.188.47
fc75b40db66a34e38fcd6f5746d6e7d9	2	16	2021-01-04 05:35:39.807559+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 1e5 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nvector <int> vi;\nint n, m, sum;\nLL dp[max_v];\nbool vist[max_v];\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\tci(n >> m);\n\tfa(i, 0, n)\n\t{\n\t\tint x; ci(x);\n\t\tsum += x*x;\n\t\tvi.push_back(x);\n\t}\n\t\n\tfill(dp, dp + max_v, INF);\n\n\tdp[sum] = 0;\n\tvist[sum] = 1;\n\n\tvector <int> tar;\n\ttar.push_back(sum);\n\n\tfa(i, 0, vi.size())\n\t{\n\t\tauto x = vi[i];\n\n\t\tfor (auto y : tar)\n\t\t{\n\t\t\tfa(nt, 1, 101)\n\t\t\t{\n\t\t\t\tint cost = abs(nt - x) * abs(nt-x);\n\t\t\t\tint nsum = y - x * x + nt * nt;\n\n\t\t\t\tif (nsum >= 1 && nsum <= 100003)\n\t\t\t\t{\n\t\t\t\t\tckmin(dp[nsum], dp[y] + cost);\n\t\t\t\t\tif (!vist[nsum])\n\t\t\t\t\t{\n\t\t\t\t\t\tvist[nsum] = 1;\n\t\t\t\t\t\ttar.push_back(nsum);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tAT;\n\tdp[m] == INF ? co(-1) : co(dp[m]);\n\tAE;\n\n\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 4517888, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4452352, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "2", "output_md5": "08d98638c6fcd194a4b1e6992063e944"}, {"error": 0, "memory": 4501504, "output": null, "result": 4, "signal": 11, "cpu_time": 7, "exit_code": 0, "real_time": 72, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 4444160, "output": null, "result": 4, "signal": 11, "cpu_time": 3, "exit_code": 0, "real_time": 75, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 4591616, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4485120, "output": null, "result": 4, "signal": 11, "cpu_time": 6, "exit_code": 0, "real_time": 79, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 4509696, "output": null, "result": 4, "signal": 11, "cpu_time": 6, "exit_code": 0, "real_time": 77, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 4399104, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4419584, "output": null, "result": 4, "signal": 11, "cpu_time": 3, "exit_code": 0, "real_time": 77, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 4374528, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "3ef815416f775098fe977004015c6193"}, {"error": 0, "memory": 4431872, "output": null, "result": 4, "signal": 11, "cpu_time": 3, "exit_code": 0, "real_time": 79, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 4411392, "output": null, "result": 4, "signal": 11, "cpu_time": 8, "exit_code": 0, "real_time": 81, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 8, "memory_cost": 4591616}	2018314788	115.145.246.12
1a42680d58c4a968ea4aeadbdc3b4c32	2	12	2021-01-04 10:23:26.811645+00	18	#include<bits/stdc++.h>\nint arr[100100][100100];\nint main(){\n  void* x;\n  long long s=1;\n  for(int i=1; i<100; ++i){\n    for(int j=1; j<=100; ++j) arr[i][j]=i+j;\n    }\n  printf("%d", arr[10][100]);\n}	-2	{}	C++	f	{"score": 0, "err_info": "/tmp/ccQOwKMV.o: In function `_GLOBAL__sub_I_arr':\\nmain.cpp:(.text.startup+0x63): relocation truncated to fit: R_X86_64_PC32 against `.bss'\\nmain.cpp:(.text.startup+0x81): relocation truncated to fit: R_X86_64_PC32 against `.bss'\\ncollect2: error: ld returned 1 exit status"}	2016312332	223.38.23.122
95a7de1b49c0e5d88ba473a8609b9382	2	12	2021-01-04 05:42:09.742603+00	74	a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nif(a-b < 0 and b-c < 0 and c-d < 0):\n  print("Uphill")\n\nelif(a-b > 0 and b-c > 0 and c-d > 0):\n  print("Downhill")\n\nelif(a==b==c==d):\n  print("Flat Land")\n\nelse:\n  print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 20, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9043968}	2015310543	115.145.154.253
53ed3532dde6e3757e01d9c25ea3cfb5	2	13	2021-01-04 06:17:15.269494+00	76	word = input()\npossible = ["H", "I", "N", "O", "S", "X", "Z"]\nempty = []\n\nfor i in range(len(word)):\n    if word[i] in possible:\n        empty.append("TRUE")\n    else:\n        empty.append("FALSE")\n\nif "FALSE" in empty:\n    print("NO")\nelse:\n    print("YES")	4	{"err": null, "data": [{"error": 0, "memory": 7438336, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 10, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7274496, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 12, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7467008, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 12, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7426048, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 11, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7286784, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 11, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7393280, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 14, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7446528, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7446528, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 11, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7364608, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 10, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7421952, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 14, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 13, "memory_cost": 7467008}	2020312429	211.105.153.248
836bbd7b9116f803318b53e225e6ecf4	2	14	2021-01-04 08:19:20.497485+00	68	#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n, m[1005];\nvector<int> lst;\n\nint solve(int v)\n{\n    int prev=-1, cnt=1, ret=0;\n    for(int i=1 ; i<=n ; i++){\n        if(m[i]==v) continue;\n        if(m[i]==prev) cnt++;\n        else cnt=1;\n        prev=m[i]; ret=max(ret,cnt);\n    }\n    return ret;\n}\n\nint main()\n{\n    int ans=0;\n    scanf("%d",&n);\n    for(int i=1 ; i<=n ; i++){\n        scanf("%d",&m[i]); lst.push_back(m[i]);\n    }\n    sort(lst.begin(),lst.end());\n    lst.erase(unique(lst.begin(),lst.end()),lst.end());\n    for(int v : lst) ans=max(ans,solve(v));\n    printf("%d",ans);\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3813376, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3653632, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3751936, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3715072, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3710976, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3715072, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3665920, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3756032, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3653632, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3760128, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3813376, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3674112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3751936, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3682304, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3698688, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 4, "memory_cost": 3813376}	2018312723	39.7.47.101
c2218aa2df61715a3177c969191f51b4	2	14	2021-01-04 05:38:11.57732+00	62	#include<iostream>\n#include<vector>\n#include<algorithm>\n\nint N, max, eq, arr[1005], temp[1005];\nstd::vector<int> num, deleted;\n\nint main(){\n    scanf("%d", &N);\n    for(int i = 0; i < N; ++i){\n        scanf("%d", &arr[i]);\n        temp[i] = arr[i];\n    }\n    if(N == 1){\n        printf("1");\n        return 0;\n    }\n    for(int i = 1; i < N; ++i)\n        eq += (arr[i] == arr[i - 1]) ? 1 : 0;\n    if(eq == N - 1){\n        printf("%d", N);\n        return 0;\n    }\n    std::sort(temp, temp + N);\n    \n    num.push_back(temp[0]);\n    for(int i = 1; i < N; ++i)\n        if(temp[i] != num[num.size() - 1])\n            num.push_back(temp[i]);\n    for(int i = 0; i < num.size(); ++i){\n        deleted.clear();\n        for(int u = 0; u < N; ++u){\n            if(arr[u] != num[i])\n                deleted.push_back(arr[u]);\n        }\n        int cur = 0;\n        for(int u = 1; u < deleted.size(); ++u){\n            if(deleted[u] == deleted[u - 1])\n                ++cur;\n            else{\n                max = (cur > max) ? cur : max;\n                cur = 0;\n            }\n        }\n        max = (cur > max) ? cur : max;\n        cur = 0;\n    }\n    printf("%d", max + 1);\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3670016, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3719168, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 6, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3694592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3715072, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3731456, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3788800, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3813376, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3698688, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3731456, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3698688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3653632, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3723264, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3653632, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3743744, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3665920, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 6, "memory_cost": 3813376}	2019314665	115.23.186.96
d0d5259bd5e6fc65eafc14e717bd93d8	2	17	2021-01-04 08:55:42.233091+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 1e5 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nLL alph[max_v][26];\nLL arr[max_v*4][26];\nLL lazy[max_v * 4][26];\nint n;\n\nvoid propagate(int node, int nl, int nr,int ap)\n{\n\tif (lazy[node][ap])\n\t{\n\t\tif (nl != nr)\n\t\t{\n\t\t\tlazy[node * 2][ap] += lazy[node][ap];\n\t\t\tlazy[node * 2 + 1][ap] += lazy[node][ap];\n\t\t}\n\n\t\tarr[node][ap] += lazy[node][ap] * (nr - nl + 1);\n\t\tlazy[node][ap] = 0;\n\t}\n}\n\nvoid update(int l, int r, LL val, int node, int nl, int nr,int ap)\n{\n\tpropagate(node, nl, nr,ap);\n\n\tif (nr < l || nl > r) return;\n\n\tif (l <= nl && nr <= r)\n\t{\n\t\tlazy[node][ap] += val;\n\t\tpropagate(node, nl, nr,ap);\n\t\treturn;\n\t}\n\n\tint mid = (nl + nr) >> 1;\n\n\tupdate(l, r, val, node * 2, nl, mid,ap);\n\tupdate(l, r, val, node * 2 + 1, mid + 1, nr,ap);\n\n\tarr[node][ap] = arr[node * 2][ap] + arr[node * 2 + 1][ap];\n}\n\nLL query(int l, int r, int node, int nl, int nr,int ap)\n{\n\tpropagate(node, nl, nr,ap);\n\n\tif (nr <l || nl > r) return 0;\n\n\tif (l <= nl && nr <= r) return arr[node][ap];\n\n\tint mid = (nl + nr) >> 1;\n\n\treturn query(l, r, node * 2, nl, mid,ap) + query(l, r, node * 2 + 1, mid + 1, nr,ap);\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\tstring s; ci(s);\n\tfa(i,0,s.size()) ++alph[i+1][s[i] - 'a'];\n\n\tn = s.size();\n\t\n\tfa(i, 2, s.size() + 1) fa(j, 0, 26) alph[i][j] += alph[i - 1][j];\n\t\n\tint q; ci(q);\n\tLL sum = 0;\n\n\tfa(i, 0, q)\n\t{\n\t\tint x, y; ci(x >> y);\n\t\t\n\t\tfa(t, 0, 26)\n\t\t{\n\t\t\tLL c = alph[y][t] - alph[x - 1][t];\n\t\t\tif (c > 1)\n\t\t\t{\n\t\t\t\tupdate(x - 1, y - 1, 1, 1, 0, n - 1, t);\n\t\t\t\tsum += c - 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tLL ut = 0;\n\tint ans = 0;\n\n\tfa(i, 0, n)\n\t{\n\t\tint x; ci(x);\n\n\t\tif (ut >= sum) continue;\n\n\t\tint al = s[x] - 'a';\n\t\tint c = query(x - 1, x - 1, 1, 0, n - 1, al);\n\t\tut += c;\n\t\t//update(x - 1, x - 1, -c, 1, 0, n - 1, al);\n\t\tans = i+1;\n\t}\n\n\tAT;\n\tco(ans);\n\tAE;\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 79212544, "output": null, "result": -1, "signal": 0, "cpu_time": 1329, "exit_code": 0, "real_time": 1355, "test_case": "4", "output_md5": "04d52f96a2e0d6e0ca8b72e09ccb8ab4"}, {"error": 0, "memory": 79089664, "output": null, "result": -1, "signal": 0, "cpu_time": 304, "exit_code": 0, "real_time": 329, "test_case": "5", "output_md5": "9ea94aee3e419f6c26dcb261e6362433"}, {"error": 0, "memory": 133427200, "output": null, "result": -1, "signal": 0, "cpu_time": 199, "exit_code": 0, "real_time": 228, "test_case": "6", "output_md5": "3dcd864a8fe733cded5b40d23565abea"}, {"error": 0, "memory": 3829760, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "7", "output_md5": "57aeee35c98205091e18d1140e9f38cf"}, {"error": 0, "memory": 3964928, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "20f07591c6fcb220ffe637cda29bb3f6"}, {"error": 0, "memory": 3948544, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a516a87cfcaef229b342c437fe2b95f7"}, {"error": 0, "memory": 3854336, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "10", "output_md5": "74db120f0a8e5646ef5a30154e9f6deb"}, {"error": 0, "memory": 4009984, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "d395771085aab05244a4fb8fd91bf4ee"}, {"error": 0, "memory": 4194304, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c3c59e5f8b3e9753913f4d435b53c308"}, {"error": 0, "memory": 5947392, "output": null, "result": -1, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 27, "test_case": "13", "output_md5": "52947e0ade57a09e4a1386d08f17b656"}, {"error": 0, "memory": 5865472, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 12, "test_case": "14", "output_md5": "270edd69788dce200a3b395a6da6fdb7"}, {"error": 0, "memory": 7540736, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 13, "test_case": "15", "output_md5": "62da8c91ce7b10846231921795d6059e"}, {"error": 0, "memory": 5849088, "output": null, "result": -1, "signal": 0, "cpu_time": 29, "exit_code": 0, "real_time": 31, "test_case": "16", "output_md5": "faafda66202d234463057972460c04f5"}, {"error": 0, "memory": 5881856, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "17", "output_md5": "270edd69788dce200a3b395a6da6fdb7"}, {"error": 0, "memory": 7532544, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 10, "test_case": "18", "output_md5": "65a31da7ede4dc9b03fb5bbf8f442ce9"}, {"error": 0, "memory": 5939200, "output": null, "result": -1, "signal": 0, "cpu_time": 27, "exit_code": 0, "real_time": 33, "test_case": "19", "output_md5": "a14ac55a4f27472c5d894ec1c3c743d2"}, {"error": 0, "memory": 5791744, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "20", "output_md5": "270edd69788dce200a3b395a6da6fdb7"}, {"error": 0, "memory": 7598080, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 12, "test_case": "21", "output_md5": "65a31da7ede4dc9b03fb5bbf8f442ce9"}, {"error": 0, "memory": 79122432, "output": null, "result": -1, "signal": 0, "cpu_time": 166, "exit_code": 0, "real_time": 203, "test_case": "22", "output_md5": "c06047423e2b2352c776abe49c5b8fee"}, {"error": 0, "memory": 133509120, "output": null, "result": -1, "signal": 0, "cpu_time": 131, "exit_code": 0, "real_time": 171, "test_case": "23", "output_md5": "829914395c2494cb1d2c04b01a30d98c"}, {"error": 0, "memory": 79089664, "output": null, "result": -1, "signal": 0, "cpu_time": 150, "exit_code": 0, "real_time": 194, "test_case": "24", "output_md5": "086f0e79294e5ec8e5a38727b06fbfa4"}, {"error": 0, "memory": 133476352, "output": null, "result": -1, "signal": 0, "cpu_time": 147, "exit_code": 0, "real_time": 177, "test_case": "25", "output_md5": "9293d18db741bc605a5a77cff89a7959"}, {"error": 0, "memory": 79040512, "output": null, "result": -1, "signal": 0, "cpu_time": 1378, "exit_code": 0, "real_time": 1396, "test_case": "26", "output_md5": "a84657e483f40d27f8dbb40623d7ef22"}, {"error": 0, "memory": 79097856, "output": null, "result": -1, "signal": 0, "cpu_time": 312, "exit_code": 0, "real_time": 334, "test_case": "27", "output_md5": "9ea94aee3e419f6c26dcb261e6362433"}, {"error": 0, "memory": 133767168, "output": null, "result": -1, "signal": 0, "cpu_time": 218, "exit_code": 0, "real_time": 262, "test_case": "28", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 79024128, "output": null, "result": -1, "signal": 0, "cpu_time": 1368, "exit_code": 0, "real_time": 1390, "test_case": "29", "output_md5": "e2d5b645da58c9ff438ee2a7f168ae61"}, {"error": 0, "memory": 79028224, "output": null, "result": -1, "signal": 0, "cpu_time": 322, "exit_code": 0, "real_time": 356, "test_case": "30", "output_md5": "7cd71a0dd07fcca99870586c4865d084"}, {"error": 0, "memory": 133488640, "output": null, "result": -1, "signal": 0, "cpu_time": 246, "exit_code": 0, "real_time": 280, "test_case": "31", "output_md5": "691531c4b19e57592ab78ce60781eab4"}]}	C++	f	{"time_cost": 1378, "memory_cost": 133767168}	2018314788	122.39.187.126
2b886facfb3281b7b06d76515af98191	2	12	2021-01-04 05:42:23.70395+00	74	a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nif(a-b < 0 and b-c < 0 and c-d < 0):\n  print("Uphill")\n\nelif(a-b > 0 and b-c > 0 and c-d > 0):\n  print("Downhill")\n\nelif(a==b==c==d):\n  print("Flat Land")\n\nelse:\n  print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9068544, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9068544}	2015310543	115.145.154.253
d9bce75e43f2df0f89292714b97954b7	2	13	2021-01-04 06:18:12.414371+00	76	word = input()\npossible = ["H", "I", "N", "O", "S", "X", "Z"]\nempty = []\n\nfor i in range(len(word)):\n    if word[i] in possible:\n        empty.append("TRUE")\n    else:\n        empty.append("FALSE")\n\nif "FALSE" in empty:\n    print("NO")\nelse:\n    print("YES")	4	{"err": null, "data": [{"error": 0, "memory": 7393280, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 12, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7376896, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 10, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7467008, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 11, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7376896, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 13, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7311360, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 12, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7409664, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 13, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7315456, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 12, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7483392, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 14, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7426048, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 11, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7376896, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 12, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 12, "memory_cost": 7483392}	2020312429	211.105.153.248
ae98298266945260b5cb4e20cf387102	2	15	2021-01-04 05:38:52.598178+00	64	a,b=input().split()\na=int(a)\nb=int(b)\n\nnumber=[]\nfriend=[]\nfor i in range(a):\n    c=int(input())\n    number.append(c)\nfor i in range(b):\n    c,d=input().split()\n    c=int(c)\n    d=int(d)\n    k=[c,d]\n    friend.append(k)\n\nresult=[]\nfor i in range(b):\n    if i==0:\n        result.append(friend[i])\n    else:\n        first=-1\n        second=-1\n        temp1=friend[i][0]\n        temp2=friend[i][1]\n        for j in range(len(result)):\n            if temp1 in result[j]:\n                first=j\n                break\n        for j in range(len(result)):\n            if temp2 in result[j]:\n                second=j\n                break\n        if first==-1 and second== -1:\n            list1=[temp1,temp2]\n            result.append(list1)\n        elif first==-1:\n            result[second].append(temp1)\n        elif second==-1:\n            result[first].append(temp2)\n        else:\n            if first!=second:\n                result[first]=result[first]+result[second]\n            \n                result.remove(result[second])\ncount=0\nfor i in range(len(result)):\n    sum=0\n    for j in result[i]:\n        sum+=number[j]\n    if sum!=0:\n        print("IMPOSSIBLE")\n        count=1\n        break\nif count==0:\n    print("POSSIBLE")	1	{"err": null, "data": [{"error": 0, "memory": 12488704, "output": null, "result": 0, "signal": 0, "cpu_time": 881, "exit_code": 0, "real_time": 886, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 13180928, "output": null, "result": 1, "signal": 0, "cpu_time": 1076, "exit_code": 0, "real_time": 1078, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 10981376, "output": null, "result": 0, "signal": 0, "cpu_time": 560, "exit_code": 0, "real_time": 569, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 15147008, "output": null, "result": 0, "signal": 0, "cpu_time": 590, "exit_code": 0, "real_time": 603, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10452992, "output": null, "result": 0, "signal": 0, "cpu_time": 393, "exit_code": 0, "real_time": 409, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10137600, "output": null, "result": 0, "signal": 0, "cpu_time": 503, "exit_code": 0, "real_time": 512, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 12206080, "output": null, "result": 1, "signal": 0, "cpu_time": 1021, "exit_code": 0, "real_time": 1030, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9936896, "output": null, "result": 0, "signal": 0, "cpu_time": 420, "exit_code": 0, "real_time": 429, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11829248, "output": null, "result": 1, "signal": 0, "cpu_time": 1522, "exit_code": 0, "real_time": 1526, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 1522, "memory_cost": 15147008}	2017314804	113.199.59.51
fa96058f4f612dab4b3c9ea0cf87652b	2	16	2021-01-04 05:45:29.841907+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 1e5 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nvector <int> vi;\nint n, m, sum;\nLL dp[max_v];\nbool vist[max_v];\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\tci(n >> m);\n\tfa(i, 0, n)\n\t{\n\t\tint x; ci(x);\n\t\tsum += x*x;\n\t\tvi.push_back(x);\n\t}\n\t\n\tfill(dp, dp + max_v, INF);\n\n\tdp[sum] = 0;\n\tvist[sum] = 1;\n\n\tset<int> tar[2];\n\tbool tog= false;\n\ttar[tog].insert(sum);\n\n\tfa(i, 0, vi.size())\n\t{\n\t\tauto x = vi[i];\n\n\t\tfor (auto y : tar[tog])\n\t\t{\n\t\t\tfa(nt, 1, 101)\n\t\t\t{\n\t\t\t\tint cost = abs(nt - x) * abs(nt-x);\n\t\t\t\tint nsum = y - x * x + nt * nt;\n\n\t\t\t\tif (nsum >= 1 && nsum <= 100003)\n\t\t\t\t{\n\t\t\t\t\tckmin(dp[nsum], dp[y] + cost);\n\t\t\t\t\tif (!vist[nsum])\n\t\t\t\t\t{\n\t\t\t\t\t\tvist[nsum] = 1;\n\t\t\t\t\t\ttar[!tog].insert(nsum);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttog = !tog;\n\t}\n\n\tAT;\n\tdp[m] == INF ? co(-1) : co(dp[m]);\n\tAE;\n\n\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 5320704, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 5173248, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 10, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 8777728, "output": null, "result": -1, "signal": 0, "cpu_time": 78, "exit_code": 0, "real_time": 80, "test_case": "3", "output_md5": "bb41d7ba746e551cbae52d2aaab4f625"}, {"error": 0, "memory": 9072640, "output": null, "result": -1, "signal": 0, "cpu_time": 51, "exit_code": 0, "real_time": 53, "test_case": "4", "output_md5": "36165c62f7b7df72863d470d73302627"}, {"error": 0, "memory": 5263360, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 7036928, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 25, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 8564736, "output": null, "result": -1, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 47, "test_case": "7", "output_md5": "c16a5320fa475530d9583c34fd356ef5"}, {"error": 0, "memory": 5431296, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 8, "test_case": "8", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 8183808, "output": null, "result": 0, "signal": 0, "cpu_time": 32, "exit_code": 0, "real_time": 37, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 5300224, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 8863744, "output": null, "result": -1, "signal": 0, "cpu_time": 47, "exit_code": 0, "real_time": 56, "test_case": "11", "output_md5": "0d770c496aa3da6d2c3f2bd19e7b9d6b"}, {"error": 0, "memory": 7577600, "output": null, "result": -1, "signal": 0, "cpu_time": 48, "exit_code": 0, "real_time": 48, "test_case": "12", "output_md5": "03fa2f7502f5f6b9169e67d17cbf51bb"}]}	C++	f	{"time_cost": 78, "memory_cost": 9072640}	2018314788	115.145.246.12
3d85133303636422aabea2ba998df34c	2	12	2021-01-04 08:19:49.661362+00	80	a = input()\nb = input()\nc = input()\nd = input()\nif (a<b) and (b<c) and (c<d):\n  print('Uphill')\nelif (a>b) and (b>c) and (c>d):\n  print('Downhill')\nelif (a==b) and (b==c) and (c==d):\n  print("Flat Land")\nelse:\n  print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 8708096, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8888320, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8699904, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8867840, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 18, "memory_cost": 8957952}	hdh12345	115.145.188.47
e91bff2d136b1d8d7140525226dd8de2	2	12	2021-01-04 08:32:10.003527+00	82	#include <stdio.h>\n\nint main(void){\n  \n  int h1,h2,h3,h4;\n  scanf("%d",&h1);\n  getchar();\n  scanf("%d",&h2);\n  getchar();\n  scanf("%d",&h3);\n  getchar();\n  scanf("%d",&h4);\n  if (h1>h2&& h2>h3 &&h3>h4)\n    printf("Downhill");\n  else if (h1<h2&&h2<h3&&h3<h4)\n    printf("Uphill");\n  else if (h1==h2&&h2==h3&&h3==h4)\n    printf("Flat Land");\n  else\n    printf("Unknown");\n  \n  return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1740800, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1740800}	2020312657	115.145.188.47
848e6c395510438c6e336fceb5950753	2	16	2021-01-04 09:44:29.936165+00	68	#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n, m;\nint dp[10005];\n\nint main()\n{\n    scanf("%d %d",&n,&m);\n    memset(dp,-1,sizeof(dp));\n    dp[0]=0;\n    for(int i=1 ; i<=n ; i++){\n        int x;\n        scanf("%d",&x);\n        for(int j=m ; j>=1 ; j--){\n            for(int k=0 ; k<=100 ; k++){\n                if(j-k*k<0) break;\n                int v=(k-x)*(k-x);\n                if(dp[j-k*k]!=-1 && (dp[j]==-1 || dp[j]>dp[j-k*k]+v)) dp[j]=dp[j-k*k]+v;\n            }\n        }\n    }\n    printf("%d",dp[m]);\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3780608, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3715072, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 3592192, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3715072, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3678208, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3776512, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3682304, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3674112, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3735552, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 3604480, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 9, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3756032, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 9, "test_case": "12", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}]}	C++	f	{"time_cost": 17, "memory_cost": 3780608}	2018312723	39.7.47.101
7edea878142a4fb8bdd696555dd4e1a2	2	12	2021-01-04 05:53:55.02588+00	48	array = []\nfor i in range(4):\n  array.append(int(input()))\n\nsorted_array = sorted(array)\ninverted_array = array[::-1]\n\nif len(set(array)) == 1:\n    print('Flat Land')\nelif array == sorted_array:\n    print('Uphill')\nelif inverted_array == sorted_array:\n    print('Downhill')\nelse:\n    print('Unknown')	-1	{"err": null, "data": [{"error": 0, "memory": 8908800, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 20, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9015296, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	Python3	f	{"time_cost": 14, "memory_cost": 9105408}	2017314875	175.209.114.219
a7639dcba7497974c16087472dc0983c	2	12	2021-01-04 05:55:01.72261+00	76	height = []\n\nfor i in range(4):\n  h = int(input())\n  height.append(h)\n\n\nif height[0] < height[1] < height[2] < height[3]:\n    print("Uphill")\nelif height[0] > height[1] > height[2] > height[3]:\n    print("Downhill")\nelif height[0] == height[1] == height[2] == height[3]:\n    print("Flat Land")\nelse:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 7323648, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7462912, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 7360512, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7372800, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 11, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 7331840, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python2	f	{"time_cost": 7, "memory_cost": 7462912}	2020312429	211.105.153.248
348d2db06a56df081688db48024e615e	2	14	2021-01-04 05:56:01.056002+00	36	#include <stdio.h>\nint n;\nint num[1100];\nint mem[1010];\n\nint main ( void )\n{\n\tint i, j, cnt=1, out, MAX = 1, CNT;\n\tint last, now;\n\tscanf("%d", &n);\n\tfor ( i = 1; i <= n; i++ ) {\n\t\tscanf("%d", &num[i]);\n\t\tfor ( j = 1; j < cnt; j++ ) {\n\t\t\tif ( mem[j] == num[i] )\tbreak;\n\t\t}\n\t\tif ( cnt == 1 || j == cnt ) \tmem[cnt++] = num[i];\n\t}\n\tfor ( i = 1; i < cnt; i++ ) {\n\t\tout = mem[i];\n\t\tlast = num[1];\n\t\tCNT = 1;\n\t\tfor ( j = 2; j <= n; j++ ) {\n\t\t\tnow = num[j];\n\t\t\tif ( now == out )\tcontinue; \n\t\t\tif ( last == now )\tCNT++;\n\t\t\telse\t\t\t\tCNT = 1;\n\t\t\t\n\t\t\tif ( CNT > MAX )\tMAX = CNT;\n\t\t\tlast = now;\n\t\t}\n\t}\n\t\n\tprintf("%d\\n", MAX);\n\t\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1753088, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1691648, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1708032, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1740800, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1744896, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1744896, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1708032, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1748992, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1744896, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 1740800, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 1708032, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1740800, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 1757184, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C	f	{"time_cost": 3, "memory_cost": 1757184}	2017313109	211.114.120.219
36ba92a6e22216e830931df959480fb4	2	12	2021-01-04 05:56:46.688599+00	48	array = []\nfor i in range(4):\n  array.append(int(input()))\n\nsorted_array = sorted(array)\ninverted_array = array[::-1]\n\nif len(set(array)) == 1:\n    print('Flat Land')\nelif len(set(array)) != 4:\n    print('Unknown')\nelif array == sorted_array:\n    print('Uphill')\nelif inverted_array == sorted_array:\n    print('Downhill')\nelse:\n    print('Unknown')	0	{"err": null, "data": [{"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9035776}	2017314875	175.209.114.219
e81cd061fc428f467f16b1ceb5213190	2	13	2021-01-05 01:44:07.792439+00	25	h = input()\n\nList = ['H','I','N','O','S','X','Z']\nBol= 1\nfor i in range(len(h)+1):\n    if h[i] not in List:\n        print('NO')\n        Bol = 0\nif Bol ==1:          \n    print("YES")	4	{"err": null, "data": [{"error": 0, "memory": 8982528, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 16, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 8962048, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 14, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8876032, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 17, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8941568, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 16, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8945664, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 17, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 8941568, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 16, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 8859648, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 21, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 8953856, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 19, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 8957952, "output": null, "result": 4, "signal": 0, "cpu_time": 18, "exit_code": 1, "real_time": 22, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 8818688, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 20, "test_case": "10", "output_md5": null}]}	Python3	f	{"time_cost": 18, "memory_cost": 8982528}	2020313223	221.143.30.115
1def6061c76020a9fb738b6271f3933e	2	12	2021-01-04 08:24:30.442819+00	80	#include <stdio.h>\n\nint main(void){\n  \n  int h1,h2,h3,h4;\n  scanf("%d",h1);\n  scanf("%d",h2);\n  scanf("%d",h3);\n  scanf("%d",h4);\n  if (h1>h2)&&(h2>h3)&&(h3>h4)\n    printf("Downhill");\n  else if (h1<h2)&&(h2<h3)&&(h3<h4)\n    printf("Uphill");\n  else if (h1==h2)&&(h2==h3)&&(h3==h4)\n    printf("Flat Land");\n  else\n    print("Unknown");\n  \n  return 0;\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/6d0fdac108dd48e49a0a9295fc485565/main.c: In function 'main':\\n/judger/run/6d0fdac108dd48e49a0a9295fc485565/main.c:10:15: error: expected identifier before '(' token\\n   if (h1>h2)&&(h2>h3)&&(h3>h4)\\n               ^\\n/judger/run/6d0fdac108dd48e49a0a9295fc485565/main.c:12:20: error: expected identifier before '(' token\\n   else if (h1<h2)&&(h2<h3)&&(h3<h4)\\n                    ^\\n/judger/run/6d0fdac108dd48e49a0a9295fc485565/main.c:14:21: error: expected identifier before '(' token\\n   else if (h1==h2)&&(h2==h3)&&(h3==h4)\\n                     ^"}	hdh12345	115.145.188.47
5e14f7b99a4651bcf44020982d1034af	2	15	2021-01-04 05:59:32.065778+00	62	#include<iostream>\n#include<algorithm>\n#include<vector>\n#include<queue>\n\nint N, M, fin[10005], visited[10005];\nstd::vector<int> graph[10005];\n\nvoid debting(int start){\n    std::queue<int> bfs;\n    std::vector<int> connection;\n    int temp;\n\n    bfs.push(start);\n    visited[start] = 1;\n    connection.push_back(start);\n\n    while(!bfs.empty()){\n        temp = bfs.front();\n        bfs.pop();\n        for(int i = 0; i < graph[temp].size(); ++i){\n            if(!visited[graph[temp][i]]){\n                bfs.push(graph[temp][i]);\n                visited[graph[temp][i]] = 1;\n                connection.push_back(graph[temp][i]);\n            }\n        }\n    }\n    int total = 0;\n    for(int i = 0; i < connection.size(); ++i){\n        total += fin[connection[i]];\n    }\n    if(total >= 0){\n        for(int i = 0; i < connection.size(); ++i)\n            fin[connection[i]] = 0;\n    }\n}\n\nint main(){\n    int vera, verb;\n    scanf("%d %d", &N, &M);\n    for(int i = 0; i < N; ++i)\n        scanf("%d", &fin[i]);\n    for(int i = 0; i < M; ++i){\n        scanf("%d %d", &vera, &verb);\n        graph[vera].push_back(verb);\n        graph[verb].push_back(vera);\n    }\n    for(int i = 0; i < N; ++i)\n        if(!visited[i])\n            debting(i);\n    bool bad_credit = false;\n    for(int i = 0; i < N; ++i)\n        bad_credit = (fin[i] < 0) ? true : bad_credit;\n\n    printf("%s", (bad_credit) ? "IMPOSSIBLE" : "POSSIBLE");\n\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 4296704, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4472832, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4120576, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4669440, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4218880, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 6, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4112384, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4325376, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 9, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 4067328, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4378624, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 10, "memory_cost": 4669440}	2019314665	115.23.186.96
c174b626752fb1f67d4c7b1d23b4992d	2	15	2021-01-04 06:08:11.782988+00	64	a,b=input().split()\na=int(a)\nb=int(b)\n\nnumber=[]\nfriend=[]\nfor i in range(a):\n    c=int(input())\n    number.append(c)\nfor i in range(b):\n    c,d=input().split()\n    c=int(c)\n    d=int(d)\n    k=[c,d]\n    friend.append(k)\n\nresult=[]\nresult_sum=[]\nfor i in range(b):\n    if i==0:\n        result.append(friend[i])\n        zz=number[friend[i][0]]+number[friend[i][1]]\n        result_sum.append(zz)\n    else:\n        first=-1\n        second=-1\n        temp1=friend[i][0]\n        temp2=friend[i][1]\n        for j in range(len(result)):\n            if temp1 in result[j]:\n                first=j\n                break\n        for j in range(len(result)):\n            if temp2 in result[j]:\n                second=j\n                break\n        if first==-1 and second== -1:\n            list1=[temp1,temp2]\n            result.append(list1)\n            \n            result_sum.append(number[temp1]+number[temp2])\n        elif first==-1:\n            result[second].append(temp1)\n           \n            result_sum[second] +=number[temp1]\n        elif second==-1:\n            result[first].append(temp2)\n            \n            result_sum[first] +=number[temp2]\n        else:\n            if first!=second:\n                result[first]=result[first]+result[second]\n\n                result.remove(result[second])\n               \n                result_sum[first] +=result_sum[second]\n                \n                result_sum.remove(result_sum[second])\n        \ncount=0\n\nfor i in range(len(result_sum)):\n    if result_sum[i]!=0:\n        count=1\n        print("IMPOSSIBLE")\n        break\nif count==0:\n    print("POSSIBLE")	1	{"err": null, "data": [{"error": 0, "memory": 12611584, "output": null, "result": 0, "signal": 0, "cpu_time": 885, "exit_code": 0, "real_time": 894, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 13197312, "output": null, "result": 1, "signal": 0, "cpu_time": 1006, "exit_code": 0, "real_time": 1019, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 10952704, "output": null, "result": 0, "signal": 0, "cpu_time": 562, "exit_code": 0, "real_time": 563, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 15077376, "output": null, "result": 0, "signal": 0, "cpu_time": 589, "exit_code": 0, "real_time": 598, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10723328, "output": null, "result": 0, "signal": 0, "cpu_time": 322, "exit_code": 0, "real_time": 327, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10305536, "output": null, "result": -1, "signal": 0, "cpu_time": 472, "exit_code": 0, "real_time": 473, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 12066816, "output": null, "result": 0, "signal": 0, "cpu_time": 990, "exit_code": 0, "real_time": 1004, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9945088, "output": null, "result": 0, "signal": 0, "cpu_time": 425, "exit_code": 0, "real_time": 438, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11972608, "output": null, "result": 1, "signal": 0, "cpu_time": 1550, "exit_code": 0, "real_time": 1552, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 1550, "memory_cost": 15077376}	2017314804	113.199.59.51
5211ca7504ae8dd53135003de022aa55	2	17	2021-01-04 09:04:24.561698+00	78	#define _CRT_SECURE_NO_WARNINGS 1\n\n#include <iostream>\n#include <cstdio>\n#include <utility>\n#include <algorithm>\n#include <string.h>\nusing namespace std;\n\nusing ll = long long int;\n\nstruct Node\n{\n    int cnt[30];\n    int oneNum[30];\n    int zeroNum[30];\n};\nNode t[300001];\nint fLeaf;\n\nchar str[100001];\nint strL;\nint n;\nint st[100001], ed[100001];\nint f[100001];\n\nconstexpr int aNum = 'z' - 'a';\nconstexpr int INF = 987654321;\n\nvoid update(int idx, int num)\n{\n    int node = fLeaf + idx;\n    int ch = str[idx] - 'a';\n    while(node > 0) {\n        t[node].cnt[ch]--;\n        if(t[node].cnt[ch] == 1) {\n            t[node].oneNum[ch] = num;\n        } else if(t[node].cnt[ch] == 0) {\n            t[node].zeroNum[ch] = num;\n        }\n\n        node /= 2;\n    }\n}\n\nbool isValid;\nNode zeroNode;\n\nNode search(int cl, int cr, int l, int r, int node)\n{\n    if(l <= cl && cr <= r) {\n        return t[node];\n    } else if(cr < l || r < cl) {\n        return zeroNode;\n    }\n\n    int m = (cl + cr) / 2;\n\n    Node n1 = search(cl, m, l, r, node * 2);\n    Node n2 = search(m + 1, cr, l, r, node * 2 + 1);\n    Node res = zeroNode;\n\n    for(int i = 0; i < aNum; i++) {\n        //if(n1.cnt[i] + n2.cnt[i] > 1) {\n            res.zeroNum[i] = max(n1.zeroNum[i], n2.zeroNum[i]);\n\n            int l = max(n1.oneNum[i], n2.zeroNum[i]);\n            int r = max(n1.zeroNum[i], n2.oneNum[i]);\n            res.oneNum[i] = min(l, r);\n        //}\n    }\n\n    return res;\n}\n\nint main(void)\n{\n    // freopen("input.txt", "r", stdin);\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    cin >> str;\n    strL = strlen(str);\n    cin >> n;\n    for(int i = 0; i < n; i++) {\n        cin >> st[i] >> ed[i];\n    }\n    for(int i = 0; i < strL; i++) {\n        cin >> f[i];\n    }\n\n\n    fLeaf = 1;\n    while(fLeaf < strL) fLeaf *= 2;\n    for(int i = 0; i < strL; i++) {\n        int chIdx = str[i] - 'a';\n        t[fLeaf + i].cnt[chIdx]++;\n        t[fLeaf + i].zeroNum[chIdx] = INF;\n        if(t[fLeaf + 1].cnt[chIdx] > 1) {\n            t[fLeaf + i].oneNum[chIdx] = INF;\n        }\n    }\n\n    for(int i = fLeaf - 1; i >= 1; i--) {\n        bool isPos = true;\n        int dupNum = 0;\n\n        Node& c1 = t[i * 2];\n        Node& c2 = t[i * 2 + 1];\n\n        for(int j = 0; j < aNum; j++) {\n            t[i].cnt[j] = c1.cnt[j] + c2.cnt[j];\n            t[i].oneNum[j] = c1.oneNum[j] + c2.oneNum[j];\n            t[i].zeroNum[j] = c1.zeroNum[j] + c2.zeroNum[j];\n        }\n    }\n\n    for(int i = 0; i < strL; i++) {\n        update(f[i] - 1, i + 1);\n    }\n\n    int res = 0;\n    for(int i = 0; i < n; i++) {\n        Node rNode = search(0, fLeaf - 1, st[i] - 1, ed[i] - 1, 1);\n        int r = 0;\n        for(int j = 0; j < aNum; j++) {\n            if(rNode.oneNum[j] > r) {\n                r = rNode.oneNum[j];\n            }\n        }\n        if(res < r) res = r;\n    }\n\n    cout << res;\n\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 88109056, "output": null, "result": -1, "signal": 0, "cpu_time": 367, "exit_code": 0, "real_time": 388, "test_case": "4", "output_md5": "e1944d5edda7b859fb00f89723312217"}, {"error": 0, "memory": 88018944, "output": null, "result": 0, "signal": 0, "cpu_time": 359, "exit_code": 0, "real_time": 379, "test_case": "5", "output_md5": "d800c6cf5d304e013ec4f95ab772d62e"}, {"error": 0, "memory": 88002560, "output": null, "result": 0, "signal": 0, "cpu_time": 399, "exit_code": 0, "real_time": 433, "test_case": "6", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 4005888, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "34ed066df378efacc9b924ec161e7639"}, {"error": 0, "memory": 3907584, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "7fe1f8abaad094e0b5cb1b01d712f708"}, {"error": 0, "memory": 4009984, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "3cf166c6b73f030b4f67eeaeba301103"}, {"error": 0, "memory": 3895296, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "8dd48d6a2e2cad213179a3992c0be53c"}, {"error": 0, "memory": 3792896, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "019d385eb67632a7e958e23f24bd07d7"}, {"error": 0, "memory": 4038656, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "12", "output_md5": "05f971b5ec196b8c65b75d2ef8267331"}, {"error": 0, "memory": 6189056, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "13", "output_md5": "8d9fc2308c8f28d2a7d2f6f48801c705"}, {"error": 0, "memory": 6135808, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "14", "output_md5": "ac5dab2e99eee9cf9ec672e383691302"}, {"error": 0, "memory": 6131712, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "15", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 6127616, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 8, "test_case": "16", "output_md5": "90599c8fdd2f6e7a03ad173e2f535751"}, {"error": 0, "memory": 6176768, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "17", "output_md5": "15d185eaa7c954e77f5343d941e25fbd"}, {"error": 0, "memory": 6238208, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "18", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 6098944, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 13, "test_case": "19", "output_md5": "dc16622ddc767e6bc1200fe5df2fbdfb"}, {"error": 0, "memory": 6135808, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 14, "test_case": "20", "output_md5": "90aef91f0d9e7c3be322bd7bae41617d"}, {"error": 0, "memory": 6131712, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "21", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 88039424, "output": null, "result": 0, "signal": 0, "cpu_time": 364, "exit_code": 0, "real_time": 389, "test_case": "22", "output_md5": "017335bad48f4cae20a7fb8201cc1323"}, {"error": 0, "memory": 88117248, "output": null, "result": 0, "signal": 0, "cpu_time": 330, "exit_code": 0, "real_time": 371, "test_case": "23", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 87961600, "output": null, "result": 0, "signal": 0, "cpu_time": 376, "exit_code": 0, "real_time": 405, "test_case": "24", "output_md5": "d1189a6e530de53bd545ae83f266820c"}, {"error": 0, "memory": 87941120, "output": null, "result": 0, "signal": 0, "cpu_time": 357, "exit_code": 0, "real_time": 387, "test_case": "25", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 88018944, "output": null, "result": 0, "signal": 0, "cpu_time": 352, "exit_code": 0, "real_time": 381, "test_case": "26", "output_md5": "8ecdbbf4ca2a3715337c02cb8d2ea4cc"}, {"error": 0, "memory": 88129536, "output": null, "result": 0, "signal": 0, "cpu_time": 367, "exit_code": 0, "real_time": 396, "test_case": "27", "output_md5": "a0e26081e098a15167d39b7194c5e467"}, {"error": 0, "memory": 88125440, "output": null, "result": 0, "signal": 0, "cpu_time": 377, "exit_code": 0, "real_time": 391, "test_case": "28", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 88121344, "output": null, "result": 0, "signal": 0, "cpu_time": 398, "exit_code": 0, "real_time": 422, "test_case": "29", "output_md5": "2b4226dd7ed6eb2d419b881f3ae9c97c"}, {"error": 0, "memory": 87961600, "output": null, "result": 0, "signal": 0, "cpu_time": 378, "exit_code": 0, "real_time": 403, "test_case": "30", "output_md5": "a195e29a87f723b4f0dc559794e86038"}, {"error": 0, "memory": 88109056, "output": null, "result": 0, "signal": 0, "cpu_time": 349, "exit_code": 0, "real_time": 371, "test_case": "31", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}]}	C++	f	{"time_cost": 399, "memory_cost": 88129536}	2016312429	118.40.224.135
20e9a071cb820657ccbb89e5f36cd0b1	2	12	2021-01-04 09:25:47.472483+00	84	#include <stdio.h>\n\nint main(void)\n{\n\tint i;\n\tint num[4];\n\tint cha[3];\n\n\ti = 0;\n\twhile (i < 4)\n\t\tscanf("%d", &num[i++]);\n\ti = 1;\n\twhile (i < 4)\n\t{\n\t\tcha[i - 1] = num[i] - num[i - 1];\n\t\ti++;\n\t}\n\t//printf("%d %d %d\\n", cha[0], cha[1], cha[2]);\n\tif (cha[0] == 0 && cha[1] == 0 && cha[2] == 0)\n\t\tprintf("Flat Land");\n\telse if (cha[0] > 0 && cha[1] > 0 && cha[2] > 0)\n\t\tprintf("Uphill");\n\telse if (cha[0] < 0 && cha[1] < 0 && cha[2] < 0)\n\t\tprintf("Downhill");\n\telse\n\t\tprintf("Unknown");\n}	0	{"err": null, "data": [{"error": 0, "memory": 1597440, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1671168, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1613824, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1671168}	soysauce	58.29.80.140
239c774dc1e84bba5c728f3358ecfa3d	2	16	2021-01-04 06:10:32.404937+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 1e5 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nstruct info\n{\n\tint csum;\n\tint idx;\n\tint cost;\n};\n\nstruct cmp\n{\n\tbool operator()(info x, info y)\n\t{\n\t\treturn x.cost > y.cost;\n\t}\n};\n\nvector <int> vi;\nint n, m, sum;\nint dp[11][max_v];\nbool vist[11][max_v];\npriority_queue<info, vector<info>, cmp> pq;\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\tci(n >> m);\n\tfa(i, 0, n)\n\t{\n\t\tint x; ci(x);\n\t\tsum += x*x;\n\t\tvi.push_back(x);\n\t}\n\t\n\tfa(i, 0, 11) fa(j, 0, max_v) dp[i][j] = INF;\n\tdp[0][sum] = 0;\n\n\tpq.push({ sum,0,0 });\n\n\twhile (!pq.empty())\n\t{\n\t\tinfo cur;\n\n\t\tdo\n\t\t{\n\t\t\tcur = pq.top(); pq.pop();\n\t\t} while (!pq.empty() && vist[cur.idx][cur.csum]);\n\n\t\tif (vist[cur.idx][cur.csum]) break;\n\n\t\tvist[cur.idx][cur.csum] = true;\n\n\t\tif (cur.csum == m)\n\t\t{\n\t\t\tco(cur.cost);\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (cur.idx == n) continue;\n\n\t\tfa(nt, 1, 101)\n\t\t{\n\t\t\tint cost = abs(nt - vi[cur.idx]) * abs(nt - vi[cur.idx]);\n\t\t\tint nsum = cur.csum - vi[cur.idx] * vi[cur.idx] + nt * nt;\n\t\t\t\n\t\t\tif (nsum >= 1 && nsum <= 100003 && dp[cur.idx+1][nsum] > dp[cur.idx][cur.csum] + cost)\n\t\t\t{\n\t\t\t\tdp[cur.idx + 1][nsum] = dp[cur.idx][cur.csum] + cost;\n\t\t\t\tpq.push({ nsum,cur.idx + 1,dp[cur.idx + 1][nsum] });\n\t\t\t}\n\t\t}\n\t}\n\t\n\tco(-1);\n\n\n\treturn 0;\n}	1	{"err": null, "data": [{"error": 0, "memory": 8081408, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 8265728, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 58339328, "output": null, "result": 1, "signal": 0, "cpu_time": 1618, "exit_code": 0, "real_time": 1645, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 58327040, "output": null, "result": 1, "signal": 0, "cpu_time": 1059, "exit_code": 0, "real_time": 1080, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8110080, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 8364032, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 6, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9412608, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 8, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 8077312, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9207808, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 9, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 7987200, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 58359808, "output": null, "result": 1, "signal": 0, "cpu_time": 1351, "exit_code": 0, "real_time": 1372, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 33136640, "output": null, "result": 0, "signal": 0, "cpu_time": 212, "exit_code": 0, "real_time": 233, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 1618, "memory_cost": 58359808}	2018314788	115.145.246.12
2553d4d0248539a1f58a1d85a95aae85	2	16	2021-01-04 06:13:59.506491+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 1e5 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nstruct info\n{\n\tint csum;\n\tint idx;\n\tint cost;\n};\n\nstruct cmp\n{\n\tbool operator()(info x, info y)\n\t{\n\t\treturn x.cost > y.cost;\n\t}\n};\n\nvector <int> vi;\nint n, m, sum;\nint dp[11][max_v];\nbool vist[11][max_v];\npriority_queue<info, vector<info>, cmp> pq;\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\tci(n >> m);\n\tfa(i, 0, n)\n\t{\n\t\tint x; ci(x);\n\t\tsum += x*x;\n\t\tvi.push_back(x);\n\t}\n\t\n\tfa(i, 0, 11) fa(j, 0, max_v) dp[i][j] = INF;\n\tdp[0][sum] = 0;\n\n\tpq.push({ sum,0,0 });\n\n\tint diff = abs(sum - m);\n\n\twhile (!pq.empty())\n\t{\n\t\tinfo cur;\n\n\t\tdo\n\t\t{\n\t\t\tcur = pq.top(); pq.pop();\n\t\t} while (!pq.empty() && vist[cur.idx][cur.csum]);\n\n\t\tif (vist[cur.idx][cur.csum]) break;\n\n\t\tvist[cur.idx][cur.csum] = true;\n\n\t\tif (cur.csum == m)\n\t\t{\n\t\t\tco(cur.cost);\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (cur.idx == n) continue;\n\n\t\tfa(nt, 1, 101)\n\t\t{\n\t\t\tint cost = abs(nt - vi[cur.idx]) * abs(nt - vi[cur.idx]);\n\t\t\tint nsum = cur.csum - vi[cur.idx] * vi[cur.idx] + nt * nt;\n\n\t\t\tif (abs(nsum - m) > diff) continue;\n\t\t\t\n\t\t\tif (nsum >= 1 && nsum <= 100003 && dp[cur.idx+1][nsum] > dp[cur.idx][cur.csum] + cost)\n\t\t\t{\n\t\t\t\tdp[cur.idx + 1][nsum] = dp[cur.idx][cur.csum] + cost;\n\t\t\t\tpq.push({ nsum,cur.idx + 1,dp[cur.idx + 1][nsum] });\n\t\t\t}\n\t\t}\n\t}\n\t\n\tco(-1);\n\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 7897088, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 8007680, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 32808960, "output": null, "result": 0, "signal": 0, "cpu_time": 730, "exit_code": 0, "real_time": 746, "test_case": "3", "output_md5": "a97f6e2fedcabc887911dc9b5fd3ccc3"}, {"error": 0, "memory": 20516864, "output": null, "result": 0, "signal": 0, "cpu_time": 257, "exit_code": 0, "real_time": 258, "test_case": "4", "output_md5": "a3ec6dd8d538712a581e5b24726ce062"}, {"error": 0, "memory": 7950336, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 8052736, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 7901184, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 7929856, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 6, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 8073216, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 6, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 8032256, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 20389888, "output": null, "result": 0, "signal": 0, "cpu_time": 256, "exit_code": 0, "real_time": 261, "test_case": "11", "output_md5": "ac2a728f9f17b5d860b6dabd80a5162f"}, {"error": 0, "memory": 14053376, "output": null, "result": 0, "signal": 0, "cpu_time": 88, "exit_code": 0, "real_time": 92, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 730, "memory_cost": 32808960}	2018314788	115.145.246.12
da7086922a5f8999486dfe9f31d0aa61	2	12	2021-01-04 08:24:50.24131+00	80	#include <stdio.h>\n\nint main(void){\n  \n  int h1,h2,h3,h4;\n  scanf("%d",h1);\n  scanf("%d",h2);\n  scanf("%d",h3);\n  scanf("%d",h4);\n  if (h1>h2)&&(h2>h3)&&(h3>h4)\n    printf("Downhill");\n  else if (h1<h2)&&(h2<h3)&&(h3<h4)\n    printf("Uphill");\n  else if (h1==h2)&&(h2==h3)&&(h3==h4)\n    printf("Flat Land");\n  else\n    printf("Unknown");\n  \n  return 0;\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/62ab7a6a7d0b4f9890fa5d200abdc9af/main.c: In function 'main':\\n/judger/run/62ab7a6a7d0b4f9890fa5d200abdc9af/main.c:10:15: error: expected identifier before '(' token\\n   if (h1>h2)&&(h2>h3)&&(h3>h4)\\n               ^\\n/judger/run/62ab7a6a7d0b4f9890fa5d200abdc9af/main.c:12:20: error: expected identifier before '(' token\\n   else if (h1<h2)&&(h2<h3)&&(h3<h4)\\n                    ^\\n/judger/run/62ab7a6a7d0b4f9890fa5d200abdc9af/main.c:14:21: error: expected identifier before '(' token\\n   else if (h1==h2)&&(h2==h3)&&(h3==h4)\\n                     ^"}	hdh12345	115.145.188.47
bffb2874f8e8a8a43c58417b7a65cb55	2	17	2021-01-04 08:50:03.712549+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 1e5 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nint alph[max_v][26];\nLL arr[max_v*4][26];\nLL lazy[max_v * 4][26];\nint n;\n\nvoid propagate(int node, int nl, int nr,int ap)\n{\n\tif (lazy[node][ap])\n\t{\n\t\tif (nl != nr)\n\t\t{\n\t\t\tlazy[node * 2][ap] += lazy[node][ap];\n\t\t\tlazy[node * 2 + 1][ap] += lazy[node][ap];\n\t\t}\n\n\t\tarr[node][ap] += lazy[node][ap] * (nr - nl + 1);\n\t\tlazy[node][ap] = 0;\n\t}\n}\n\nvoid update(int l, int r, int val, int node, int nl, int nr,int ap)\n{\n\tpropagate(node, nl, nr,ap);\n\n\tif (nr < l || nl > r) return;\n\n\tif (l <= nl && nr <= r)\n\t{\n\t\tlazy[node][ap] += val;\n\t\tpropagate(node, nl, nr,ap);\n\t\treturn;\n\t}\n\n\tint mid = (nl + nr) >> 1;\n\n\tupdate(l, r, val, node * 2, nl, mid,ap);\n\tupdate(l, r, val, node * 2 + 1, mid + 1, nr,ap);\n\n\tarr[node][ap] = arr[node * 2][ap] + arr[node * 2 + 1][ap];\n}\n\nLL query(int l, int r, int node, int nl, int nr,int ap)\n{\n\tpropagate(node, nl, nr,ap);\n\n\tif (nr <l || nl > r) return 0;\n\n\tif (l <= nl && nr <= r) return arr[node][ap];\n\n\tint mid = (nl + nr) >> 1;\n\n\treturn query(l, r, node * 2, nl, mid,ap) + query(l, r, node * 2 + 1, mid + 1, nr,ap);\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\tstring s; ci(s);\n\tfa(i,0,s.size()) ++alph[i+1][s[i] - 'a'];\n\n\tn = s.size();\n\t\n\tfa(i, 2, s.size() + 1) fa(j, 0, 26) alph[i][j] += alph[i - 1][j];\n\t\n\tint q; ci(q);\n\tLL sum = 0;\n\n\tfa(i, 0, q)\n\t{\n\t\tint x, y; ci(x >> y);\n\t\t\n\t\tfa(t, 0, 26)\n\t\t{\n\t\t\tLL c = alph[y][t] - alph[x - 1][t];\n\t\t\tif (c > 1)\n\t\t\t{\n\t\t\t\tupdate(x - 1, y - 1, 1, 1, 0, n - 1, t);\n\t\t\t\tsum += c - 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tLL ut = 0;\n\tint ans = 0;\n\n\tfa(i, 0, n)\n\t{\n\t\tint x; ci(x);\n\n\t\tif (ut >= sum) continue;\n\n\t\tint al = s[x] - 'a';\n\t\tint c = query(x - 1, x - 1, 1, 0, n - 1, al);\n\t\tut += c;\n\t\tupdate(x - 1, x - 1, -c, 1, 0, n - 1, al);\n\t\tans = i+1;\n\t}\n\n\tAT;\n\tco(ans);\n\tAE;\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 75665408, "output": null, "result": -1, "signal": 0, "cpu_time": 1387, "exit_code": 0, "real_time": 1420, "test_case": "4", "output_md5": "04d52f96a2e0d6e0ca8b72e09ccb8ab4"}, {"error": 0, "memory": 75747328, "output": null, "result": -1, "signal": 0, "cpu_time": 328, "exit_code": 0, "real_time": 377, "test_case": "5", "output_md5": "9ea94aee3e419f6c26dcb261e6362433"}, {"error": 0, "memory": 123060224, "output": null, "result": -1, "signal": 0, "cpu_time": 250, "exit_code": 0, "real_time": 294, "test_case": "6", "output_md5": "3dcd864a8fe733cded5b40d23565abea"}, {"error": 0, "memory": 3964928, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "7", "output_md5": "57aeee35c98205091e18d1140e9f38cf"}, {"error": 0, "memory": 3846144, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "20f07591c6fcb220ffe637cda29bb3f6"}, {"error": 0, "memory": 3969024, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "a516a87cfcaef229b342c437fe2b95f7"}, {"error": 0, "memory": 3977216, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 7, "test_case": "10", "output_md5": "74db120f0a8e5646ef5a30154e9f6deb"}, {"error": 0, "memory": 3903488, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "d395771085aab05244a4fb8fd91bf4ee"}, {"error": 0, "memory": 4055040, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c3c59e5f8b3e9753913f4d435b53c308"}, {"error": 0, "memory": 5984256, "output": null, "result": -1, "signal": 0, "cpu_time": 28, "exit_code": 0, "real_time": 40, "test_case": "13", "output_md5": "52947e0ade57a09e4a1386d08f17b656"}, {"error": 0, "memory": 5832704, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 11, "test_case": "14", "output_md5": "270edd69788dce200a3b395a6da6fdb7"}, {"error": 0, "memory": 7204864, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 9, "test_case": "15", "output_md5": "62da8c91ce7b10846231921795d6059e"}, {"error": 0, "memory": 6004736, "output": null, "result": -1, "signal": 0, "cpu_time": 28, "exit_code": 0, "real_time": 29, "test_case": "16", "output_md5": "faafda66202d234463057972460c04f5"}, {"error": 0, "memory": 5976064, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 11, "test_case": "17", "output_md5": "270edd69788dce200a3b395a6da6fdb7"}, {"error": 0, "memory": 7131136, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 11, "test_case": "18", "output_md5": "65a31da7ede4dc9b03fb5bbf8f442ce9"}, {"error": 0, "memory": 5890048, "output": null, "result": -1, "signal": 0, "cpu_time": 28, "exit_code": 0, "real_time": 29, "test_case": "19", "output_md5": "a14ac55a4f27472c5d894ec1c3c743d2"}, {"error": 0, "memory": 5910528, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 10, "test_case": "20", "output_md5": "270edd69788dce200a3b395a6da6fdb7"}, {"error": 0, "memory": 7307264, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "21", "output_md5": "65a31da7ede4dc9b03fb5bbf8f442ce9"}, {"error": 0, "memory": 75673600, "output": null, "result": -1, "signal": 0, "cpu_time": 159, "exit_code": 0, "real_time": 196, "test_case": "22", "output_md5": "c06047423e2b2352c776abe49c5b8fee"}, {"error": 0, "memory": 123072512, "output": null, "result": -1, "signal": 0, "cpu_time": 113, "exit_code": 0, "real_time": 158, "test_case": "23", "output_md5": "829914395c2494cb1d2c04b01a30d98c"}, {"error": 0, "memory": 78827520, "output": null, "result": -1, "signal": 0, "cpu_time": 165, "exit_code": 0, "real_time": 202, "test_case": "24", "output_md5": "086f0e79294e5ec8e5a38727b06fbfa4"}, {"error": 0, "memory": 123232256, "output": null, "result": -1, "signal": 0, "cpu_time": 142, "exit_code": 0, "real_time": 179, "test_case": "25", "output_md5": "9293d18db741bc605a5a77cff89a7959"}, {"error": 0, "memory": 75661312, "output": null, "result": -1, "signal": 0, "cpu_time": 1390, "exit_code": 0, "real_time": 1423, "test_case": "26", "output_md5": "a84657e483f40d27f8dbb40623d7ef22"}, {"error": 0, "memory": 75730944, "output": null, "result": -1, "signal": 0, "cpu_time": 320, "exit_code": 0, "real_time": 349, "test_case": "27", "output_md5": "9ea94aee3e419f6c26dcb261e6362433"}, {"error": 0, "memory": 123367424, "output": null, "result": -1, "signal": 0, "cpu_time": 235, "exit_code": 0, "real_time": 287, "test_case": "28", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 75669504, "output": null, "result": -1, "signal": 0, "cpu_time": 1429, "exit_code": 0, "real_time": 1450, "test_case": "29", "output_md5": "e2d5b645da58c9ff438ee2a7f168ae61"}, {"error": 0, "memory": 75599872, "output": null, "result": -1, "signal": 0, "cpu_time": 322, "exit_code": 0, "real_time": 343, "test_case": "30", "output_md5": "7cd71a0dd07fcca99870586c4865d084"}, {"error": 0, "memory": 123084800, "output": null, "result": -1, "signal": 0, "cpu_time": 251, "exit_code": 0, "real_time": 277, "test_case": "31", "output_md5": "691531c4b19e57592ab78ce60781eab4"}]}	C++	f	{"time_cost": 1429, "memory_cost": 123367424}	2018314788	122.39.187.126
ff5a87430b66f1d214bb32d1453b05f2	2	17	2021-01-04 09:06:44.267039+00	78	#define _CRT_SECURE_NO_WARNINGS 1\n\n#include <iostream>\n#include <cstdio>\n#include <utility>\n#include <algorithm>\n#include <string.h>\nusing namespace std;\n\nusing ll = long long int;\n\nstruct Node\n{\n    int cnt[30];\n    int oneNum[30];\n    int zeroNum[30];\n};\nNode t[300001];\nint fLeaf;\n\nchar str[100001];\nint strL;\nint n;\nint st[100001], ed[100001];\nint f[100001];\n\nconstexpr int aNum = 'z' - 'a';\nconstexpr int INF = 987654321;\n\nvoid update(int idx, int num)\n{\n    int node = fLeaf + idx;\n    int ch = str[idx] - 'a';\n    while(node > 0) {\n        t[node].cnt[ch]--;\n        if(t[node].cnt[ch] == 1) {\n            t[node].oneNum[ch] = num;\n        } else if(t[node].cnt[ch] == 0) {\n            t[node].zeroNum[ch] = num;\n        }\n\n        node /= 2;\n    }\n}\n\nbool isValid;\nNode zeroNode;\n\nNode search(int cl, int cr, int l, int r, int node)\n{\n    if(l <= cl && cr <= r) {\n        return t[node];\n    } else if(cr < l || r < cl) {\n        return zeroNode;\n    }\n\n    int m = (cl + cr) / 2;\n\n    Node n1 = search(cl, m, l, r, node * 2);\n    Node n2 = search(m + 1, cr, l, r, node * 2 + 1);\n    Node res = zeroNode;\n\n    for(int i = 0; i < aNum; i++) {\n        //if(n1.cnt[i] + n2.cnt[i] > 1) {\n            res.zeroNum[i] = max(n1.zeroNum[i], n2.zeroNum[i]);\n\n            int l = max(n1.oneNum[i], n2.zeroNum[i]);\n            int r = max(n1.zeroNum[i], n2.oneNum[i]);\n            res.oneNum[i] = min(l, r);\n        //}\n    }\n\n    return res;\n}\n\nint main(void)\n{\n    // freopen("input.txt", "r", stdin);\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    cin >> str;\n    strL = strlen(str);\n    cin >> n;\n    for(int i = 0; i < n; i++) {\n        cin >> st[i] >> ed[i];\n    }\n    for(int i = 0; i < strL; i++) {\n        cin >> f[i];\n    }\n\n\n    fLeaf = 1;\n    while(fLeaf < strL) fLeaf *= 2;\n    for(int i = 0; i < strL; i++) {\n        int chIdx = str[i] - 'a';\n        t[fLeaf + i].cnt[chIdx]++;\n    }\n\n    for(int i = fLeaf - 1; i >= 1; i--) {\n        bool isPos = true;\n        int dupNum = 0;\n\n        Node& c1 = t[i * 2];\n        Node& c2 = t[i * 2 + 1];\n\n        for(int j = 0; j < aNum; j++) {\n            t[i].cnt[j] = c1.cnt[j] + c2.cnt[j];\n        }\n    }\n\n    for(int i = 0; i < strL; i++) {\n        update(f[i] - 1, i + 1);\n    }\n\n    int res = 0;\n    for(int i = 0; i < n; i++) {\n        Node rNode = search(0, fLeaf - 1, st[i] - 1, ed[i] - 1, 1);\n        int r = 0;\n        for(int j = 0; j < aNum; j++) {\n            if(rNode.oneNum[j] > r) {\n                r = rNode.oneNum[j];\n            }\n        }\n        if(res < r) res = r;\n    }\n\n    cout << res;\n\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3584000, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 88113152, "output": null, "result": -1, "signal": 0, "cpu_time": 383, "exit_code": 0, "real_time": 408, "test_case": "4", "output_md5": "e1944d5edda7b859fb00f89723312217"}, {"error": 0, "memory": 87969792, "output": null, "result": 0, "signal": 0, "cpu_time": 382, "exit_code": 0, "real_time": 411, "test_case": "5", "output_md5": "d800c6cf5d304e013ec4f95ab772d62e"}, {"error": 0, "memory": 88125440, "output": null, "result": 0, "signal": 0, "cpu_time": 371, "exit_code": 0, "real_time": 409, "test_case": "6", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 3911680, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "7", "output_md5": "34ed066df378efacc9b924ec161e7639"}, {"error": 0, "memory": 3936256, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "8", "output_md5": "7fe1f8abaad094e0b5cb1b01d712f708"}, {"error": 0, "memory": 4018176, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "3cf166c6b73f030b4f67eeaeba301103"}, {"error": 0, "memory": 3903488, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "8dd48d6a2e2cad213179a3992c0be53c"}, {"error": 0, "memory": 3854336, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "11", "output_md5": "019d385eb67632a7e958e23f24bd07d7"}, {"error": 0, "memory": 3903488, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "12", "output_md5": "05f971b5ec196b8c65b75d2ef8267331"}, {"error": 0, "memory": 6189056, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "13", "output_md5": "8d9fc2308c8f28d2a7d2f6f48801c705"}, {"error": 0, "memory": 6017024, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "14", "output_md5": "ac5dab2e99eee9cf9ec672e383691302"}, {"error": 0, "memory": 6250496, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 13, "test_case": "15", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 6193152, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 11, "test_case": "16", "output_md5": "90599c8fdd2f6e7a03ad173e2f535751"}, {"error": 0, "memory": 6189056, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "17", "output_md5": "15d185eaa7c954e77f5343d941e25fbd"}, {"error": 0, "memory": 6184960, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "18", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 6139904, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "19", "output_md5": "dc16622ddc767e6bc1200fe5df2fbdfb"}, {"error": 0, "memory": 6156288, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 9, "test_case": "20", "output_md5": "90aef91f0d9e7c3be322bd7bae41617d"}, {"error": 0, "memory": 6131712, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 8, "test_case": "21", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 88072192, "output": null, "result": 0, "signal": 0, "cpu_time": 372, "exit_code": 0, "real_time": 405, "test_case": "22", "output_md5": "017335bad48f4cae20a7fb8201cc1323"}, {"error": 0, "memory": 88068096, "output": null, "result": 0, "signal": 0, "cpu_time": 413, "exit_code": 0, "real_time": 430, "test_case": "23", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 88059904, "output": null, "result": 0, "signal": 0, "cpu_time": 378, "exit_code": 0, "real_time": 404, "test_case": "24", "output_md5": "d1189a6e530de53bd545ae83f266820c"}, {"error": 0, "memory": 87957504, "output": null, "result": 0, "signal": 0, "cpu_time": 363, "exit_code": 0, "real_time": 393, "test_case": "25", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 88006656, "output": null, "result": 0, "signal": 0, "cpu_time": 374, "exit_code": 0, "real_time": 384, "test_case": "26", "output_md5": "8ecdbbf4ca2a3715337c02cb8d2ea4cc"}, {"error": 0, "memory": 88010752, "output": null, "result": 0, "signal": 0, "cpu_time": 366, "exit_code": 0, "real_time": 392, "test_case": "27", "output_md5": "a0e26081e098a15167d39b7194c5e467"}, {"error": 0, "memory": 88014848, "output": null, "result": 0, "signal": 0, "cpu_time": 396, "exit_code": 0, "real_time": 425, "test_case": "28", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 87953408, "output": null, "result": 0, "signal": 0, "cpu_time": 356, "exit_code": 0, "real_time": 389, "test_case": "29", "output_md5": "2b4226dd7ed6eb2d419b881f3ae9c97c"}, {"error": 0, "memory": 88129536, "output": null, "result": 0, "signal": 0, "cpu_time": 373, "exit_code": 0, "real_time": 397, "test_case": "30", "output_md5": "a195e29a87f723b4f0dc559794e86038"}, {"error": 0, "memory": 88010752, "output": null, "result": 0, "signal": 0, "cpu_time": 354, "exit_code": 0, "real_time": 375, "test_case": "31", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}]}	C++	f	{"time_cost": 413, "memory_cost": 88129536}	2016312429	118.40.224.135
8c67a4878e7aff77542cc8926cd5de24	2	16	2021-01-04 09:48:28.702378+00	68	#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n, m;\nint dp[10005];\n\nint main()\n{\n    scanf("%d %d",&n,&m);\n    memset(dp,-1,sizeof(dp));\n    dp[0]=0;\n    for(int i=1 ; i<=n ; i++){\n        int x;\n        scanf("%d",&x);\n        for(int j=m ; j>=1 ; j--){\n            for(int k=1 ; k<=100 ; k++){\n                if(j-k*k<0) break;\n                int v=(k-x)*(k-x);\n                if(dp[j-k*k]!=-1 && (dp[j]==-1 || dp[j]>dp[j-k*k]+v)) dp[j]=dp[j-k*k]+v;\n            }\n        }\n    }\n    printf("%d",dp[m]);\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3719168, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 3772416, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3575808, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3735552, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3780608, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3674112, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3772416, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3694592, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 3715072, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 8, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3604480, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "12", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}]}	C++	f	{"time_cost": 16, "memory_cost": 3780608}	2018312723	39.7.47.101
6a85e72102cd02fc62708e9e07bae22c	2	12	2021-01-04 10:04:26.831086+00	42	#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n  int h[4];\n  for(int i=0; i<4; ++i){\n    cin>>h[i];\n  }\n  bool flag=1;\n  for(int i=0; i<3; ++i){\n    if(h[i]>=h[i+1]) flag=0;\n  }\n  if(flag){\n    cout<<"Uphill";\n    return 0;\n  }\n  flag=1;\n  for(int i=0; i<3; ++i){\n    if(h[i]<=h[i+1]) flag=0;\n  }\n  if(flag){\n    cout<<"Downhill";\n    return 0;\n  }\n  flag=1;\n  for(int i=0; i<3; ++i){\n    if(h[i]!=h[i+1]) flag=0;\n  }\n  if(flag){\n    cout<<"Flat Land";\n    return 0;\n  }\n  cout<<"Unknown";\n  return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3424256, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3538944}	2019311430	121.135.237.107
7b09b39266edbbbab1b0c3d2951baeb3	2	12	2021-01-04 06:19:36.831606+00	55	typ=0\nprev=0\nprev=int(input())\nfor i in range(3):\n  now=int(input())\n  nowtype=-1\n  if prev<now:\n    nowtype=1\n  elif now>prev:\n    nowtype=2\n  else:\n    nowtype=3\n  if not nowtype==typ:\n    nowtype=4\n    break\n  prev=now\nttl=['Uphill','Downhill','Flat Land','Unknown']\nprint(ttl[typ-1])	-1	{"err": null, "data": [{"error": 0, "memory": 7356416, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7401472, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 10, "test_case": "2", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7409664, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 10, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7213056, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 11, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7249920, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python2	f	{"time_cost": 7, "memory_cost": 7409664}	18seongyun	211.252.203.12
b38975372066068d81f0fb62e0681e63	2	12	2021-01-04 06:22:35.239257+00	55	typ=0\nprev=0\nprev=int(input())\nfor i in range(3):\n  now=int(input())\n  nowtype=-1\n  if prev<now:\n    nowtype=1\n  elif now>prev:\n    nowtype=2\n  else:\n    nowtype=3\n  if typ==0: typ=nowtype\n  if not nowtype==typ:\n    nowtype=4\n    break\n  prev=now\nttl=['Uphill','Downhill','Flat Land','Unknown']\nprint(ttl[typ-1])	-1	{"err": null, "data": [{"error": 0, "memory": 7380992, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7413760, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 7380992, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7356416, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7397376, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}]}	Python2	f	{"time_cost": 13, "memory_cost": 7413760}	18seongyun	211.252.203.12
4bac5e59d59f210ff78bb994f25b1f13	2	12	2021-01-04 08:26:27.756883+00	80	#include <stdio.h>\n\nint main(void){\n  \n  int h1,h2,h3,h4;\n  scanf("%d",&h1);\n  scanf("%d",&h2);\n  scanf("%d",&h3);\n  scanf("%d",&h4);\n  if (h1>h2)&&(h2>h3)&&(h3>h4)\n    printf("Downhill");\n  else if (h1<h2)&&(h2<h3)&&(h3<h4)\n    printf("Uphill");\n  else if (h1==h2)&&(h2==h3)&&(h3==h4)\n    printf("Flat Land");\n  else\n    printf("Unknown");\n  \n  return 0;\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/cbeec30c64de4080a02a0aec8aebb1e4/main.c: In function 'main':\\n/judger/run/cbeec30c64de4080a02a0aec8aebb1e4/main.c:10:15: error: expected identifier before '(' token\\n   if (h1>h2)&&(h2>h3)&&(h3>h4)\\n               ^\\n/judger/run/cbeec30c64de4080a02a0aec8aebb1e4/main.c:12:20: error: expected identifier before '(' token\\n   else if (h1<h2)&&(h2<h3)&&(h3<h4)\\n                    ^\\n/judger/run/cbeec30c64de4080a02a0aec8aebb1e4/main.c:14:21: error: expected identifier before '(' token\\n   else if (h1==h2)&&(h2==h3)&&(h3==h4)\\n                     ^"}	hdh12345	115.145.188.47
d2e6dc6fb8f36e1d55a56b64dbb9c9b1	2	12	2021-01-04 12:35:02.393608+00	107	a = int(input("처음"))\nb = int(input("둘"))\nc = int(input("셋"))\nd = int(input("넷"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelse:\n  print("Unknown")	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/4678c131af8e4f7fb3a5f7f379aca831/main.c:1:5: error: expected expression before 'int'\\n a = int(input(\\"처음\\"))\\n     ^~~"}	2020311650	1.251.170.216
7ea61d0c8db85da5c36b7426a2b0e89b	2	15	2021-01-04 08:50:58.312064+00	68	#include<bits/stdc++.h>\n\nusing namespace std;\n\nstruct uf{\n    vector<int> par, sum;\n    uf(int a, int arr[]){\n        par.resize(a+5,-1);\n        sum.resize(a+5);\n        for(int i=0 ; i<a ; i++) sum[i]=arr[i];\n    }\n    int f(int x){\n        if(par[x]==-1) return x;\n        par[x]=f(par[x]);\n        return par[x];\n    }\n    void u(int x, int y){\n        x=f(x), y=f(y);\n        if(x==y) return;\n        par[x]=y;\n        sum[y]+=sum[x];\n    }\n};\n\nint n, m, c[10005];\n\nint main()\n{\n    scanf("%d %d",&n,&m);\n    for(int i=0 ; i<n ; i++) scanf("%d",&c[i]);\n    uf T(n,c);\n    for(int i=0 ; i<m ; i++){\n        int x, y;\n        scanf("%d %d",&x,&y);\n        T.u(x,y);\n    }\n    for(int i=0 ; i<n ; i++){\n        if(T.sum[T.f(i)]){\n            printf("IMPOSSIBLE");\n            return 0;\n        }\n    }\n    printf("POSSIBLE");\n    return 0;\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/751e494e63f541f69eb42a65cd958173/main.c:1:9: fatal error: bits/stdc++.h: No such file or directory\\n #include<bits/stdc++.h>\\n         ^~~~~~~~~~~~~~~\\ncompilation terminated."}	2018312723	39.7.47.101
fef680d29f9781caa6d53b6cb451d757	2	12	2021-01-04 12:39:30.714267+00	107	a = int(input("처음"))\nb = int(input("둘"))\nc = int(input("셋"))\nd = int(input("넷"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelif (a=b and b=c and c=d):\n  print("Flat Land")\nelse:\n  print("Unknown")	-2	{}	Python3	f	{"score": 0, "err_info": "File \\"/judger/run/8ba5d65371ab4b588167e4946bcf5ff4/solution.py\\", line 10\\n    elif (a=b and b=c and c=d):\\n           ^\\nSyntaxError: invalid syntax"}	2020311650	1.251.170.216
145a713584de509360f99af9de438b00	2	13	2021-01-04 10:07:01.150091+00	42	s={H, I, N, O, S, X, Z}\na=input()\nfor x in a:\n  if x not in s:\n    print("NO")\n    exit()\nprint("YES")	4	{"err": null, "data": [{"error": 0, "memory": 8941568, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 16, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 8900608, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 14, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8855552, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 17, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8945664, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 13, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8818688, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 19, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 8781824, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 19, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 8826880, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 14, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 8925184, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 15, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 8937472, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 15, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 8945664, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 17, "test_case": "10", "output_md5": null}]}	Python3	f	{"time_cost": 14, "memory_cost": 8945664}	2019311430	121.135.237.107
860616f6695300166a5774e4176d377c	2	12	2021-01-04 06:23:34.236303+00	55	typ=0\nprev=0\nprev=int(input())\nfor i in range(3):\n  now=int(input())\n  nowtype=-1\n  if prev<now:\n    nowtype=1\n  elif now<prev:\n    nowtype=2\n  else:\n    nowtype=3\n  if typ==0: typ=nowtype\n  if not nowtype==typ:\n    nowtype=4\n    break\n  prev=now\nttl=['Uphill','Downhill','Flat Land','Unknown']\nprint(ttl[typ-1])	-1	{"err": null, "data": [{"error": 0, "memory": 7454720, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 11, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7397376, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 10, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 7385088, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7340032, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 7340032, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	Python2	f	{"time_cost": 8, "memory_cost": 7454720}	18seongyun	211.252.203.12
46a290578287f82b6965ebcdc5d625ec	2	12	2021-01-04 08:26:49.012396+00	80	#include <stdio.h>\n\nint main(void){\n  \n  int h1,h2,h3,h4;\n  scanf("%d",&h1);\n  getchar();\n  scanf("%d",&h2);\n  getchar();\n  scanf("%d",&h3);\n  getchar();\n  scanf("%d",&h4);\n  if (h1>h2)&&(h2>h3)&&(h3>h4)\n    printf("Downhill");\n  else if (h1<h2)&&(h2<h3)&&(h3<h4)\n    printf("Uphill");\n  else if (h1==h2)&&(h2==h3)&&(h3==h4)\n    printf("Flat Land");\n  else\n    printf("Unknown");\n  \n  return 0;\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/3964cd83cd414d969c8979036ee97bef/main.c: In function 'main':\\n/judger/run/3964cd83cd414d969c8979036ee97bef/main.c:13:15: error: expected identifier before '(' token\\n   if (h1>h2)&&(h2>h3)&&(h3>h4)\\n               ^\\n/judger/run/3964cd83cd414d969c8979036ee97bef/main.c:15:20: error: expected identifier before '(' token\\n   else if (h1<h2)&&(h2<h3)&&(h3<h4)\\n                    ^\\n/judger/run/3964cd83cd414d969c8979036ee97bef/main.c:17:21: error: expected identifier before '(' token\\n   else if (h1==h2)&&(h2==h3)&&(h3==h4)\\n                     ^"}	hdh12345	115.145.188.47
9fd3b167409bdbd04e5d5e33bb770b3a	2	15	2021-01-04 08:51:06.81045+00	68	#include<bits/stdc++.h>\n\nusing namespace std;\n\nstruct uf{\n    vector<int> par, sum;\n    uf(int a, int arr[]){\n        par.resize(a+5,-1);\n        sum.resize(a+5);\n        for(int i=0 ; i<a ; i++) sum[i]=arr[i];\n    }\n    int f(int x){\n        if(par[x]==-1) return x;\n        par[x]=f(par[x]);\n        return par[x];\n    }\n    void u(int x, int y){\n        x=f(x), y=f(y);\n        if(x==y) return;\n        par[x]=y;\n        sum[y]+=sum[x];\n    }\n};\n\nint n, m, c[10005];\n\nint main()\n{\n    scanf("%d %d",&n,&m);\n    for(int i=0 ; i<n ; i++) scanf("%d",&c[i]);\n    uf T(n,c);\n    for(int i=0 ; i<m ; i++){\n        int x, y;\n        scanf("%d %d",&x,&y);\n        T.u(x,y);\n    }\n    for(int i=0 ; i<n ; i++){\n        if(T.sum[T.f(i)]){\n            printf("IMPOSSIBLE");\n            return 0;\n        }\n    }\n    printf("POSSIBLE");\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3715072, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3706880, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3686400, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 10, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3719168, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3674112, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 6, "memory_cost": 3719168}	2018312723	39.7.47.101
9bf995c6e0a9dbb40e90e9aa3b5ac3f3	2	12	2021-01-04 09:25:51.888926+00	84	#include <stdio.h>\n\nint main(void)\n{\n\tint i;\n\tint num[4];\n\tint cha[3];\n\n\ti = 0;\n\twhile (i < 4)\n\t\tscanf("%d", &num[i++]);\n\ti = 1;\n\twhile (i < 4)\n\t{\n\t\tcha[i - 1] = num[i] - num[i - 1];\n\t\ti++;\n\t}\n\t//printf("%d %d %d\\n", cha[0], cha[1], cha[2]);\n\tif (cha[0] == 0 && cha[1] == 0 && cha[2] == 0)\n\t\tprintf("Flat Land");\n\telse if (cha[0] > 0 && cha[1] > 0 && cha[2] > 0)\n\t\tprintf("Uphill");\n\telse if (cha[0] < 0 && cha[1] < 0 && cha[2] < 0)\n\t\tprintf("Downhill");\n\telse\n\t\tprintf("Unknown");\n}	0	{"err": null, "data": [{"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1658880}	soysauce	58.29.80.140
254521d49a30c4817d274beea4bcf34c	2	12	2021-01-04 09:58:19.570511+00	88	num_list = int(input())	-1	{"err": null, "data": [{"error": 0, "memory": 8863744, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 19, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9146368, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8916992, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 9101312, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	Python3	f	{"time_cost": 19, "memory_cost": 9146368}	2015312922	218.209.14.16
6979c8c39171422d604bc462e9f07e59	2	12	2021-01-04 06:24:31.731132+00	55	typ=0\nprev=0\nprev=int(input())\nfor i in range(3):\n  now=int(input())\n  nowtype=-1\n  if prev<now:\n    nowtype=1\n  elif now<prev:\n    nowtype=2\n  else:\n    nowtype=3\n  if typ==0: typ=nowtype\n  if not nowtype==typ:\n    typ=4\n    break\n  prev=now\nttl=['Uphill','Downhill','Flat Land','Unknown']\nprint(ttl[typ-1])	0	{"err": null, "data": [{"error": 0, "memory": 7356416, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7294976, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 7217152, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7352320, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 11, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 7438336, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python2	f	{"time_cost": 13, "memory_cost": 7438336}	18seongyun	211.252.203.12
76d9f0f717378611221bdea9442eb379	2	17	2021-01-04 08:27:27.430284+00	69	//================code===================//\n\n#include <bits/stdc++.h>\n#include <unordered_map>\n#include <unordered_set>\n\n#define ci(t) cin>>t\n#define co(t) cout<<t\n#define LL long long\n#define fa(i,a,b) for(int i=a;i<b;++i)\n#define fd(i,a,b) for(int i=a;i>b;--i)\n#define setp pair<pair<int,int>,int>\n#define setl pair<LL,LL>\n#define M_PI 3.14159265358979323846\n#define micro 0.000001\n\n#ifdef OHSOLUTION\n#define ce(t) cerr<<t\n#define AT cerr << "\\n=================ANS=================\\n"\n#define AE cerr << "\\n=====================================\\n"\n#else\n#define AT\n#define AE\n#define ce(t)\n#endif\n\nusing namespace std;\n\nLL gcd(LL a, LL b) { return a % b ? gcd(b, a % b) : b; }\nLL lcm(LL a, LL b) { return (a * b) / gcd(a, b); }\n\npair <int, int> vu[8] = { {0,-1},{0,1},{-1,0} ,{1,0},{-1,1}, {0,1} , {1,1},{1,-1} }; //RDLU EWSN\n\ntemplate<typename T, typename U>\nvoid ckmax(T& a, U b) { a = a < b ? b : a; }\ntemplate<typename T, typename U>\nvoid ckmin(T& a, U b) { a = a > b ? b : a; }\nstruct gcmp { bool operator()(LL a, LL b) { return a < b; } };\nstruct lcmp { bool operator()(LL a, LL b) { return a > b; } };\n\nconst int max_v = 1e5 + 7;\nconst int INF = 1e9 + 7;\nconst LL LNF = 1e18 + 7;\nconst LL mod = 1e9 + 7;\n\nint alph[max_v][26];\nint arr[max_v*4][26];\nint lazy[max_v * 4][26];\nint n;\n\nvoid propagate(int node, int nl, int nr,int ap)\n{\n\tif (lazy[node][ap])\n\t{\n\t\tif (nl != nr)\n\t\t{\n\t\t\tlazy[node * 2][ap] += lazy[node][ap];\n\t\t\tlazy[node * 2 + 1][ap] += lazy[node][ap];\n\t\t}\n\n\t\tarr[node][ap] += lazy[node][ap] * (nr - nl + 1);\n\t\tlazy[node][ap] = 0;\n\t}\n}\n\nvoid update(int l, int r, int val, int node, int nl, int nr,int ap)\n{\n\tpropagate(node, nl, nr,ap);\n\n\tif (nr < l || nl > r) return;\n\n\tif (l <= nl && nr <= r)\n\t{\n\t\tlazy[node][ap] += val;\n\t\tpropagate(node, nl, nr,ap);\n\t\treturn;\n\t}\n\n\tint mid = (nl + nr) >> 1;\n\n\tupdate(l, r, val, node * 2, nl, mid,ap);\n\tupdate(l, r, val, node * 2 + 1, mid + 1, nr,ap);\n\n\tarr[node][ap] = arr[node * 2][ap] + arr[node * 2 + 1][ap];\n}\n\nint query(int l, int r, int node, int nl, int nr,int ap)\n{\n\tpropagate(node, nl, nr,ap);\n\n\tif (nr <l || nl > r) return 0;\n\n\tif (l <= nl && nr <= r) return arr[node][ap];\n\n\tint mid = (nl + nr) >> 1;\n\n\treturn query(l, r, node * 2, nl, mid,ap) + query(l, r, node * 2 + 1, mid + 1, nr,ap);\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(0); cin.tie(0);\t\n\tstring s; ci(s);\n\tfa(i,0,s.size()) ++alph[i+1][s[i] - 'a'];\n\n\tn = s.size();\n\t\n\tfa(i, 2, s.size() + 1) fa(j, 0, 26) alph[i][j] += alph[i - 1][j];\n\t\n\tint q; ci(q);\n\tint sum = 0;\n\n\tfa(i, 0, q)\n\t{\n\t\tint x, y; ci(x >> y);\n\t\t\n\t\tfa(t, 0, 26)\n\t\t{\n\t\t\tint c = alph[y][t] - alph[x - 1][t];\n\t\t\tif (c > 1)\n\t\t\t{\n\t\t\t\tupdate(x - 1, y - 1, 1, 1, 0, n - 1, t);\n\t\t\t\tsum += c - 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tint ut = 0;\n\tint ans = 0;\n\n\tfa(i, 0, n)\n\t{\n\t\tint x; ci(x);\n\n\t\tif (ut >= sum) continue;\n\n\t\tint al = s[x] - 'a';\n\t\tint c = query(x - 1, x - 1, 1, 0, n - 1, al);\n\t\tut += c;\n\t\tupdate(x - 1, x - 1, -c, 1, 0, n - 1, al);\n\t\tans = i+1;\n\t}\n\n\tAT;\n\tco(ans);\n\tAE;\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3661824, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 45076480, "output": null, "result": -1, "signal": 0, "cpu_time": 1238, "exit_code": 0, "real_time": 1247, "test_case": "4", "output_md5": "04d52f96a2e0d6e0ca8b72e09ccb8ab4"}, {"error": 0, "memory": 44929024, "output": null, "result": -1, "signal": 0, "cpu_time": 281, "exit_code": 0, "real_time": 294, "test_case": "5", "output_md5": "9ea94aee3e419f6c26dcb261e6362433"}, {"error": 0, "memory": 25149440, "output": null, "result": -1, "signal": 0, "cpu_time": 236, "exit_code": 0, "real_time": 253, "test_case": "6", "output_md5": "cb4b69eb9bd10da82c15dca2f86a1385"}, {"error": 0, "memory": 3837952, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "7", "output_md5": "57aeee35c98205091e18d1140e9f38cf"}, {"error": 0, "memory": 3698688, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "20f07591c6fcb220ffe637cda29bb3f6"}, {"error": 0, "memory": 3837952, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "a516a87cfcaef229b342c437fe2b95f7"}, {"error": 0, "memory": 3817472, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "10", "output_md5": "74db120f0a8e5646ef5a30154e9f6deb"}, {"error": 0, "memory": 3727360, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "d395771085aab05244a4fb8fd91bf4ee"}, {"error": 0, "memory": 3796992, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c3c59e5f8b3e9753913f4d435b53c308"}, {"error": 0, "memory": 5050368, "output": null, "result": -1, "signal": 0, "cpu_time": 32, "exit_code": 0, "real_time": 36, "test_case": "13", "output_md5": "52947e0ade57a09e4a1386d08f17b656"}, {"error": 0, "memory": 4743168, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "14", "output_md5": "270edd69788dce200a3b395a6da6fdb7"}, {"error": 0, "memory": 5550080, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 10, "test_case": "15", "output_md5": "62da8c91ce7b10846231921795d6059e"}, {"error": 0, "memory": 4927488, "output": null, "result": -1, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 24, "test_case": "16", "output_md5": "faafda66202d234463057972460c04f5"}, {"error": 0, "memory": 4726784, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "17", "output_md5": "270edd69788dce200a3b395a6da6fdb7"}, {"error": 0, "memory": 5529600, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 9, "test_case": "18", "output_md5": "65a31da7ede4dc9b03fb5bbf8f442ce9"}, {"error": 0, "memory": 4890624, "output": null, "result": -1, "signal": 0, "cpu_time": 27, "exit_code": 0, "real_time": 27, "test_case": "19", "output_md5": "a14ac55a4f27472c5d894ec1c3c743d2"}, {"error": 0, "memory": 4947968, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 11, "test_case": "20", "output_md5": "270edd69788dce200a3b395a6da6fdb7"}, {"error": 0, "memory": 5672960, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 10, "test_case": "21", "output_md5": "65a31da7ede4dc9b03fb5bbf8f442ce9"}, {"error": 0, "memory": 44904448, "output": null, "result": -1, "signal": 0, "cpu_time": 206, "exit_code": 0, "real_time": 215, "test_case": "22", "output_md5": "c06047423e2b2352c776abe49c5b8fee"}, {"error": 0, "memory": 25030656, "output": null, "result": -1, "signal": 0, "cpu_time": 96, "exit_code": 0, "real_time": 102, "test_case": "23", "output_md5": "b4631d19343f260022ee73087c6e2eab"}, {"error": 0, "memory": 46399488, "output": null, "result": -1, "signal": 0, "cpu_time": 198, "exit_code": 0, "real_time": 220, "test_case": "24", "output_md5": "086f0e79294e5ec8e5a38727b06fbfa4"}, {"error": 0, "memory": 25284608, "output": null, "result": -1, "signal": 0, "cpu_time": 166, "exit_code": 0, "real_time": 172, "test_case": "25", "output_md5": "d2e3e0c2ec10101c41b7f0a11ce93c57"}, {"error": 0, "memory": 45084672, "output": null, "result": -1, "signal": 0, "cpu_time": 1222, "exit_code": 0, "real_time": 1239, "test_case": "26", "output_md5": "a84657e483f40d27f8dbb40623d7ef22"}, {"error": 0, "memory": 45031424, "output": null, "result": -1, "signal": 0, "cpu_time": 284, "exit_code": 0, "real_time": 301, "test_case": "27", "output_md5": "9ea94aee3e419f6c26dcb261e6362433"}, {"error": 0, "memory": 25137152, "output": null, "result": -1, "signal": 0, "cpu_time": 208, "exit_code": 0, "real_time": 229, "test_case": "28", "output_md5": "64be20f6dd1dd46adf110cf871e3ed35"}, {"error": 0, "memory": 44871680, "output": null, "result": -1, "signal": 0, "cpu_time": 1192, "exit_code": 0, "real_time": 1211, "test_case": "29", "output_md5": "e2d5b645da58c9ff438ee2a7f168ae61"}, {"error": 0, "memory": 44912640, "output": null, "result": -1, "signal": 0, "cpu_time": 306, "exit_code": 0, "real_time": 316, "test_case": "30", "output_md5": "7cd71a0dd07fcca99870586c4865d084"}, {"error": 0, "memory": 25243648, "output": null, "result": -1, "signal": 0, "cpu_time": 217, "exit_code": 0, "real_time": 230, "test_case": "31", "output_md5": "71c1806ca28b555c76650f52bb0d2810"}]}	C++	f	{"time_cost": 1238, "memory_cost": 46399488}	2018314788	115.145.246.12
378fc34cdfd733bb0094f3ff7ac2d3a8	2	13	2021-01-04 09:33:40.918001+00	84	#include <stdio.h>\n\nint\tis_spinable(char c)\n{\n\tchar *spinlet = "HINOSXZ";\n\n\tfor (int i = 0; i< 7; i++)\n\t{\n\t\tif (spinlet[i] == c)\n\t\t\treturn (1);\n\t}\n\treturn (0);\n}\n\nint\tft_strlen(char *str)\n{\n\tint i = 0;\n\n\twhile (str && str[i])\n\t\ti++;\n\treturn (i);\n}\n\nint main(void)\n{\n\tchar str[31];\n\tint num;\n\n\tscanf("%s", str);\n\tnum = ft_strlen(str);\n\tfor (int i = 0; i < num; i++)\n\t{\n\t\tif (!is_spinable(str[i]))\n\t\t{\n\t\t\tprintf("NO");\n\t\t\treturn (0);\n\t\t}\n\t}\n\tprintf("YES");\n\treturn (1);\n}	4	{"err": null, "data": [{"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1662976, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 1, "real_time": 1, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 1630208, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 1, "real_time": 1, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 1613824, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1695744, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 1, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 1622016, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 1, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 1687552, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1736704, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 2, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 1585152, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1736704}	soysauce	58.29.80.140
10914243d57f17a73cd8cc3ba69c1c3c	2	13	2021-01-04 09:58:58.072255+00	84	#include <stdio.h>\n\nint main(void)\n{\n\tint bucket[100];\n\tchar str[31];\n\n\tfor (int i = 0; i < 100; i++)\n\t\tbucket[i] = 0;\n\tbucket[(int)'H'] = 1;\n\tbucket[(int)'I'] = 1;\n\tbucket[(int)'N'] = 1;\n\tbucket[(int)'O'] = 1;\n\tbucket[(int)'S'] = 1;\n\tbucket[(int)'X'] = 1;\n\tbucket[(int)'Z'] = 1;\n\n\tscanf("%s", str);\n\tint i = 0;\n\twhile (str[i])\n\t{\n\t\tif (bucket[str[i]] == 0)\n\t\t{\n\t\t\tprintf("NO");\n\t\t\treturn (0);\n\t\t}\n\t\ti++;\n\t}\n\tprintf("YES");\n\treturn (1);\n}	4	{"err": null, "data": [{"error": 0, "memory": 1740800, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1585152, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 1, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 1589248, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 1, "real_time": 2, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1613824, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 1, "real_time": 1, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 1703936, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 1, "real_time": 2, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 1642496, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1695744, "output": null, "result": 4, "signal": 0, "cpu_time": 1, "exit_code": 1, "real_time": 1, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 1589248, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1740800}	soysauce	58.29.80.140
906809cfadfb2d5e437d37ee769c7b07	2	13	2021-01-04 10:07:34.502914+00	42	import sys\ns={H, I, N, O, S, X, Z}\na=input()\nfor x in a:\n  if x not in s:\n    print("NO")\n    sys.exit()\nprint("YES")	4	{"err": null, "data": [{"error": 0, "memory": 8986624, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 15, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 8945664, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8904704, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 16, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8769536, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 19, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8949760, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 20, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 8740864, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 19, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 9035776, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 14, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 8962048, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 19, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 8957952, "output": null, "result": 4, "signal": 0, "cpu_time": 17, "exit_code": 1, "real_time": 17, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 8929280, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 17, "test_case": "10", "output_md5": null}]}	Python3	f	{"time_cost": 17, "memory_cost": 9035776}	2019311430	121.135.237.107
b5da19838fb2f90d8c90b35b7d6532cd	2	13	2021-01-04 10:19:48.030543+00	12	#include <iostream>\n#include <algorithm>\n#include <string>\nusing namespace std;\nstring s;\n//H,I,N,O,S,X,Z\nint check(int a)\n{\n    if (s[a] == 'H' || s[a] == 'I' || s[a] == 'N' || s[a] == 'O' || s[a] == 'S' || s[a] == 'X' || s[a] == 'Z')\n        return true;\n    return false;\n}\nint main()\n{\n    cin >> s;\n    for (int i = 0; i < s.size(); i++)\n    {\n        if (!check(i))\n        {\n            cout << "NO" << endl;\n            return 0;\n        }\n    }\n    cout << "YES" << endl;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3362816, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3465216, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3424256, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3371008, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3358720, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3596288}	2016311327	121.136.228.184
1c8f664f4b8888ed96f4326d72b112fb	2	12	2021-01-04 06:40:10.762678+00	70	a,b,c,d=[int(input())for i in range(4)]\n\nif a<b and b<c and c<d:\n    ans='Uphill'\nelif a>b and b>c and c>d:\n    ans='Downhill'\nelif a==b and b==c and c==d:\n    ans='Flat Land'\nelse:\n    ans='Unknown'\nprint(ans)	0	{"err": null, "data": [{"error": 0, "memory": 8974336, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9011200}	2019711486	115.145.209.163
a7f13e363ab9174379d03fd2a89257bd	2	12	2021-01-04 06:40:16.088996+00	70	a,b,c,d=[int(input())for i in range(4)]\n\nif a<b and b<c and c<d:\n    ans='Uphill'\nelif a>b and b>c and c>d:\n    ans='Downhill'\nelif a==b and b==c and c==d:\n    ans='Flat Land'\nelse:\n    ans='Unknown'\nprint(ans)	0	{"err": null, "data": [{"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9023488}	2019711486	115.145.209.163
24d2cdce5c06eb7a10671475d1ee271a	2	20	2021-01-04 06:40:18.837585+00	68	#include<bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\n\nint n;\nvector<ll> lst[1005];\n\nint main()\n{\n    scanf("%d",&n);\n    for(int i=1 ; i<=n*(n-1)/2 ; i++){\n        ll a, b, x;\n        scanf("%lld %lld %lld",&a,&b,&x);\n        lst[a].push_back(x);\n        lst[b].push_back(x);\n    }\n    ll ans=0;\n    for(int i=1 ; i<=n ; i++){\n        sort(lst[i].begin(),lst[i].end());\n        for(int j=n-2 ; j>=0 ; j-=2) ans+=lst[i][j];\n    }\n    printf("%lld",ans);\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3760128, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1c383cd30b7c298ab50293adfecb7b18"}, {"error": 0, "memory": 3719168, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "0304bcc8163cec8f0998932673f23970"}, {"error": 0, "memory": 3817472, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "4", "output_md5": "7224bca49039e768b546ec15dd473078"}, {"error": 0, "memory": 5857280, "output": null, "result": 0, "signal": 0, "cpu_time": 41, "exit_code": 0, "real_time": 42, "test_case": "5", "output_md5": "c5132fdf83d469561e5f6da1b7df9319"}, {"error": 0, "memory": 12558336, "output": null, "result": 0, "signal": 0, "cpu_time": 103, "exit_code": 0, "real_time": 111, "test_case": "6", "output_md5": "336bc13d547531be0ac9ab0a9bbd8c0f"}, {"error": 0, "memory": 12525568, "output": null, "result": 0, "signal": 0, "cpu_time": 113, "exit_code": 0, "real_time": 113, "test_case": "7", "output_md5": "3781800c8bf82c94c6519f1a77562222"}, {"error": 0, "memory": 12382208, "output": null, "result": 0, "signal": 0, "cpu_time": 109, "exit_code": 0, "real_time": 110, "test_case": "8", "output_md5": "5163e398835e644298aaeac3b2d14a48"}, {"error": 0, "memory": 12664832, "output": null, "result": 0, "signal": 0, "cpu_time": 116, "exit_code": 0, "real_time": 117, "test_case": "9", "output_md5": "eee1d238e298be9dd8f5d93de4f9f91f"}, {"error": 0, "memory": 12447744, "output": null, "result": 0, "signal": 0, "cpu_time": 102, "exit_code": 0, "real_time": 114, "test_case": "10", "output_md5": "359928a649af89087cb74051ee57150b"}, {"error": 0, "memory": 12468224, "output": null, "result": 0, "signal": 0, "cpu_time": 108, "exit_code": 0, "real_time": 113, "test_case": "11", "output_md5": "2e50d3168be2a865587d78dcaa08e2f0"}, {"error": 0, "memory": 12382208, "output": null, "result": 0, "signal": 0, "cpu_time": 89, "exit_code": 0, "real_time": 89, "test_case": "12", "output_md5": "27b1ca325db2ff3886e24b4678e691fc"}, {"error": 0, "memory": 12263424, "output": null, "result": 0, "signal": 0, "cpu_time": 89, "exit_code": 0, "real_time": 97, "test_case": "13", "output_md5": "634eeb23467c3247d1f87e1bfb409d22"}, {"error": 0, "memory": 12353536, "output": null, "result": 0, "signal": 0, "cpu_time": 149, "exit_code": 0, "real_time": 154, "test_case": "14", "output_md5": "0f7ffbca84b8a2cd32fec1576a4675c7"}, {"error": 0, "memory": 12468224, "output": null, "result": 0, "signal": 0, "cpu_time": 83, "exit_code": 0, "real_time": 88, "test_case": "15", "output_md5": "4bc3ea75ff97347388852330b7eb136c"}, {"error": 0, "memory": 12451840, "output": null, "result": 0, "signal": 0, "cpu_time": 93, "exit_code": 0, "real_time": 97, "test_case": "16", "output_md5": "409ac118463129b1adfa64f08d6e1853"}, {"error": 0, "memory": 12574720, "output": null, "result": 0, "signal": 0, "cpu_time": 135, "exit_code": 0, "real_time": 144, "test_case": "17", "output_md5": "cad5c76d76093317349dbc8f62b77820"}, {"error": 0, "memory": 12390400, "output": null, "result": 0, "signal": 0, "cpu_time": 87, "exit_code": 0, "real_time": 92, "test_case": "18", "output_md5": "25eaff2332195674190f2db8d2dfe4bd"}, {"error": 0, "memory": 12627968, "output": null, "result": 0, "signal": 0, "cpu_time": 102, "exit_code": 0, "real_time": 115, "test_case": "19", "output_md5": "bdcfa581cca93025794eb9d1787b0623"}]}	C++	f	{"time_cost": 149, "memory_cost": 12664832}	2018312723	39.7.47.101
9bb7d305ada438e1cac1ca3293b5e5d1	2	12	2021-01-05 14:05:57.703914+00	142	first = int(input())\nsecond = int(input())\nthird = int(input())\nfourth = int(input())\nif first < second:\n  if second < third:\n    if third < fourth:\n      print("Uphill")\n      return\nelif first == second:\n  if second == third:\n    if third == fourth:\n      print("Flat Land")\n      return\nelif first > second:\n  if second > third:\n    if third > fourth:\n      print("Downhill")\n      return\nprint("Unknown")	-2	{}	Python2	f	{"score": 0, "err_info": "File \\"/judger/run/258aa23313de4774a54600587ab393d4/solution.py\\", line 9\\n    return\\nSyntaxError: 'return' outside function"}	2020311733	1.225.26.118
af2ad4f530a665243105eb7d8bd3d916	2	17	2021-01-04 09:25:38.333583+00	78	#define _CRT_SECURE_NO_WARNINGS 1\n\n#include <iostream>\n#include <cstdio>\n#include <utility>\n#include <algorithm>\n#include <string.h>\nusing namespace std;\n\nusing ll = long long int;\n\nstruct Node\n{\n    int cnt[30];\n    int oneNum[30];\n    int zeroNum[30];\n};\nNode t[300001];\nint fLeaf;\n\nchar str[100001];\nint strL;\nint n;\nint st[100001], ed[100001];\nint f[100001];\n\nconstexpr int aNum = 'z' - 'a' + 1;\n\nvoid update(int idx, int num)\n{\n    int node = fLeaf + idx;\n    int ch = str[idx] - 'a';\n    while(node > 0) {\n        t[node].cnt[ch]--;\n        if(t[node].cnt[ch] == 1) {\n            t[node].oneNum[ch] = num;\n        } else if(t[node].cnt[ch] == 0) {\n            t[node].zeroNum[ch] = num;\n        }\n\n        node /= 2;\n    }\n}\n\nNode zeroNode;\n\nNode search(int cl, int cr, int l, int r, int node)\n{\n    if(l <= cl && cr <= r) {\n        return t[node];\n    } else if(cr < l || r < cl) {\n        return zeroNode;\n    }\n\n    int m = (cl + cr) / 2;\n\n    Node n1 = search(cl, m, l, r, node * 2);\n    Node n2 = search(m + 1, cr, l, r, node * 2 + 1);\n    Node res = zeroNode;\n\n    for(int i = 0; i < aNum; i++) {\n        //if(n1.cnt[i] + n2.cnt[i] > 1) {\n            res.zeroNum[i] = max(n1.zeroNum[i], n2.zeroNum[i]);\n\n            int l = max(n1.oneNum[i], n2.zeroNum[i]);\n            int r = max(n1.zeroNum[i], n2.oneNum[i]);\n            res.oneNum[i] = min(l, r);\n        //}\n    }\n\n    return res;\n}\n\nint main(void)\n{\n    // freopen("input.txt", "r", stdin);\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    cin >> str;\n    strL = strlen(str);\n    cin >> n;\n    for(int i = 0; i < n; i++) {\n        cin >> st[i] >> ed[i];\n    }\n    for(int i = 0; i < strL; i++) {\n        cin >> f[i];\n    }\n\n\n    fLeaf = 1;\n    while(fLeaf < strL) fLeaf *= 2;\n    for(int i = 0; i < strL; i++) {\n        int chIdx = str[i] - 'a';\n        t[fLeaf + i].cnt[chIdx]++;\n    }\n\n    for(int i = fLeaf - 1; i >= 1; i--) {\n        bool isPos = true;\n        int dupNum = 0;\n\n        Node& c1 = t[i * 2];\n        Node& c2 = t[i * 2 + 1];\n\n        for(int j = 0; j < aNum; j++) {\n            t[i].cnt[j] = c1.cnt[j] + c2.cnt[j];\n        }\n    }\n\n    for(int i = 0; i < strL; i++) {\n        update(f[i] - 1, i + 1);\n    }\n\n    int res = 0;\n    for(int i = 0; i < n; i++) {\n        Node rNode = search(0, fLeaf - 1, st[i] - 1, ed[i] - 1, 1);\n        int r = 0;\n        for(int j = 0; j < aNum; j++) {\n            if(rNode.oneNum[j] > r) {\n                r = rNode.oneNum[j];\n            }\n        }\n        if(res < r) res = r;\n    }\n\n    cout << res;\n\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 88031232, "output": null, "result": 0, "signal": 0, "cpu_time": 381, "exit_code": 0, "real_time": 406, "test_case": "4", "output_md5": "023fcbb6cc093f6f06e0cfcb02565a48"}, {"error": 0, "memory": 88014848, "output": null, "result": 0, "signal": 0, "cpu_time": 377, "exit_code": 0, "real_time": 406, "test_case": "5", "output_md5": "d800c6cf5d304e013ec4f95ab772d62e"}, {"error": 0, "memory": 87949312, "output": null, "result": 0, "signal": 0, "cpu_time": 363, "exit_code": 0, "real_time": 388, "test_case": "6", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 3911680, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "7", "output_md5": "34ed066df378efacc9b924ec161e7639"}, {"error": 0, "memory": 3907584, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "7fe1f8abaad094e0b5cb1b01d712f708"}, {"error": 0, "memory": 4001792, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "9", "output_md5": "3cf166c6b73f030b4f67eeaeba301103"}, {"error": 0, "memory": 3870720, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "8dd48d6a2e2cad213179a3992c0be53c"}, {"error": 0, "memory": 3878912, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "019d385eb67632a7e958e23f24bd07d7"}, {"error": 0, "memory": 3850240, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "12", "output_md5": "05f971b5ec196b8c65b75d2ef8267331"}, {"error": 0, "memory": 6180864, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "13", "output_md5": "8d9fc2308c8f28d2a7d2f6f48801c705"}, {"error": 0, "memory": 6111232, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "14", "output_md5": "ac5dab2e99eee9cf9ec672e383691302"}, {"error": 0, "memory": 6193152, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "15", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 6189056, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "16", "output_md5": "90599c8fdd2f6e7a03ad173e2f535751"}, {"error": 0, "memory": 6266880, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 13, "test_case": "17", "output_md5": "15d185eaa7c954e77f5343d941e25fbd"}, {"error": 0, "memory": 6184960, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "18", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 6180864, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "19", "output_md5": "dc16622ddc767e6bc1200fe5df2fbdfb"}, {"error": 0, "memory": 6135808, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 13, "test_case": "20", "output_md5": "90aef91f0d9e7c3be322bd7bae41617d"}, {"error": 0, "memory": 6012928, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "21", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 88059904, "output": null, "result": 0, "signal": 0, "cpu_time": 344, "exit_code": 0, "real_time": 381, "test_case": "22", "output_md5": "017335bad48f4cae20a7fb8201cc1323"}, {"error": 0, "memory": 88113152, "output": null, "result": 0, "signal": 0, "cpu_time": 356, "exit_code": 0, "real_time": 405, "test_case": "23", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 87965696, "output": null, "result": 0, "signal": 0, "cpu_time": 370, "exit_code": 0, "real_time": 395, "test_case": "24", "output_md5": "d1189a6e530de53bd545ae83f266820c"}, {"error": 0, "memory": 88014848, "output": null, "result": 0, "signal": 0, "cpu_time": 371, "exit_code": 0, "real_time": 396, "test_case": "25", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 87982080, "output": null, "result": 0, "signal": 0, "cpu_time": 371, "exit_code": 0, "real_time": 401, "test_case": "26", "output_md5": "8ecdbbf4ca2a3715337c02cb8d2ea4cc"}, {"error": 0, "memory": 88018944, "output": null, "result": 0, "signal": 0, "cpu_time": 363, "exit_code": 0, "real_time": 401, "test_case": "27", "output_md5": "a0e26081e098a15167d39b7194c5e467"}, {"error": 0, "memory": 88006656, "output": null, "result": 0, "signal": 0, "cpu_time": 367, "exit_code": 0, "real_time": 398, "test_case": "28", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 88018944, "output": null, "result": 0, "signal": 0, "cpu_time": 369, "exit_code": 0, "real_time": 406, "test_case": "29", "output_md5": "2b4226dd7ed6eb2d419b881f3ae9c97c"}, {"error": 0, "memory": 88129536, "output": null, "result": 0, "signal": 0, "cpu_time": 367, "exit_code": 0, "real_time": 391, "test_case": "30", "output_md5": "a195e29a87f723b4f0dc559794e86038"}, {"error": 0, "memory": 88006656, "output": null, "result": 0, "signal": 0, "cpu_time": 366, "exit_code": 0, "real_time": 401, "test_case": "31", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}]}	C++	f	{"time_cost": 381, "memory_cost": 88129536}	2016312429	118.40.224.135
75eaa5c6f29cd1db9581155b43bb892a	2	12	2021-01-04 10:15:33.545715+00	18	#include<bits/stdc++.h>\nint main(){\n  int* x;\n  long long s=1;\n  while(s<<=1) x = malloc(s);\n}	-2	{}	C++	f	{"score": 0, "err_info": "/judger/run/3a5f9157837347a9b47d0786ea5c793e/main.cpp: In function 'int main()':\\n/judger/run/3a5f9157837347a9b47d0786ea5c793e/main.cpp:5:26: error: invalid conversion from 'void*' to 'int*' [-fpermissive]\\n   while(s<<=1) x = malloc(s);\\n                    ~~~~~~^~~"}	2016312332	223.38.23.122
a9f0bafb30772fe0f319b8cca986bd51	2	16	2021-01-04 10:08:22.914322+00	68	#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n, m;\nint dp[15][10005];\n\nint main()\n{\n    scanf("%d %d",&n,&m);\n    memset(dp,-1,sizeof(dp));\n    dp[0][0]=0;\n    for(int i=1 ; i<=n ; i++){\n        int x;\n        scanf("%d",&x);\n        for(int j=m ; j>=1 ; j--){\n            for(int k=1 ; k<=100 ; k++){\n                if(j-k*k<0) break;\n                int v=(k-x)*(k-x);\n                if(dp[i-1][j-k*k]!=-1 && (dp[i][j]==-1 || dp[i][j]>dp[i-1][j-k*k]+v)) dp[i][j]=dp[i-1][j-k*k]+v;\n            }\n        }\n    }\n    printf("%d",dp[n][m]);\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 4308992, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 4337664, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 4165632, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "a97f6e2fedcabc887911dc9b5fd3ccc3"}, {"error": 0, "memory": 4218880, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 21, "test_case": "4", "output_md5": "a3ec6dd8d538712a581e5b24726ce062"}, {"error": 0, "memory": 4280320, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 4214784, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 4165632, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4300800, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4317184, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 4227072, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 4280320, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "11", "output_md5": "ac2a728f9f17b5d860b6dabd80a5162f"}, {"error": 0, "memory": 4165632, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 10, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 20, "memory_cost": 4337664}	2018312723	39.7.47.101
40f41177fa8041c71da8f8a4c597e003	2	12	2021-01-04 10:48:04.2373+00	93	h1=int(input("Enter the first height: "))\nh2=int(input("Enter the second height: "))\nh3=int(input("Enter the third height: "))\nh4=int(input("Enter the fourth height: "))\n\nif h1<h2 and h2<h3 and h3<h4:\n    print("Uphill")\nelif h1>h2 and h2>h3 and h3>h4:\n    print("Downhill")\nelif h1==h2 and h2==h3 and h3==h4:\n    print("Flat land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9015296, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "939f0dcf543386603a0844f7fd62dc31"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 21, "test_case": "2", "output_md5": "fdafce008d2c9e039fb6cd8bbf8d9fc3"}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "c77375339681f6ffe3a0c7d2d0ee2903"}, {"error": 0, "memory": 8974336, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "4", "output_md5": "0f2665224581cede8d6f12a180a5cb5c"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "c77375339681f6ffe3a0c7d2d0ee2903"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9031680}	이지연	114.205.106.66
f0570bb14329b72e9899571652058ce6	2	12	2021-01-04 10:50:58.650449+00	93	h1=input()\nh2=input()\nh3=input()\nh4=input()\n\nif h1<h2 and h2<h3 and h3<h4:\n    print("Uphill")\nelif h1>h2 and h2>h3 and h3>h4:\n    print("Downhill")\nelif h1==h2 and h2==h3 and h3==h4:\n    print("Flat land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 7331840, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 11, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 7385088, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 10, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 7270400, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7495680, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 10, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 7364608, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python2	f	{"time_cost": 11, "memory_cost": 7495680}	이지연	114.205.106.66
848d5724805d737fa5264da04e0f2c62	2	12	2021-01-04 10:56:27.341079+00	92	#include <stdio.h>\n\nint uphill(int* hei)\n{\n\tfor (int i = 1; i < 3; i++)\n\t{\n\t\tif (hei[i] < hei[i + 1])\n\t\t\tcontinue;\n\t\telse\n\t\t{\n\t\t\tprintf("?");\n\t\t\treturn 3;\n\t\t}\n\t}\n\treturn 1;\n}\nint downhill(int* hei)\n{\n\tfor (int i = 1; i < 3; i++)\n\t{\n\t\tif (hei[i] > hei[i + 1])\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn 3;\n\t}\n\treturn 2;\n}\nint flat(int* hei)\n{\n\tfor (int i = 1; i < 3; i++)\n\t{\n\t\tif (hei[i] == hei[i + 1])\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn 3;\n\t}\n\treturn 4;\n}\n\nint main(void)\n{\n\tint height[4];\n\tint i = 0;\n\tint result;\n\tfor(i=0;i<4;i++)\n\t\tscanf("%d", &height[i]);\n\t\tif (height[0] < height[1])\n\t\t\tresult = uphill(height);\n\t\telse if (height[0] > height[1])\n\t\t\tresult = downhill(height);\n\t\telse if (height[0] == height[1])\n\t\t\tresult = flat(height);\n\t\tswitch (result)\n\t\t{\n\t\tcase 1:\n\t\t\tprintf("Uphill");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tprintf("Downhill");\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tprintf("Unknown");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tprintf("Flat Land");\n\t\t}\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1703936}	2016314598	211.200.250.69
52c2858faab3fc6f95721470cf11a336	2	12	2021-01-04 11:06:15.088668+00	97	a = []\nfor i in range(0,4):\n  a.append(input())\n\noutput = ""\nif a[0] < a[1]:  \n  output = "Uphill"\nelif a[0] > a[1]: \n  output = "Downhill"\nelif a[0] == a[1]: \n  output = "Flat Land"\n\nif output == "Uphill":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n < a[i+1]:\n      output = "Unknown"\n      break\nelif output == "Downhill":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n > a[i+1]:\n      output = "Unknown"\n      break\nelif output == "Flat Land":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n == a[i+1]:\n      output = "Unknown"\n      break\nprint(output)	-1	{"err": null, "data": [{"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8884224, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 21, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8892416, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 20, "memory_cost": 8949760}	2013314222	125.176.139.181
1eec7a24d609897248e1cf3eb57e3569	2	12	2021-01-04 10:14:14.548003+00	12	#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nint main()\n{\n    vector<int> v(4);\n    for (int i = 0; i < 4; i++)\n    {\n        cin >> v[i];\n    }\n    if (v[0] > v[1] && v[1] > v[2] && v[2] > v[3])\n        cout << "Downhill\\n";\n    else if (v[3] > v[2] && v[2] > v[1] && v[1] > v[0])\n        cout << "Uphill\\n";\n    else if (v[0] == v[1] && v[1] == v[2] && v[3] == v[2])\n        cout << "Flat Land\\n";\n    else\n        cout << "Unknown\\n";\n}	0	{"err": null, "data": [{"error": 0, "memory": 3293184, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3387392, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 1, "memory_cost": 3624960}	2016311327	121.136.228.184
c004c1db08a882cf3da5a7f771a9cbee	2	12	2021-01-04 10:48:11.818683+00	93	h1=int(input("Enter the first height: "))\nh2=int(input("Enter the second height: "))\nh3=int(input("Enter the third height: "))\nh4=int(input("Enter the fourth height: "))\n\nif h1<h2 and h2<h3 and h3<h4:\n    print("Uphill")\nelif h1>h2 and h2>h3 and h3>h4:\n    print("Downhill")\nelif h1==h2 and h2==h3 and h3==h4:\n    print("Flat land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "939f0dcf543386603a0844f7fd62dc31"}, {"error": 0, "memory": 8990720, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "fdafce008d2c9e039fb6cd8bbf8d9fc3"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "c77375339681f6ffe3a0c7d2d0ee2903"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "0f2665224581cede8d6f12a180a5cb5c"}, {"error": 0, "memory": 8974336, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "c77375339681f6ffe3a0c7d2d0ee2903"}]}	Python3	f	{"time_cost": 14, "memory_cost": 9035776}	이지연	114.205.106.66
7ad67b621e25287e325e50929d00c7f2	2	12	2021-01-04 10:53:07.5375+00	93	h1=input()\nh2=input()\nh3=input()\nh4=input()\n\nif h1<h2 and h2<h3 and h3<h4:\n    print("Uphill")\nelif h1>h2 and h2>h3 and h3>h4:\n    print("Downhill")\nelif h1==h2 and h2==h3 and h3==h4:\n    print("Flat land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 8966144, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8937472, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8888320, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 13, "memory_cost": 9039872}	이지연	114.205.106.66
f33f089fcf48a4b59e448ad26b88562f	2	12	2021-01-04 11:08:14.216574+00	97	a = []\nfor i in range(0,4):\n  a.append(input())\n\noutput = ""\nif a[0] < a[1]:  \n  output = "Uphill"\nelif a[0] > a[1]: \n  output = "Downhill"\nelif a[0] == a[1]: \n  output = "Flat Land"\n\nif output == "Uphill":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n <= a[i+1]:\n      output = "Unknown"\n      break\nelif output == "Downhill":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n >= a[i+1]:\n      output = "Unknown"\n      break\nelif output == "Flat Land":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n == a[i+1]:\n      output = "Unknown"\n      break\nprint(output)	-1	{"err": null, "data": [{"error": 0, "memory": 8888320, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8892416, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8880128, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 19, "memory_cost": 9031680}	2013314222	125.176.139.181
41537f278cf0b332fc7c9df08b1c9cd9	2	12	2021-01-04 12:40:48.355692+00	107	a = int(input("처음"))\nb = int(input("둘"))\nc = int(input("셋"))\nd = int(input("넷"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelif (a=d and b=d and c=d):\n  print("Flat Land")\nelse:\n  print("Unknown")	-2	{}	Python3	f	{"score": 0, "err_info": "File \\"/judger/run/829c1e65af844830977cd59f512a6c39/solution.py\\", line 10\\n    elif (a=d and b=d and c=d):\\n           ^\\nSyntaxError: invalid syntax"}	2020311650	1.251.170.216
b58d350c2d6bbeb573831c45825c4af3	2	12	2021-01-04 10:15:07.976375+00	88	num_list = []\nfor _ in range(4):\n    \n    num_list.append(int(input()))\n\nbool_list = []\nfor i in range(len(num_list)-1):\n    if num_list[i] == num_list[i+1]:\n        bool_list.append(1)\n    elif num_list[i] < num_list[i+1]:\n        bool_list.append(2)\n    elif num_list[i] > num_list[i+1]:\n        bool_list.append(3)\n    else:\n        pass\n\nset_ = set(bool_list)\n\nif len(set_) == 1 and sum(bool_list) == 3:\n    print("Flat Land")\nelif len(set_) == 1 and sum(bool_list) == 6:\n    print("Uphill")\nelif len(set_) == 1 and sum(bool_list) == 9:\n    print("Downhill")\nelse:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 20, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9023488}	2015312922	218.209.14.16
4f570f7765a9426b830772d0fb001e34	2	12	2021-01-04 10:15:06.13083+00	18	#include<bits/stdc++.h>\nint main(){\n  int* x;\n  long long s=1;\n  while(1) x = NULL;\n}	1	{"err": null, "data": [{"error": 0, "memory": 3153920, "output": null, "result": 1, "signal": 9, "cpu_time": 2992, "exit_code": 0, "real_time": 2997, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 3178496, "output": null, "result": 1, "signal": 9, "cpu_time": 2996, "exit_code": 0, "real_time": 2997, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 2904064, "output": null, "result": 1, "signal": 9, "cpu_time": 2992, "exit_code": 0, "real_time": 2997, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3153920, "output": null, "result": 1, "signal": 9, "cpu_time": 2991, "exit_code": 0, "real_time": 2996, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3198976, "output": null, "result": 1, "signal": 9, "cpu_time": 2999, "exit_code": 0, "real_time": 3000, "test_case": "5", "output_md5": null}]}	C++	f	{"time_cost": 2999, "memory_cost": 3198976}	2016312332	223.38.23.122
380f1f9a1426e78054a8f4829a54fc93	2	12	2021-01-04 10:15:53.407686+00	18	#include<bits/stdc++.h>\nint main(){\n  void* x;\n  long long s=1;\n  while(s<<=1) x = malloc(s);\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3297280, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3526656, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3301376, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3469312, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 3354624, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	C++	f	{"time_cost": 1, "memory_cost": 3526656}	2016312332	223.38.23.122
f8b290f3d94ff4e56754a1a56677ae62	2	12	2021-01-04 10:48:22.450978+00	93	h1=int(input("Enter the first height: "))\nh2=int(input("Enter the second height: "))\nh3=int(input("Enter the third height: "))\nh4=int(input("Enter the fourth height: "))\n\nif h1<h2 and h2<h3 and h3<h4:\n    print("Uphill")\nelif h1>h2 and h2>h3 and h3>h4:\n    print("Downhill")\nelif h1==h2 and h2==h3 and h3==h4:\n    print("Flat land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 7487488, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "939f0dcf543386603a0844f7fd62dc31"}, {"error": 0, "memory": 7421952, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "fdafce008d2c9e039fb6cd8bbf8d9fc3"}, {"error": 0, "memory": 7356416, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "c77375339681f6ffe3a0c7d2d0ee2903"}, {"error": 0, "memory": 7303168, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "0f2665224581cede8d6f12a180a5cb5c"}, {"error": 0, "memory": 7413760, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "c77375339681f6ffe3a0c7d2d0ee2903"}]}	Python2	f	{"time_cost": 11, "memory_cost": 7487488}	이지연	114.205.106.66
24c30e61e115ce86754c7ef2cf52ca14	2	12	2021-01-04 11:48:33.83518+00	39	def hill(List):\n    current=List[0]\n    Flat=[List[0]]\n    Up=[List[0]]\n    Down=[List[0]]\n    for i in range(1,len(List)):\n        if current==List[i]:\n            Flat.append(List[i])\n        elif current<List[i]:\n            Up.append(List[i])\n        else:\n            Down.append(List[i])\n        current=List[i]\n    if len(Flat)==4:\n        print('Flat land')\n    elif len(Up)==4:\n        print('Uphill')\n    elif len(Down)==4:\n        print('Downhill')\n    else:\n        print('Unknown')\n            \nList=[]\nfor j in range(4):\n    a=int(input())\n    List.append(a)\nhill(List)	-1	{"err": null, "data": [{"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 9089024, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 14, "memory_cost": 9089024}	2019312342	124.56.82.117
fcad51eccd804746988b7e7ed215ac65	2	12	2021-01-04 10:21:34.485195+00	89	temp_1 = int(input())\ntemp_2 = int(input())\ntemp_3 = int(input())\ntemp_4 = int(input())\n\na = temp_1 - temp_2\nb = temp_2 - temp_3\nc = temp_3 - temp_4\n\nif (a<0) and (b<0) and (c<0):\n  print("Uphill")\nelif (a>0) and (b>0) and (c>0):\n  print("Downhill")\nelif (a==0) and (b==0) and (c==0):\n  print("Flat Land")\nelse:\n  print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9060352, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 20, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9060352}	2020314257	14.39.21.208
8e831910786a926941c08349576548cb	2	12	2021-01-04 10:21:47.683013+00	89	temp_1 = int(input())\ntemp_2 = int(input())\ntemp_3 = int(input())\ntemp_4 = int(input())\n\na = temp_1 - temp_2\nb = temp_2 - temp_3\nc = temp_3 - temp_4\n\nif (a<0) and (b<0) and (c<0):\n  print("Uphill")\nelif (a>0) and (b>0) and (c>0):\n  print("Downhill")\nelif (a==0) and (b==0) and (c==0):\n  print("Flat Land")\nelse:\n  print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9068544, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 18, "memory_cost": 9105408}	2020314257	14.39.21.208
a97ea76a0edcd6c7477f2cb839868b9d	2	13	2021-01-04 10:26:21.872769+00	88	check_list = ["H","I","N","O","S","X","Z"]\n\nsample_list = list(input())\nTF = []\nfor alph in sample_list:\n    if alph in check_list:\n        TF.append(True)\n    else:\n        TF.append(False)\n\nif all(TF) == True:\n    print("YES")\nelse:\n    print("NO")	0	{"err": null, "data": [{"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8855552, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8855552, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 19, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9039872}	2015312922	218.209.14.16
b0df74f26ecea0aa96c3069215e067c3	2	12	2021-01-04 10:28:16.090922+00	90	num = 4\na = []\nfor i in range(num):\n    a.append(int(input()))\n\nup = sorted(a)\ndown = sorted(a, reverse=True)\n\n\nif len(set(a))==1:\n    print('Flat Land')\n\nelif a == up:\n    print('Uphill')\n\nelif a == down:\n    print('Downhill')\n\nelse:\n    print('Unknown')	-1	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9064448, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8826880, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9064448}	2014310464	1.241.19.62
58b81803c3d5bbdc30e847e466ef255b	2	12	2021-01-04 11:07:43.896645+00	97	a = []\nfor i in range(0,4):\n  a.append(input())\n\noutput = ""\nif a[0] < a[1]:  \n  output = "Uphill"\nelif a[0] > a[1]: \n  output = "Downhill"\nelif a[0] == a[1]: \n  output = "Flat Land"\n\nif output == "Uphill":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n < a[i+1]:\n      output = "Unknown"\n      break\nelif output == "Downhill":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n > a[i+1]:\n      output = "Unknown"\n      break\nelif output == "Flat Land":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n == a[i+1]:\n      output = "Unknown"\n      break	-1	{"err": null, "data": [{"error": 0, "memory": 8859648, "output": null, "result": -1, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 20, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8888320, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 20, "test_case": "3", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	Python3	f	{"time_cost": 20, "memory_cost": 8957952}	2013314222	125.176.139.181
8397f3fba7b157a10f8f1a47c590b07c	2	12	2021-01-04 12:41:59.024528+00	107	a = int(input("처음"))\nb = int(input("둘"))\nc = int(input("셋"))\nd = int(input("넷"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelif a=b=c=d:\n  print("Flat Land")\nelse:\n  print("Unknown")	-2	{}	Python3	f	{"score": 0, "err_info": "File \\"/judger/run/d88190ba42104016adafcc9100813f55/solution.py\\", line 10\\n    elif a=b=c=d:\\n          ^\\nSyntaxError: invalid syntax"}	2020311650	1.251.170.216
240f788d6e7d924e6761b4aa2af20160	2	12	2021-01-04 10:29:50.064083+00	90	num = 4\na = []\nfor i in range(num):\n    a.append(int(input()))\n\nup = sorted(a)\ndown = sorted(a, reverse=True)\n\n\nif len(set(a))==1:\n    print('Flat Land')\n\nelif a == up:\n    print('Uphill')\n\nelif a == down:\n    print('Downhill')\n\nelse:\n    print('Unknown')	-1	{"err": null, "data": [{"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9060352, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8802304, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8876032, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	Python3	f	{"time_cost": 10, "memory_cost": 9060352}	2014310464	1.241.19.62
c6d480b411d351d0290cd81253496cb0	2	17	2021-01-04 10:50:33.346618+00	68	#include<bits/stdc++.h>\n\nusing namespace std;\n\nchar s[100005];\nint n, qn, q[100005][2], m[100005];\nint sum[30][100005];\n\nbool pos(int x)\n{\n    memset(sum,0,sizeof(sum));\n    for(int i=1 ; i<=n ; i++) sum[s[i]-'a'][i]=1;\n    for(int i=1 ; i<=x ; i++) sum[s[m[i]]-'a'][m[i]]=0;\n    for(int i=0 ; i<26 ; i++){\n        for(int j=1 ; j<=n ; j++) sum[i][j]+=sum[i][j-1];\n    }\n    for(int i=1 ; i<=qn ; i++){\n        for(int j=0 ; j<26 ; j++){\n            if(sum[j][q[i][1]]-sum[j][q[i][0]-1]>1) return false;\n        }\n    }\n    return true;\n}\n\nint main()\n{\n    scanf("%s",&s[1]);\n    n=strlen(&s[1]);\n    scanf("%d",&qn);\n    for(int i=1 ; i<=qn ; i++) scanf("%d %d",&q[i][0],&q[i][1]);\n    for(int i=1 ; i<=n ; i++) scanf("%d",&m[i]);\n    int st=0, fn=n, mid, ans;\n    while(st<=fn){\n        mid=(st+fn)>>1;\n        if(pos(mid)) ans=mid, fn=mid-1;\n        else st=mid+1;\n    }\n    printf("%d",ans);\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 15622144, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 20, "test_case": "1", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 15577088, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 15626240, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 16859136, "output": null, "result": 0, "signal": 0, "cpu_time": 154, "exit_code": 0, "real_time": 167, "test_case": "4", "output_md5": "023fcbb6cc093f6f06e0cfcb02565a48"}, {"error": 0, "memory": 16928768, "output": null, "result": 0, "signal": 0, "cpu_time": 167, "exit_code": 0, "real_time": 196, "test_case": "5", "output_md5": "d800c6cf5d304e013ec4f95ab772d62e"}, {"error": 0, "memory": 16908288, "output": null, "result": 0, "signal": 0, "cpu_time": 116, "exit_code": 0, "real_time": 128, "test_case": "6", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 15745024, "output": null, "result": 0, "signal": 0, "cpu_time": 64, "exit_code": 0, "real_time": 73, "test_case": "7", "output_md5": "34ed066df378efacc9b924ec161e7639"}, {"error": 0, "memory": 15659008, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 20, "test_case": "8", "output_md5": "7fe1f8abaad094e0b5cb1b01d712f708"}, {"error": 0, "memory": 15630336, "output": null, "result": 0, "signal": 0, "cpu_time": 37, "exit_code": 0, "real_time": 53, "test_case": "9", "output_md5": "3cf166c6b73f030b4f67eeaeba301103"}, {"error": 0, "memory": 15638528, "output": null, "result": 0, "signal": 0, "cpu_time": 37, "exit_code": 0, "real_time": 53, "test_case": "10", "output_md5": "8dd48d6a2e2cad213179a3992c0be53c"}, {"error": 0, "memory": 15622144, "output": null, "result": 0, "signal": 0, "cpu_time": 60, "exit_code": 0, "real_time": 74, "test_case": "11", "output_md5": "019d385eb67632a7e958e23f24bd07d7"}, {"error": 0, "memory": 15749120, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 22, "test_case": "12", "output_md5": "05f971b5ec196b8c65b75d2ef8267331"}, {"error": 0, "memory": 15691776, "output": null, "result": 0, "signal": 0, "cpu_time": 47, "exit_code": 0, "real_time": 61, "test_case": "13", "output_md5": "8d9fc2308c8f28d2a7d2f6f48801c705"}, {"error": 0, "memory": 15659008, "output": null, "result": 0, "signal": 0, "cpu_time": 58, "exit_code": 0, "real_time": 70, "test_case": "14", "output_md5": "ac5dab2e99eee9cf9ec672e383691302"}, {"error": 0, "memory": 15650816, "output": null, "result": 0, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 59, "test_case": "15", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 15745024, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "16", "output_md5": "90599c8fdd2f6e7a03ad173e2f535751"}, {"error": 0, "memory": 15601664, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 20, "test_case": "17", "output_md5": "15d185eaa7c954e77f5343d941e25fbd"}, {"error": 0, "memory": 15732736, "output": null, "result": 0, "signal": 0, "cpu_time": 72, "exit_code": 0, "real_time": 90, "test_case": "18", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 15659008, "output": null, "result": 0, "signal": 0, "cpu_time": 76, "exit_code": 0, "real_time": 85, "test_case": "19", "output_md5": "dc16622ddc767e6bc1200fe5df2fbdfb"}, {"error": 0, "memory": 15646720, "output": null, "result": 0, "signal": 0, "cpu_time": 77, "exit_code": 0, "real_time": 91, "test_case": "20", "output_md5": "90aef91f0d9e7c3be322bd7bae41617d"}, {"error": 0, "memory": 15781888, "output": null, "result": 0, "signal": 0, "cpu_time": 44, "exit_code": 0, "real_time": 57, "test_case": "21", "output_md5": "a36e841c5230a79c2102036d2e259848"}, {"error": 0, "memory": 17039360, "output": null, "result": 0, "signal": 0, "cpu_time": 195, "exit_code": 0, "real_time": 216, "test_case": "22", "output_md5": "017335bad48f4cae20a7fb8201cc1323"}, {"error": 0, "memory": 17031168, "output": null, "result": 0, "signal": 0, "cpu_time": 153, "exit_code": 0, "real_time": 166, "test_case": "23", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 16855040, "output": null, "result": 0, "signal": 0, "cpu_time": 169, "exit_code": 0, "real_time": 174, "test_case": "24", "output_md5": "d1189a6e530de53bd545ae83f266820c"}, {"error": 0, "memory": 17043456, "output": null, "result": 0, "signal": 0, "cpu_time": 150, "exit_code": 0, "real_time": 163, "test_case": "25", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 16924672, "output": null, "result": 0, "signal": 0, "cpu_time": 208, "exit_code": 0, "real_time": 229, "test_case": "26", "output_md5": "8ecdbbf4ca2a3715337c02cb8d2ea4cc"}, {"error": 0, "memory": 16850944, "output": null, "result": 0, "signal": 0, "cpu_time": 168, "exit_code": 0, "real_time": 181, "test_case": "27", "output_md5": "a0e26081e098a15167d39b7194c5e467"}, {"error": 0, "memory": 16982016, "output": null, "result": 0, "signal": 0, "cpu_time": 132, "exit_code": 0, "real_time": 141, "test_case": "28", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}, {"error": 0, "memory": 17002496, "output": null, "result": 0, "signal": 0, "cpu_time": 191, "exit_code": 0, "real_time": 209, "test_case": "29", "output_md5": "2b4226dd7ed6eb2d419b881f3ae9c97c"}, {"error": 0, "memory": 16924672, "output": null, "result": 0, "signal": 0, "cpu_time": 166, "exit_code": 0, "real_time": 179, "test_case": "30", "output_md5": "a195e29a87f723b4f0dc559794e86038"}, {"error": 0, "memory": 17031168, "output": null, "result": 0, "signal": 0, "cpu_time": 147, "exit_code": 0, "real_time": 160, "test_case": "31", "output_md5": "d3eb9a9233e52948740d7eb8c3062d14"}]}	C++	f	{"time_cost": 208, "memory_cost": 17043456}	2018312723	39.7.47.101
5b07413888cc1bbd7bd28825dcea532e	2	12	2021-01-04 10:54:29.653598+00	92	#include <stdio.h>\n\nint uphill(int* hei)\n{\n\tfor (int i = 1; i < 2; i++)\n\t{\n\t\tif (hei[i] < hei[i + 1])\n\t\t\tcontinue;\n\t\telse\n\t\t{\n\t\t\tprintf("?");\n\t\t\treturn 3;\n\t\t}\n\t}\n\treturn 1;\n}\nint downhill(int* hei)\n{\n\tfor (int i = 1; i < 2; i++)\n\t{\n\t\tif (hei[i] > hei[i + 1])\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn 3;\n\t}\n\treturn 2;\n}\nint flat(int* hei)\n{\n\tfor (int i = 1; i < 2; i++)\n\t{\n\t\tif (hei[i] == hei[i + 1])\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn 3;\n\t}\n\treturn 4;\n}\n\nint main(void)\n{\n\tint height[4];\n\tint i = 0;\n\tint result;\n\tfor(i=0;i<4;i++)\n\t\tscanf("%d", &height[i]);\n\t\tif (height[0] < height[1])\n\t\t\tresult = uphill(height);\n\t\telse if (height[0] > height[1])\n\t\t\tresult = downhill(height);\n\t\telse if (height[0] == height[1])\n\t\t\tresult = flat(height);\n\t\tswitch (result)\n\t\t{\n\t\tcase 1:\n\t\t\tprintf("Uphill");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tprintf("Downhill");\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tprintf("Unknown");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tprintf("Flat Land");\n\t\t}\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1646592, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	C	f	{"time_cost": 1, "memory_cost": 1679360}	2016314598	211.200.250.69
215078d1ce0fc3350725ecdaf99bdb34	2	12	2021-01-04 11:02:22.610543+00	93	h1=input()\nh2=input()\nh3=input()\nh4=input()\n\nif h1<h2 and h2<h3 and h3<h4:\n    print("Uphill")\nelif h1>h2 and h2>h3 and h3>h4:\n    print("Downhill")\nelif h1==h2 and h2==h3 and h3==h4:\n    print("Flat land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 8843264, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8896512, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8949760}	이지연	114.205.106.66
99b6dfa31d4d4a3ee7c229a26cf38c29	2	12	2021-01-04 11:10:15.409178+00	97	a = []\nfor i in range(0,4):\n  a.append(input())\n\noutput = ""\nif a[0] < a[1]:  \n  output = "Uphill"\nelif a[0] > a[1]: \n  output = "Downhill"\nelif a[0] == a[1]: \n  output = "Flat Land"\n\nif output == "Uphill":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n < a[i+1]:\n      output = "Unknown"\n      break\nelif output == "Downhill":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n > a[i+1]:\n      output = "Unknown"\n      break\nelif output == "Flat Land":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n == a[i+1]:\n      output = "Unknown"\n      break\nprint(output)	-1	{"err": null, "data": [{"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8908800, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8851456, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8908800, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9039872}	2013314222	125.176.139.181
c02779569dd03cc41d0bfe5c3ba2fad4	2	12	2021-01-04 12:38:21.633091+00	107	a = int(input("처음"))\nb = int(input("둘"))\nc = int(input("셋"))\nd = int(input("넷"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelif (a=b=c=d):\n  print("Flat Land")\nelse:\n  print("Unknown")	-2	{}	Python3	f	{"score": 0, "err_info": "File \\"/judger/run/93271142e9144affb7381659dd69a03c/solution.py\\", line 10\\n    elif (a=b=c=d):\\n           ^\\nSyntaxError: invalid syntax"}	2020311650	1.251.170.216
86177d17b9bf6685b4ab133b4bca6100	2	12	2021-01-04 10:59:57.803335+00	99	#include <stdio.h>\n\nint main()\n{\n    int arr[4],sub[3];\n    for(int i =0; i<4;i++)\n        scanf("%d",&arr[i]);\n    for(int i=0;i<3;i++)\n        sub[i] = arr[i+1]-arr[i];\n        \n    if(sub[0] > 0 && sub[1] > 0 && sub[2] >0)\n        printf("Uphill");\n    else if (sub[0] < 0 && sub[1] < 0 && sub[2] <0)\n        printf("Downhill");\n    else if (sub[0] == 0 && sub[1] == 0 && sub[2] ==0)\n        printf("Flat land");\n    else\n        printf("Unknown");\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1650688, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1736704}	2016311522	116.126.252.101
44c6d58051cb2f1c5ef9b65015cd7baa	2	12	2021-01-04 11:02:05.677884+00	99	#include <stdio.h>\n\nint main()\n{\n    int arr[4],sub[3];\n    for(int i =0; i<4;i++)\n        scanf("%d",&arr[i]);\n    for(int i=0;i<3;i++)\n        sub[i] = arr[i+1]-arr[i];\n        \n    if(sub[0] > 0 && sub[1] > 0 && sub[2] >0)\n        printf("Uphill");\n    else if (sub[0] < 0 && sub[1] < 0 && sub[2] <0)\n        printf("Downhill");\n    else if (sub[0] == 0 && sub[1] == 0 && sub[2] ==0)\n        printf("Flat Land");\n    else\n        printf("Unknown");\n}	0	{"err": null, "data": [{"error": 0, "memory": 1732608, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1613824, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1732608}	2016311522	116.126.252.101
a1f48dc6b1090a0a85cfdbd5e9e69005	2	16	2021-01-04 12:46:56.361969+00	10	#include <bits/stdc++.h>\nusing namespace std;\nint dp[13][10003];\n\nint main(){\n    ios::sync_with_stdio(false); cin.tie(NULL);\n    int n, m; cin >> n >> m;\n    for(int i = 0; i <= n; i++) fill(dp[i], dp[i] + 10001, -1);\n    dp[0][0] = 0;\n    for(int i = 1; i <= n; i++){\n        int s; cin >> s;\n        for(int j = 0; j < m; j++){\n            if(dp[i - 1][j] == -1) continue;\n            for(int k = 1; k <= 100; k++){\n                if(j + k * k > m) break;\n                if(dp[i][j + k * k] == -1) dp[i][j + k * k] = dp[i - 1][j] + (s - k) * (s - k);\n                else dp[i][j + k * k] = min(dp[i][j + k * k], dp[i - 1][j] + (s - k) * (s - k));\n            }\n        }\n    }\n    if(dp[n][m] == -1) cout << -1;\n    else cout << dp[n][m];\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3764224, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3661824, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 3887104, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "a97f6e2fedcabc887911dc9b5fd3ccc3"}, {"error": 0, "memory": 3821568, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "a3ec6dd8d538712a581e5b24726ce062"}, {"error": 0, "memory": 3780608, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3842048, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3907584, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3866624, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 4059136, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 9, "test_case": "11", "output_md5": "ac2a728f9f17b5d860b6dabd80a5162f"}, {"error": 0, "memory": 3710976, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 15, "memory_cost": 4059136}	2020311119	218.238.218.240
759a798f63a88ed104b2c2354bd16c0f	2	14	2021-01-04 13:50:14.038627+00	111	N = int(input())\n\nlst = [[int(input()),1], [int(input()),1]]\n\nans = 0\n\ndef long(n):\n    global lst\n    global ans\n    if n == lst[-1][0]:\n        lst[-1][1] += 1\n    elif n == lst[0][0]:\n        lst[0][1] += 1\n    else:\n        temp = max([lst[0][1],lst[1][1]])\n        if temp > ans:\n            ans = temp\n        lst.pop(0)\n        lst[0][1] = 1\n        lst.append([n,1])\n        \n\nfor i in range(N-2):\n    long(int(input()))\nif lst[0][1] > ans:\n    ans = lst[0][1]\nif lst[1][1] > ans:\n    ans = lst[1][1]\n\nprint(ans)	-1	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9056256, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9060352, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 20, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 18, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9097216, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9101312, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "16", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "17", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 12, "test_case": "18", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "19", "output_md5": "14bfa6bb14875e45bba028a21ed38046"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 19, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 18, "memory_cost": 9101312}	2015313992	175.192.247.176
bff0a66c33449f8d39d6ce7eab1c9115	2	12	2021-01-04 11:07:54.59291+00	93	h1=int(input())\nh2=int(input())\nh3=int(input())\nh4=int(input())\n\nif h1<h2 and h2<h3 and h3<h4 and h1>0 and h4<=100:\n    print("Uphill")\nelif h1>h2 and h2>h3 and h3>h4 and h1<=100 and h4>0:\n    print("Downhill")\nelif h1==h2 and h2==h3 and h3==h4 and h1>0 and h1<=100:\n    print("Flat land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9011200}	이지연	114.205.106.66
6c264464e11348870d5987c3b8e8ce4a	2	12	2021-01-04 11:08:24.249331+00	93	h1=float(input())\nh2=float(input())\nh3=float(input())\nh4=float(input())\n\nif h1<h2 and h2<h3 and h3<h4 and h1>0 and h4<=100:\n    print("Uphill")\nelif h1>h2 and h2>h3 and h3>h4 and h1<=100 and h4>0:\n    print("Downhill")\nelif h1==h2 and h2==h3 and h3==h4 and h1>0 and h1<=100:\n    print("Flat land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8892416, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9035776}	이지연	114.205.106.66
910ca02aa02bf3b85fbd45de67a88697	2	12	2021-01-04 12:47:50.300898+00	11	#include <stdio.h>\nint a, b, c, d;\nint main(void)\n{\n\tscanf("%d %d %d %d",&a,&b,&c,&d);\n  \tif(a==b&&b==c&&c==d)\n      printf("Flat Land");\n  \telse if(a<b&&b<c&&c<d)\n      printf("Uphill");\n  \telse if(a>b&&b>c&&c>d)\n      printf("Downhill");\n  \telse\n      printf("Unknown");\n}	0	{"err": null, "data": [{"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1675264, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1675264}	2017311005	211.36.140.36
b9375c0ae71083050aecc319dfbe8d7b	2	13	2021-01-04 13:52:25.517398+00	13	# Function definition\ndef detect(s):\n    s_len = len(s)\n    bag = {'H':True, 'I':True, 'N':True, 'O':True, 'S':True, 'X':True, 'Z':True}\n    for i in range(s_len):\n        try:\n            if bag[s[i]] != True:\n                return False\n        except KeyError:\n            return False\n    return True\n\n# Main\nif __name__ == '__main__':\n    s = input()\n    if detect(s):\n        print('YES')\n    else:\n        print('NO')	0	{"err": null, "data": [{"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8974336, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8892416, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 18, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 14, "memory_cost": 8986624}	2017313120	116.124.1.90
3f5c8676d82018e591baff20a53f5348	2	13	2021-01-05 08:23:31.545513+00	133	words = input("")\n\nfor i in range(len(words)):\n  if (words[i] not in ["H","I","N","O","S","X","Z"]):\n    ANS=False\n\nif ANS == False:\n  print("NO")\nelse:\n  print("YES")	4	{"err": null, "data": [{"error": 0, "memory": 8933376, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8966144, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 15, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8941568, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 16, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8908800, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8982528, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 8876032, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 17, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 12, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8978432, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8982528}	2020314792	175.116.4.40
c99615bddf61665eecdb63c6fbd334bf	2	12	2021-01-04 11:09:03.399055+00	93	h1=float(input())\nh2=float(input())\nh3=float(input())\nh4=float(input())\n\nif h1<h2 and h2<h3 and h3<h4 and h1>0 and h4<=100:\n    print("Uphill")\nelif h1>h2 and h2>h3 and h3>h4 and h1<=100 and h4>0:\n    print("Downhill")\nelif h1==h2 and h2==h3 and h3==h4 and h1>0 and h1<=100:\n    print("Flat land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 8867840, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 8851456, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8851456, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8941568}	이지연	114.205.106.66
bd1d4918ee3f98f3e3f4ac1cff613ac1	2	13	2021-01-05 11:36:41.225215+00	76	word = input()\npossible = ["H", "I", "N", "O", "S", "X", "Z"]\nempty = []\n\nfor i in range(len(word)):\n    if word[i] in possible:\n        empty.append("TRUE")\n    else:\n        empty.append("FALSE")\n\nif "FALSE" in empty:\n    print("NO")\nelse:\n    print("YES")	4	{"err": null, "data": [{"error": 0, "memory": 7335936, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 12, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7430144, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7364608, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 11, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7393280, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 8, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7294976, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7372800, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 12, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7262208, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 10, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7503872, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 10, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7327744, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 10, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7364608, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 8, "memory_cost": 7503872}	2020312429	211.105.153.248
790050f2f3b1eec04726ca1499783a77	2	12	2021-01-04 12:48:57.336559+00	107	a = int(input("첫번째 지점의 높이"))\nb = int(input("두번째 지점의 높이"))\nc = int(input("세번째 지점의 높이"))\nd = int(input("네번째 지점의 높이"))\n  \nif (a<b<c<d):\n   print("Uphill")\nelif (a>b>c>d):\n   print("Downhill")\nelif (a==b , b==c, c==d):\n   print("Flat Land")\nelse:\n   print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9084928, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "f6ce99eb8d1c83883a845e8df043ab5e"}, {"error": 0, "memory": 9064448, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}, {"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "21a457547ab59828fad66926b2a04e8e"}, {"error": 0, "memory": 8994816, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}]}	Python3	f	{"time_cost": 12, "memory_cost": 9084928}	2020311650	1.251.170.216
7e22a9673726314e576919749182de16	2	14	2021-01-04 13:52:53.159278+00	111	N = int(input())\n\nlst = [[int(input()),1], [int(input()),1]]\n\nans = 0\n\ndef long(n):\n    global lst\n    global ans\n    if n == lst[1][0]:\n        lst[1][1] += 1\n    elif n == lst[0][0]:\n        lst[0][1] += 1\n        lst.append(lst.pop(0))\n    else:\n        temp = max([lst[0][1],lst[1][1]])\n        if temp > ans:\n            ans = temp\n        lst.pop(0)\n        lst[0][1] = 1\n        lst.append([n,1])\n        \n\nfor i in range(N-2):\n    long(int(input()))\nif lst[0][1] > ans:\n    ans = lst[0][1]\nif lst[1][1] > ans:\n    ans = lst[1][1]\n\nprint(ans)	-1	{"err": null, "data": [{"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 20, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9064448, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8912896, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "16", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "17", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8937472, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 14, "test_case": "18", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "19", "output_md5": "7cbbc409ec990f19c78c75bd1e06f215"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 18, "memory_cost": 9105408}	2015313992	175.192.247.176
a3b409b804d947fcfda0c1e34ae587a1	2	12	2021-01-04 15:29:45.513396+00	117	h = []\n\nfor i in range(0, 4):\n    h.append(input())\n\n\ncurrent_hill = "Nothing"\n\n\nfor i in range(1,4):\n    if(current_hill == "Nothing"):\n        \n        if(h[i] > h[i-1]):\n            current_hill = "Uphill"\n\n        elif(h[i] < h[i-1]):\n            current_hill = "Downhill"\n\n        elif(h[i] == h[i-1]):\n            current_hill = "Flat Land"\n\n    else:\n        if(current_hill == "Uphill"):\n            if(h[i] <= h[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Downhill"):\n            if(h[i] >= h[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Flat Land"):\n            if(h[i] != h[i-1]):\n                current_hill = "Unknown"\n\nprint(current_hill)	-1	{"err": null, "data": [{"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8970240, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8986624}	2019311602	121.189.141.120
42540d7bd5901d930ec5f52d5ce1f723	2	12	2021-01-04 11:13:48.961909+00	93	#include <stdio.h>\n#include <stdlib.h>\n\nvoid main()\n{\nint h1, h2, h3, h4;\n\nscanf("%d", &h1);\nscanf("%d", &h2);\nscanf("%d", &h3);\nscanf("%d", &h4);\n\nif(h1<h2 && h2<h3 && h3<h4 && h1>0 && h4<=100)\n    printf("Uphill");\nelse if(h1>h2 && h2>h3 && h3>h4 && h1<=100 && h4>0)\n    printf("Downhill");\nelse if(h1==h2 && h2==h3 && h3==h4 && h1>0 && h1<=100)\n    printf("Flat land");\nelse\n    printf("Unknown");\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1699840, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1642496, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1703936}	이지연	114.205.106.66
b90ac65347ad21d1ef559208fc1ca4bf	2	12	2021-01-04 12:53:29.025571+00	107	a = int(input("첫번째 지점의 높이"))\nb = int(input("두번째 지점의 높이"))\nc = int(input("세번째 지점의 높이"))\nd = int(input("네번째 지점의 높이"))\n  \nif (a<b<c<d):\n   print("Uphill")\nelif (a>b>c>d):\n   print("Downhill")\nelif (a==b and b==c and c==d):\n   print("Flat Land")\nelse:\n   print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9080832, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}, {"error": 0, "memory": 9052160, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "f6ce99eb8d1c83883a845e8df043ab5e"}, {"error": 0, "memory": 8990720, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "b242c16c2e12eefb5e0dbb672a17dd73"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "21a457547ab59828fad66926b2a04e8e"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "b242c16c2e12eefb5e0dbb672a17dd73"}]}	Python3	f	{"time_cost": 12, "memory_cost": 9080832}	2020311650	1.251.170.216
6f60144505aef452590f174f571e609f	2	14	2021-01-04 13:55:28.31581+00	88	people = int(input())\ncount = []\nfor i in range(people):\n    count.append(str(input()))\n\nstr_num = ''.join(count)\nset_count = set(count)\n\nres = 1\nfor char in set_count:\n    temp_list = []\n\n    leng = str_num.replace(char,"")\n    for i in range(len(leng)-1):\n        if int(leng[i]) == int(leng[i+1]):\n            res = res + 1\n    temp_list.append(res)\n    res = 1\nprint(max(temp_list))	-1	{"err": null, "data": [{"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8953856, "output": null, "result": 1, "signal": 0, "cpu_time": 1219, "exit_code": 0, "real_time": 1224, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8994816, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "19ca14e7ea6328a42e0eb13d585e4c22"}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 26, "test_case": "6", "output_md5": "3416a75f4cea9109507cacd8e2f2aefc"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 18, "test_case": "7", "output_md5": "32bb90e8976aab5298d5da10fe66f21d"}, {"error": 0, "memory": 8998912, "output": null, "result": -1, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 27, "test_case": "8", "output_md5": "d07e70efcfab08731a97e7b91be644de"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 36, "exit_code": 0, "real_time": 37, "test_case": "9", "output_md5": "8ebda540cbcc4d7336496819a46a1b68"}, {"error": 0, "memory": 9052160, "output": null, "result": -1, "signal": 0, "cpu_time": 57, "exit_code": 0, "real_time": 63, "test_case": "10", "output_md5": "218a0aefd1d1a4be65601cc6ddc1520e"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 137, "exit_code": 0, "real_time": 138, "test_case": "11", "output_md5": "61b4a64be663682e8cb037d9719ad8cd"}, {"error": 0, "memory": 8912896, "output": null, "result": -1, "signal": 0, "cpu_time": 250, "exit_code": 0, "real_time": 255, "test_case": "12", "output_md5": "ebd9629fc3ae5e9f6611e2ee05a31cef"}, {"error": 0, "memory": 8900608, "output": null, "result": 1, "signal": 0, "cpu_time": 1052, "exit_code": 0, "real_time": 1060, "test_case": "13", "output_md5": null}, {"error": 0, "memory": 9068544, "output": null, "result": 1, "signal": 0, "cpu_time": 1509, "exit_code": 0, "real_time": 1514, "test_case": "14", "output_md5": null}, {"error": 0, "memory": 8896512, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 22, "test_case": "15", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 25, "test_case": "16", "output_md5": "26337353b7962f533d78c762373b3318"}, {"error": 0, "memory": 9048064, "output": null, "result": -1, "signal": 0, "cpu_time": 135, "exit_code": 0, "real_time": 135, "test_case": "17", "output_md5": "5ef698cd9fe650923ea331c15af3b160"}, {"error": 0, "memory": 9109504, "output": null, "result": -1, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 27, "test_case": "18", "output_md5": "19f3cd308f1455b3fa09a282e0d496f4"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 106, "exit_code": 0, "real_time": 111, "test_case": "19", "output_md5": "3d2d8ccb37df977cb6d9da15b76c3f3a"}, {"error": 0, "memory": 9068544, "output": null, "result": -1, "signal": 0, "cpu_time": 117, "exit_code": 0, "real_time": 121, "test_case": "20", "output_md5": "58ae749f25eded36f486bc85feb3f0ab"}, {"error": 0, "memory": 9043968, "output": null, "result": -1, "signal": 0, "cpu_time": 103, "exit_code": 0, "real_time": 111, "test_case": "21", "output_md5": "f5deaeeae1538fb6c45901d524ee2f98"}, {"error": 0, "memory": 9048064, "output": null, "result": -1, "signal": 0, "cpu_time": 106, "exit_code": 0, "real_time": 119, "test_case": "22", "output_md5": "df877f3865752637daa540ea9cbc474f"}]}	Python3	f	{"time_cost": 1509, "memory_cost": 9109504}	2015312922	218.209.14.16
5b6e964368fd2ab2157ce0db6148cdb2	2	13	2021-01-04 15:01:43.815028+00	115	letter_list = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nS = str(input())\nwrong = 0\nfor i in range(len(S)) :\n    if S[i] not in letter_list :\n        wrong += 1\nif wrong == 0 :\n    print('Yes')\nelse :\n    print('No')	-1	{"err": null, "data": [{"error": 0, "memory": 8921088, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "bafd7322c6e97d25b6299b5d6fe8920b"}, {"error": 0, "memory": 8925184, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "93cba07454f06a4a960172bbd6e2a435"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "93cba07454f06a4a960172bbd6e2a435"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "bafd7322c6e97d25b6299b5d6fe8920b"}, {"error": 0, "memory": 8912896, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "bafd7322c6e97d25b6299b5d6fe8920b"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "93cba07454f06a4a960172bbd6e2a435"}, {"error": 0, "memory": 8871936, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "93cba07454f06a4a960172bbd6e2a435"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "bafd7322c6e97d25b6299b5d6fe8920b"}, {"error": 0, "memory": 8937472, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "93cba07454f06a4a960172bbd6e2a435"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "10", "output_md5": "bafd7322c6e97d25b6299b5d6fe8920b"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9035776}	2020311689	116.120.200.125
17bdf472dc6c1331b43a1a48adc80219	2	12	2021-01-04 16:11:41.710644+00	119	#include <cstdio>\n#include <iostream>\n\nusing namespace std;\n\n\n\nint main()\n{\n\tdouble* heights = new double[4];\n\tint* check = new int[4];\n\tint* type = new int[3];\n\tint flag = -1;\n\tfor (int i = 0; i < 4; i++)\n\t{\n\t\tscanf("%lf", &heights[i]);\n\t\tcheck[i] = -1;\n\t}\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\ttype[i] = 0;\n\t}\n\n\n\t// 0: smaller 1: same 2: bigger;\n\n\tfor (int i = 1; i < 4; i++)\n\t{\n\t\tif (heights[i - 1] > heights[i])\n\t\t{\n\t\t\tcheck[i] = 0;\n\t\t}\n\t\telse if (heights[i - 1] < heights[i])\n\t\t{\n\t\t\tcheck[i] = 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcheck[i] = 1;\n\t\t}\n\t}\n\tfor (int i = 1; i < 4; i++)\n\t{\n\t\t++type[check[i]];\n\t}\n\n\n\n\tfor (int i = 0; i < 3; i++)\n\t{\n\t\tif (type[i] == 3)\n\t\t{\n\t\t\tflag = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (flag == -1)\n\t{\n\t\tprintf("Unknown");\n\t}\n\telse if (flag == 0)\n\t{\n\t\tprintf("Downhill");\n\t}\n\telse if (flag == 1)\n\t{\n\t\tprintf("Flat Land");\n\t}\n\telse if (flag == 2)\n\t{\n\t\tprintf("Uphill");\n\t}\n\n\n\tdelete[] heights;\n\tdelete[] check;\n\tdelete[] type;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3678208, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3682304, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3735552, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3735552}	2019312807	39.112.206.136
d4ff1264d2d376c4bd385e90b3523468	2	16	2021-01-04 11:13:53.204594+00	8	#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint N, M, input;\nvector<int>tile;\nint dp[11][10001];\n\nint solve (int digit, int sum, int num) {\n    if(dp[digit][sum]) return dp[digit][sum];\n    if(digit == 0 ) {\n        if(sum == 0)\n        return dp[digit][sum] = 0;\n        else\n        return dp[digit][sum] = -1;\n    }\n    int res =10001;\n    for(int i{1}; i <= 100; i++) {\n        int ii = i*i;\n        if(ii > sum) break;\n        if(i > num) break;\n        int s = solve(digit-1, sum - ii, i);\n        if(s == -1) continue;\n        else {\n            res = min(res, s + (tile[digit-1]-i)*(tile[digit-1]-i));\n        }\n        if(res < 10001){\n            return dp[digit][sum] = res;\n        }\n    }\n    return dp[digit][sum] = -1;\n}\n\nint main() {\n    cin.tie(NULL);\n    ios::sync_with_stdio(false);\n    cin >> N >> M;\n    for(int i{0}; i < N; i++) {\n        cin >> input;\n        tile.push_back(input);\n    }\n    sort(tile.begin(), tile.end());\n    cout << solve(N,M, 101) << "\\n";\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3723264, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "f0dd4a99fba6075a9494772b58f95280"}, {"error": 0, "memory": 3928064, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 8, "test_case": "3", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3792896, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "4", "output_md5": "32508f53f24c46f685870a075eaaa29c"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3534848, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "9bf31c7ff062936a96d3c8bd1f8f2ff3"}, {"error": 0, "memory": 3543040, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "37693cfc748049e45d87b8c7d8b9aacd"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 3604480, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "eecca5b6365d9607ee5a9d336962c534"}, {"error": 0, "memory": 3670016, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "11", "output_md5": "37ecd27608480aa3569a511a638ca74f"}, {"error": 0, "memory": 3682304, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "30ba105754346aaf47509089d2287f2a"}]}	C++	f	{"time_cost": 4, "memory_cost": 3928064}	2019311680	220.85.17.40
48ed43b98dd0562a7e04dd0bd41aecfd	2	12	2021-01-04 12:54:25.853978+00	107	a = int(input("첫번째 지점의 높이"))\nb = int(input("두번째 지점의 높이"))\nc = int(input("세번째 지점의 높이"))\nd = int(input("네번째 지점의 높이"))\n  \nif (a<b<c<d):\n   print("Uphill")\nelif (a>b>c>d):\n   print("Downhill")\nelif (a==b and b==c and c==d):\n   print("Flat Land")\nelse:\n   print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9015296, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "2", "output_md5": "f6ce99eb8d1c83883a845e8df043ab5e"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "b242c16c2e12eefb5e0dbb672a17dd73"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "21a457547ab59828fad66926b2a04e8e"}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "b242c16c2e12eefb5e0dbb672a17dd73"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9031680}	2020311650	1.251.170.216
9e0cf9cfa639a2564cb4199edd9c31b6	2	13	2021-01-04 15:03:02.456202+00	115	letter_list = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nS = str(input())\nwrong = 0\nfor i in S :\n    if i not in letter_list :\n        wrong += 1\nif wrong == 0 :\n    print('Yes')\nelse :\n    print('No')	-1	{"err": null, "data": [{"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "bafd7322c6e97d25b6299b5d6fe8920b"}, {"error": 0, "memory": 8933376, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "93cba07454f06a4a960172bbd6e2a435"}, {"error": 0, "memory": 8765440, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "3", "output_md5": "93cba07454f06a4a960172bbd6e2a435"}, {"error": 0, "memory": 8888320, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "bafd7322c6e97d25b6299b5d6fe8920b"}, {"error": 0, "memory": 8794112, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 21, "test_case": "5", "output_md5": "bafd7322c6e97d25b6299b5d6fe8920b"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "93cba07454f06a4a960172bbd6e2a435"}, {"error": 0, "memory": 8912896, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "93cba07454f06a4a960172bbd6e2a435"}, {"error": 0, "memory": 8937472, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "8", "output_md5": "bafd7322c6e97d25b6299b5d6fe8920b"}, {"error": 0, "memory": 8871936, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "93cba07454f06a4a960172bbd6e2a435"}, {"error": 0, "memory": 8876032, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "10", "output_md5": "bafd7322c6e97d25b6299b5d6fe8920b"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8962048}	2020311689	116.120.200.125
cff3bdc9c650c1bb1ab1649566940324	2	12	2021-01-04 15:30:47.780881+00	117	h = []\n\nfor i in range(0, 4):\n    h.append(input())\n\n\ncurrent_hill = "Nothing"\n\n\nfor i in range(1,4):\n    if(current_hill == "Nothing"):\n        \n        if(h[i] > h[i-1]):\n            current_hill = "Uphill"\n\n        elif(h[i] < h[i-1]):\n            current_hill = "Downhill"\n\n        elif(h[i] == h[i-1]):\n            current_hill = "Flat Land"\n\n    else:\n        if(current_hill == "Uphill"):\n            if(h[i] <= h[i-1]):\n                current_hill = "Unknown"\n        elif(current_hill == "Downhill"):\n            if(h[i] >= h[i-1]):\n                current_hill = "Unknown"\n        elif(current_hill == "Flat Land"):\n            if(h[i] != h[i-1]):\n                current_hill = "Unknown"\n\nprint(current_hill)	0	{"err": null, "data": [{"error": 0, "memory": 7323648, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 9, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7401472, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 7467008, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7467008, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 7458816, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python2	f	{"time_cost": 10, "memory_cost": 7467008}	2019311602	121.189.141.120
36b437b5fa6d2a984995f809ea3c0cbb	2	14	2021-01-04 15:41:32.48939+00	115	N = int(input())\npeople = []\nfor i in range(N) :\n    num = int(input())\n    people.append(num)\ns1 = set(people)\nleng_list = []\nfor i in s1 :\n    check_list = []\n    mid_list = []\n    cnt = 0\n    for j in people :\n        if j != i :\n            check_list.append(j)\n    for k in range(len(check_list)-1) :\n        if check_list[k] == check_list[k+1] :\n            cnt += 1\n        else:\n            mid = cnt + 1\n            mid_list.append(mid)\n            cnt = 0\n    mid_list.sort(reverse = True)\n    leng_list.append(mid_list[0])\nleng_list.sort(reverse = True)\nprint(leng_list[0])	-1	{"err": null, "data": [{"error": 0, "memory": 7389184, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7561216, "output": null, "result": 0, "signal": 0, "cpu_time": 312, "exit_code": 0, "real_time": 321, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 7397376, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7294976, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7430144, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7303168, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7454720, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7446528, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 7577600, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7462912, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 23, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7507968, "output": null, "result": 0, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 30, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7507968, "output": null, "result": 0, "signal": 0, "cpu_time": 42, "exit_code": 0, "real_time": 48, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7618560, "output": null, "result": 0, "signal": 0, "cpu_time": 144, "exit_code": 0, "real_time": 153, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7507968, "output": null, "result": 0, "signal": 0, "cpu_time": 207, "exit_code": 0, "real_time": 208, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7569408, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 15, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 7417856, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 7479296, "output": null, "result": 0, "signal": 0, "cpu_time": 43, "exit_code": 0, "real_time": 47, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7409664, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 16, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 7532544, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 28, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 7483392, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 27, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 7536640, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 25, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 7520256, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 27, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python2	f	{"time_cost": 312, "memory_cost": 7618560}	2020311689	116.120.200.125
27c9cd770e4bbbf3d407201f5640fa6b	2	13	2021-01-04 11:14:59.165509+00	99	#include <stdio.h>\n#include <string.h>\n\nint spincheck(char p)\n{\n    if(p == 'H' || p == 'I'||p == 'N'||p == 'O'||p == 'S'||p == 'X'||p == 'Z')\n        return 1;\n    else\n        return 0;\n}\n\nint main()\n{\n    char p[30];\n    scanf("%s",p);\n    int len = strlen(p);\n    int check = 0;\n    for(int i = 0 ;i<len;i++)\n    {\n        if (spincheck(p[i]) == 1)\n            check ++;\n    }\n    if(check == len)\n        printf("YES");\n    else\n        printf("NO");\n}	0	{"err": null, "data": [{"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1687552, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1589248, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1703936}	2016311522	116.126.252.101
8c3da45d8539f2fdb0e6da250fd3f242	2	13	2021-01-05 01:53:08.142522+00	25	h = input()\nH = list(h)\nList = ['H','I','N','O','S','X','Z']\nBol = 0\n  \nfor i in range(len(H)):\n\tif h[i] not in List:\n\t\tBol = 1\n\t\t\n   \t\t\nif Bol ==1:\n\tprint('NO')\nif Bol == 0:\n\tprint('YES')	0	{"err": null, "data": [{"error": 0, "memory": 8896512, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8826880, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8847360, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8884224, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8843264, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8957952}	2020313223	221.143.30.115
4edf31ae871934610b980a73adc58edc	2	12	2021-01-04 12:55:44.915801+00	107	a = int(input("첫번째 지점의 높이"))\nb = int(input("두번째 지점의 높이"))\nc = int(input("세번째 지점의 높이"))\nd = int(input("네번째 지점의 높이"))\n  \nif (a<b<c<d):\n   print("Uphill")\n     \nelif (a>b>c>d):\n   print("Downhill")\n     \nelif (a==b and b==c and c==d):\n   print("Flat Land")\n\nelse:\n   print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "1", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}, {"error": 0, "memory": 8916992, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "f6ce99eb8d1c83883a845e8df043ab5e"}, {"error": 0, "memory": 8982528, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "b242c16c2e12eefb5e0dbb672a17dd73"}, {"error": 0, "memory": 8916992, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "21a457547ab59828fad66926b2a04e8e"}, {"error": 0, "memory": 8863744, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "b242c16c2e12eefb5e0dbb672a17dd73"}]}	Python3	f	{"time_cost": 14, "memory_cost": 8982528}	2020311650	1.251.170.216
28c5bdc91a39d48e24cc64a36467099d	2	14	2021-01-04 14:17:19.111911+00	111	N = int(input())\n\nlst = [[int(input()),1], [int(input()),1]]\n\nans = 0\n\nwhole = [lst[0][0], lst[1][0]]\n\ndef check(n):\n    global whole\n    ch = 1\n    re = -2\n    while whole[re] == n:\n        ch += 1\n        re -= 1\n    return ch\n\ndef long(n):\n    global lst\n    global ans\n    \n    if n == lst[1][0]:\n        lst[1][1] += 1\n    elif n == lst[0][0]:\n        lst[0][1] += 1\n        lst.append(lst.pop(0))\n    else:\n        temp = max([lst[0][1],lst[1][1]])\n        if temp > ans:\n            ans = temp\n        lst.pop(0)\n        lst[0][1] = check(lst[0][0])\n        lst.append([n,1])\n    whole.append(n)\n        \n\nfor i in range(N-2):\n    long(int(input()))\nif lst[0][1] > ans:\n    ans = lst[0][1]\nif lst[1][1] > ans:\n    ans = lst[1][1]\n\nprint(ans)	4	{"err": null, "data": [{"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 8822784, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 8785920, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9023488, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 15, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8912896, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 17, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9093120, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9072640, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 14, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 8986624, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 15, "test_case": "19", "output_md5": null}, {"error": 0, "memory": 9023488, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 17, "test_case": "20", "output_md5": null}, {"error": 0, "memory": 9048064, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 26, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9015296, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 16, "test_case": "22", "output_md5": null}]}	Python3	f	{"time_cost": 18, "memory_cost": 9093120}	2015313992	175.192.247.176
3df7311245b0f0e8574c1ee090e0e000	2	15	2021-01-04 15:03:06.33175+00	111	N, M = list(map(int,input().split(' ')))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    else: \n        p = find(parent[x])\n        parent[x] = p\n        return p\n\ndef union(x,y):\n    xx = find(x)\n    yy = find(y)\n    if xx != yy:\n        parent[y] = xx\n        number[xx] += number[y]\n        number[y] = 0\n\nparent = dict()\nnumber = dict()\nfor i in range(N):\n    p = i\n    parent[p] = p\n    n = int(input())\n    number[p] = n\nfor i in range(M):\n    x, y = list(map(int,input().split(' ')))\n    union(x,y)\nck = True\nfor i in number.values():\n    if i != 0:\n        ck = False\nif ck:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')	-1	{"err": null, "data": [{"error": 0, "memory": 10088448, "output": null, "result": -1, "signal": 0, "cpu_time": 79, "exit_code": 0, "real_time": 92, "test_case": "1", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9478144, "output": null, "result": -1, "signal": 0, "cpu_time": 70, "exit_code": 0, "real_time": 90, "test_case": "2", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9486336, "output": null, "result": -1, "signal": 0, "cpu_time": 40, "exit_code": 0, "real_time": 45, "test_case": "3", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9334784, "output": null, "result": -1, "signal": 0, "cpu_time": 139, "exit_code": 0, "real_time": 139, "test_case": "4", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9568256, "output": null, "result": -1, "signal": 0, "cpu_time": 35, "exit_code": 0, "real_time": 58, "test_case": "5", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9502720, "output": null, "result": -1, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 40, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9412608, "output": null, "result": 0, "signal": 0, "cpu_time": 61, "exit_code": 0, "real_time": 65, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9482240, "output": null, "result": -1, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 32, "test_case": "8", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 10285056, "output": null, "result": -1, "signal": 0, "cpu_time": 56, "exit_code": 0, "real_time": 60, "test_case": "9", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}]}	Python3	f	{"time_cost": 139, "memory_cost": 10285056}	2015313992	175.192.247.176
e977426f4dc7b3347f1e8ea80be6559c	2	13	2021-01-04 15:42:00.306639+00	117	available_char = ["H","I","N","O","S","X","Z"]\n\nS = input()\n\nresult = "YES"\n\nfor c in available_char:\n  if(S.any(c)):\n    result = "NO"\nprint(result)	4	{"err": null, "data": [{"error": 0, "memory": 7421952, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 14, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7458816, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 14, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7356416, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 12, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7454720, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 14, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7438336, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 12, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7245824, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 11, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7434240, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 7, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7364608, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 13, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7548928, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 12, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7294976, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 14, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 13, "memory_cost": 7548928}	2019311602	121.189.141.120
36b670d985365b662690d94bd10f88ce	2	12	2021-01-04 16:28:29.408022+00	120	a=int(input())\nb=int(input())\nc=int(input())\nd=int(input())\n\nif a<b<c<d:\n  print("Uphill")\nif a>b>c>d:\n  print("Downhill")\nif a=b=d=c:\n  print("Flat Land")\nelse :\n  print("Unkown")	-2	{}	Python2	f	{"score": 0, "err_info": "File \\"/judger/run/77db813e0c554544872982bf125e9b05/solution.py\\", line 10\\n    if a=b=d=c:\\n        ^\\nSyntaxError: invalid syntax"}	2018314281	59.23.138.90
ded8a03d2746028a4d1ad809b7ca982c	2	12	2021-01-04 11:15:44.93781+00	97	a = []\nfor i in range(0,4):\n  a.append(input())\n\noutput = ""\nif a[0] < a[1]:  \n  output = "Uphill"\nelif a[0] > a[1]: \n  output = "Downhill"\nelif a[0] == a[1]: \n  output = "Flat Land"\n\nif output == "Uphill":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n < a[i+1]:\n      output = "Unknown"\n      break\nelif output == "Downhill":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n > a[i+1]:\n      output = "Unknown"\n      break\nelif output == "Flat Land":\n  for i, n in enumerate(a):\n    if i == 3:\n      break\n    if not n == a[i+1]:\n      output = "Unknown"\n      break\nprint(output)	-1	{"err": null, "data": [{"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8937472, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 8949760}	2013314222	125.176.139.181
3f452b495beaba4a9e78007c11696fcc	2	12	2021-01-04 12:56:11.056839+00	111	high = []\nfor _ in range(4):\n    high.append(int(input()))\nif high == sorted(high):\n    print('Uphill')\nelif high == sorted(high, reverse=True):\n    print('Downhill')\nelif len(set(high)) == 1:\n    print('Flat Land')\nelse:\n    print('Unknown')	-1	{"err": null, "data": [{"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8990720, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9019392}	2015313992	175.192.247.176
dc0bfe5cc4282d3fb2b765a58e673fd3	2	14	2021-01-04 14:18:18.132888+00	111	N = int(input())\n\nlst = [[int(input()),1], [int(input()),1]]\n\nans = 0\n\nwhole = [lst[0][0], lst[1][0]]\n\ndef check(n):\n    global whole\n    ch = 1\n    re = -2\n    while whole[re] == n:\n        ch += 1\n        re -= 1\n    return ch\n\ndef long(n):\n    global lst\n    global ans\n    \n    if n == lst[1][0]:\n        lst[1][1] += 1\n    elif n == lst[0][0]:\n        lst[0][1] += 1\n        lst.append(lst.pop(0))\n    else:\n        temp = max([lst[0][1],lst[1][1]])\n        if temp > ans:\n            ans = temp\n        lst.pop(0)\n        lst[0][1] = check(lst[0][0])\n        lst.append([n,1])\n    whole.append(n)\n        \n\nfor i in range(N-2):\n    long(int(input()))\nif lst[0][1] > ans:\n    ans = lst[0][1]\nif lst[1][1] > ans:\n    ans = lst[1][1]\n\nprint(ans)	4	{"err": null, "data": [{"error": 0, "memory": 9117696, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8970240, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 13, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 18, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9060352, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 12, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 8966144, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8974336, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8953856, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 14, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 8970240, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 9031680, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 17, "test_case": "19", "output_md5": null}, {"error": 0, "memory": 8994816, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 15, "test_case": "20", "output_md5": null}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9031680, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 14, "test_case": "22", "output_md5": null}]}	Python3	f	{"time_cost": 17, "memory_cost": 9117696}	2015313992	175.192.247.176
2a4a6e1cd8eccbbb0bdb21a7f68e1c07	2	13	2021-01-04 15:04:28.665658+00	115	letter_list = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nS = str(input())\nwrong = 0\nfor i in S :\n    if i not in letter_list :\n        wrong += 1\nif wrong == 0 :\n    print('YES')\nelse :\n    print('NO')	0	{"err": null, "data": [{"error": 0, "memory": 8933376, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8900608, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8978432}	2020311689	116.120.200.125
b7464387c2c8de1885d6ae5ffd3a4788	2	12	2021-01-04 15:31:09.978585+00	117	h = []\n\nfor i in range(0, 4):\n    h.append(input())\n\n\ncurrent_hill = "Nothing"\n\n\nfor i in range(1,4):\n    if(current_hill == "Nothing"):\n        \n        if(h[i] > h[i-1]):\n            current_hill = "Uphill"\n\n        elif(h[i] < h[i-1]):\n            current_hill = "Downhill"\n\n        elif(h[i] == h[i-1]):\n            current_hill = "Flat Land"\n\n    else:\n        if(current_hill == "Uphill"):\n            if(h[i] <= h[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Downhill"):\n            if(h[i] >= h[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Flat Land"):\n            if(h[i] != h[i-1]):\n                current_hill = "Unknown"\n\nprint(current_hill)	0	{"err": null, "data": [{"error": 0, "memory": 7499776, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7376896, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 7307264, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7254016, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 7348224, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python2	f	{"time_cost": 10, "memory_cost": 7499776}	2019311602	211.104.145.52
c72aebea4635ffe35e5e5e10bcd9a102	2	13	2021-01-04 15:46:31.703622+00	117	available_char = ["H","I","N","O","S","X","Z"]\n\nS = input()\n\nresult = "YES"\n\ncnt = 0\nfor c in available_char:\n  cnt += S.count(c)\nif(len(S) != cnt):\n  result = "NO"\nprint(result)	4	{"err": null, "data": [{"error": 0, "memory": 7286784, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 11, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7241728, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 10, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7434240, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 12, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7430144, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 12, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7434240, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 10, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7462912, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 12, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7385088, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 13, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7471104, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 13, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7430144, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 12, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7569408, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 12, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 12, "memory_cost": 7569408}	2019311602	121.189.141.120
a7e31ac24a2239e182def2a786a74ffa	2	12	2021-01-04 11:17:10.786334+00	93	#include <stdio.h>\n#include <stdlib.h>\n\nvoid main()\n{\nint h1, h2, h3, h4;\n\nscanf("%d", &h1);\nscanf("%d", &h2);\nscanf("%d", &h3);\nscanf("%d", &h4);\n\nif(h1<h2 && h2<h3 && h3<h4 && h1>0 && h4<=100)\n    printf("Uphill");\nelse if(h1>h2 && h2>h3 && h3>h4 && h1<=100 && h4>0)\n    printf("Downhill");\nelse if(h1==h2 && h2==h3 && h3==h4 && h1>0 && h1<=100)\n    printf("Flat land");\nelse\n    printf("Unknown");\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1622016, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1703936}	이지연	114.205.106.66
ae4b4c880a6bcaa2cd37efe78ee4c9fc	2	15	2021-01-04 22:32:17.538068+00	71	#include <iostream>\n#include <vector>\n#include <queue>\n\n#define MAX(A,B) A>B?A:B;\n#define MIN(A,B) A<B?A:B;\nusing namespace std;\n\nint n, m;\nvector<int> edge[10000];\n\nclass Node\n{\npublic:\n\tint money;\n\tbool visited;\n\tNode()\n\t{\n\t\tmoney = 0;\n\t\tvisited = false;\n\t}\n} node[10000];\n\nbool visit(int a)\n{\n\tint sum = 0,tmp;\n\tqueue<int> q;\n\tq.push(a);\n\tnode[a].visited = true;\n\twhile (!q.empty())\n\t{\n\t\ttmp = q.front();\n\t\tq.pop();\n\t\tsum += node[tmp].money;\n\t\tfor (int i = 0; i < edge[tmp].size(); i++)\n\t\t{\n\t\t\tif (!node[edge[tmp][i]].visited)\n\t\t\t{\n\t\t\t\tq.push(edge[tmp][i]);\n\t\t\t\tnode[edge[tmp][i]].visited = true;\n\t\t\t}\n\t\t}\n\t}\n\tif (sum == 0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main()\n{\n\tbool result = true;\n\tint temp,temp2;\n\tscanf("%d %d", &n, &m);\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tscanf("%d", &temp);\n\t\tnode[i].money = temp;\n\t}\n\tfor (int i = 0; i < m; i++)\n\t{\n\t\tscanf("%d %d", &temp, &temp2);\n\t\tedge[temp].push_back(temp2);\n\t\tedge[temp2].push_back(temp);\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tif (!node[i].visited)\n\t\t{\n\t\t\tif (!visit(i))\n\t\t\t\tresult = false;\n\t\t}\n\t}\n\tif (result)\n\t{\n\t\tprintf("POSSIBLE");\n\t}\n\telse\n\t{\n\t\tprintf("IMPOSSIBLE");\n\t}\n}	0	{"err": null, "data": [{"error": 0, "memory": 4407296, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 9, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4440064, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 9, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4104192, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4636672, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4145152, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 6, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4124672, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4386816, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 4239360, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4419584, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 13, "memory_cost": 4636672}	2015310673	112.169.201.58
3718b0cfc4c5f44b83807c0215cf5aed	2	12	2021-01-04 13:14:45.590045+00	111	high = []\nstate = None\nfor _ in range(4):\n    high.append(int(input()))\nfor i in range(3):\n    if i ==0 :\n        if high[i+1]-high[i] > 0:\n            state = 'Uphill'\n        elif high[i+1]-high[i] < 0:\n            state = 'Downhill'\n        elif high[i+1]-high[i] == 0:\n            state = 'Flat Land'\n    else:\n        if high[i+1]-high[i] > 0:\n            ck = 'Uphill'\n        elif high[i+1]-high[i] < 0:\n            ck = 'Downhill'\n        elif high[i+1]-high[i] == 0:\n            ck = 'Flat Land'\n        if state != ck:\n            print('Unknown')\n            break\nprint(state)	-1	{"err": null, "data": [{"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "ff65c2703f95d813de0217d1d5a9a551"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "96e8f3afb8ca762468d77871571b8924"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9035776}	2015313992	175.192.247.176
8d45fcfd80f107f399b8c3b509328884	2	13	2021-01-06 12:32:08.9937+00	149	rotate = ['H','I','N','O','S','X','Z']\n\nword = input('샘플 인풋:')\njudge=0\n  \nfor i in range(0,len(word)):\n    if word[i] in rotate:\n        judge += 1\n    else:\n        break\n\nif judge == len(word):\n    print("YES")\nelse:\n    print("NO")	-1	{"err": null, "data": [{"error": 0, "memory": 8830976, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "2", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8851456, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}, {"error": 0, "memory": 8871936, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}, {"error": 0, "memory": 8867840, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "6", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8847360, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8929280, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}, {"error": 0, "memory": 8876032, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "10", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8962048}	2019312486	39.118.136.79
29a97675bbb9629ab0a33d7585469b06	2	12	2021-01-04 15:31:55.332167+00	117	h_ih = []\n\nfor i in range(0, 4):\n    h_ih.append(input())\n\n\ncurrent_hill = "Nothing"\n\n\nfor i in range(1,4):\n    if(current_hill == "Nothing"):\n        \n        if(h_ih[i] > h_ih[i-1]):\n            current_hill = "Uphill"\n\n        elif(h_ih[i] < h_ih[i-1]):\n            current_hill = "Downhill"\n\n        elif(h_ih[i] == h_ih[i-1]):\n            current_hill = "Flat Land"\n\n    else:\n        if(current_hill == "Uphill"):\n            if(h_ih[i] <= h_ih[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Downhill"):\n            if(h_ih[i] >= h_ih[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Flat Land"):\n            if(h_ih[i] != h_ih[i-1]):\n                current_hill = "Unknown"\n\nprint(str(current_hill))	-1	{"err": null, "data": [{"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8867840, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8962048}	2019311602	121.189.141.120
42df0f30852107b2e4a09765f92b90e6	2	13	2021-01-04 15:47:17.919009+00	117	available_char = ["H","I","N","O","S","X","Z"]\n\nS = input()\n\nresult = "YES"\n\ncnt = 0\nfor c in available_char:\n    cnt += S.count(c)\nif(len(S) != cnt):\n    result = "NO"\nprint(result)	4	{"err": null, "data": [{"error": 0, "memory": 7319552, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 14, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7278592, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 13, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7438336, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7376896, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 12, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7450624, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 12, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7430144, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7372800, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 15, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7454720, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 13, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7356416, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7413760, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 15, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 8, "memory_cost": 7454720}	2019311602	121.189.141.120
9c8f2c1daee71887ff2c70fc25d9becb	2	14	2021-01-04 11:37:24.780233+00	88	people = int(input())\ncount = []\nfor i in range(people):\n    count.append(int(input()))\n\nset_count = set(count)\nres = 0\ndic = {}\ntemp_list = []\nfor num in set_count:\n    sabon = count.copy()\n    for _ in range(count.count(num)):\n        \n        sabon.remove(num)\n    for k in set_count:\n        \n        \n        for i in range(len(sabon)-1):\n            \n            if sabon[i]==sabon[i+1]:\n                res += 1\n            elif sabon[i] !=sabon[i+1] and res > 1:\n                temp_list.append(res)\n                \n                dic[k]=max(temp_list)\n                temp_list = []\n    res=0\nprint(dic[max(dic)])	1	{"err": null, "data": [{"error": 0, "memory": 9056256, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8896512, "output": null, "result": 1, "signal": 9, "cpu_time": 1993, "exit_code": 0, "real_time": 1999, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 8994816, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 37, "exit_code": 0, "real_time": 42, "test_case": "5", "output_md5": "34173cb38f07f89ddbebc2ac9128303f"}, {"error": 0, "memory": 9109504, "output": null, "result": -1, "signal": 0, "cpu_time": 103, "exit_code": 0, "real_time": 107, "test_case": "6", "output_md5": "a3f390d88e4c41f2747bfa2f1b5f87db"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "7", "output_md5": "d9d4f495e875a2e075a1a4a6e1b9770f"}, {"error": 0, "memory": 9052160, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 27, "test_case": "8", "output_md5": "85fc37b18c57097425b52fc7afbb6969"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 52, "exit_code": 0, "real_time": 61, "test_case": "9", "output_md5": "38db3aed920cf82ab059bfccbd02be6a"}, {"error": 0, "memory": 9117696, "output": null, "result": -1, "signal": 0, "cpu_time": 198, "exit_code": 0, "real_time": 204, "test_case": "10", "output_md5": "82aa4b0af34c2313a562076992e50aa3"}, {"error": 0, "memory": 9080832, "output": null, "result": 1, "signal": 0, "cpu_time": 1217, "exit_code": 0, "real_time": 1227, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 8876032, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1997, "test_case": "12", "output_md5": null}, {"error": 0, "memory": 8982528, "output": null, "result": 1, "signal": 9, "cpu_time": 1988, "exit_code": 0, "real_time": 1998, "test_case": "13", "output_md5": null}, {"error": 0, "memory": 9043968, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1997, "test_case": "14", "output_md5": null}, {"error": 0, "memory": 9043968, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 16, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "16", "output_md5": "6855456e2fe46a9d49d3d3af4f57443d"}, {"error": 0, "memory": 8896512, "output": null, "result": 1, "signal": 9, "cpu_time": 1987, "exit_code": 0, "real_time": 2001, "test_case": "17", "output_md5": null}, {"error": 0, "memory": 9129984, "output": null, "result": -1, "signal": 0, "cpu_time": 60, "exit_code": 0, "real_time": 61, "test_case": "18", "output_md5": "3871bd64012152bfb53fdf04b401193f"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 577, "exit_code": 0, "real_time": 586, "test_case": "19", "output_md5": "1d221442f2e2158c01747714f9bb00f5"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 546, "exit_code": 0, "real_time": 553, "test_case": "20", "output_md5": "9dd30287dc5ffcfb4efb1e0521c3c8f8"}, {"error": 0, "memory": 8998912, "output": null, "result": -1, "signal": 0, "cpu_time": 515, "exit_code": 0, "real_time": 516, "test_case": "21", "output_md5": "944626adf9e3b76a3919b50dc0b080a4"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 656, "exit_code": 0, "real_time": 656, "test_case": "22", "output_md5": "1bd69c7df3112fb9a584fbd9edfc6c90"}]}	Python3	f	{"time_cost": 1993, "memory_cost": 9129984}	2015312922	218.209.14.16
73c3a4ddc8200aecee73f3c010245fcd	2	13	2021-01-05 01:44:41.04245+00	25	h = input()\n\nList = ['H','I','N','O','S','X','Z']\nBol= 1\nfor i in range(0,len(h)):\n    if h[i] not in List:\n        print('NO')\n        Bol = 0\nif Bol ==1:          \n    print("YES")	-1	{"err": null, "data": [{"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8830976, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8916992, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8876032, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8855552, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "9d762d3b96b04534bd794cb8e15960f8"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "646da0df850e1bf42ee11fcce0fa17ac"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8892416, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8953856}	2020313223	221.143.30.115
e3fd54e9c71f03274d928f13358e4781	2	12	2021-01-04 13:14:53.563401+00	111	high = []\nstate = None\nfor _ in range(4):\n    high.append(int(input()))\nfor i in range(3):\n    if i ==0 :\n        if high[i+1]-high[i] > 0:\n            state = 'Uphill'\n        elif high[i+1]-high[i] < 0:\n            state = 'Downhill'\n        elif high[i+1]-high[i] == 0:\n            state = 'Flat Land'\n    else:\n        if high[i+1]-high[i] > 0:\n            ck = 'Uphill'\n        elif high[i+1]-high[i] < 0:\n            ck = 'Downhill'\n        elif high[i+1]-high[i] == 0:\n            ck = 'Flat Land'\n        if state != ck:\n            print('Unknown')\n            break\nprint(state)	-1	{"err": null, "data": [{"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8777728, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "ff65c2703f95d813de0217d1d5a9a551"}, {"error": 0, "memory": 8785920, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9003008, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "96e8f3afb8ca762468d77871571b8924"}]}	Python3	f	{"time_cost": 14, "memory_cost": 9039872}	2015313992	175.192.247.176
a1480e55a7448596835c7740098f25bf	2	14	2021-01-04 14:19:02.488175+00	111	N = int(input())\n\nlst = [[int(input()),1], [int(input()),1]]\n\nans = 0\n\nwhole = [lst[0][0], lst[1][0]]\n\ndef check(n):\n    global whole\n    ch = 1\n    re = -2\n    while whole[re] == n:\n        ch += 1\n        re -= 1\n    return ch\n\ndef long(n):\n    global lst\n    global ans\n    global whole\n    if n == lst[1][0]:\n        lst[1][1] += 1\n    elif n == lst[0][0]:\n        lst[0][1] += 1\n        lst.append(lst.pop(0))\n    else:\n        temp = max([lst[0][1],lst[1][1]])\n        if temp > ans:\n            ans = temp\n        lst.pop(0)\n        lst[0][1] = check(lst[0][0])\n        lst.append([n,1])\n    whole.append(n)\n        \n\nfor i in range(N-2):\n    long(int(input()))\nif lst[0][1] > ans:\n    ans = lst[0][1]\nif lst[1][1] > ans:\n    ans = lst[1][1]\n\nprint(ans)	4	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 21, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9048064, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9035776, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 17, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 21, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9109504, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8941568, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 16, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 8990720, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 1, "real_time": 14, "test_case": "19", "output_md5": null}, {"error": 0, "memory": 9023488, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 14, "test_case": "20", "output_md5": null}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9023488, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 1, "real_time": 19, "test_case": "22", "output_md5": null}]}	Python3	f	{"time_cost": 19, "memory_cost": 9109504}	2015313992	175.192.247.176
aa61c041e590e11dc8d068957355ecd0	2	15	2021-01-04 15:07:21.148739+00	111	N, M = list(map(int,input().split(' ')))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    else: \n        p = find(parent[x])\n        parent[x] = p\n        return p\n\ndef union(x,y):\n    xx = find(x)\n    yy = find(y)\n    if xx != yy:\n        parent[y] = xx\n        number[xx] += number[y]\n        number[y] = 0\n\nparent = dict()\nnumber = dict()\nfor i in range(N):\n    p = i\n    parent[p] = p\n    n = int(input())\n    number[p] = n\nfor i in range(M):\n    x, y = list(map(int,input().split(' ')))\n    union(x,y)\nck = True\nfor i in number.values():\n    if i != 0:\n        ck = False\nif ck:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')	-1	{"err": null, "data": [{"error": 0, "memory": 10051584, "output": null, "result": -1, "signal": 0, "cpu_time": 83, "exit_code": 0, "real_time": 91, "test_case": "1", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9445376, "output": null, "result": -1, "signal": 0, "cpu_time": 84, "exit_code": 0, "real_time": 89, "test_case": "2", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9482240, "output": null, "result": -1, "signal": 0, "cpu_time": 34, "exit_code": 0, "real_time": 47, "test_case": "3", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9474048, "output": null, "result": -1, "signal": 0, "cpu_time": 113, "exit_code": 0, "real_time": 121, "test_case": "4", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9596928, "output": null, "result": -1, "signal": 0, "cpu_time": 39, "exit_code": 0, "real_time": 64, "test_case": "5", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9453568, "output": null, "result": -1, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 38, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9506816, "output": null, "result": 0, "signal": 0, "cpu_time": 63, "exit_code": 0, "real_time": 67, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9441280, "output": null, "result": -1, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 51, "test_case": "8", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 10137600, "output": null, "result": -1, "signal": 0, "cpu_time": 65, "exit_code": 0, "real_time": 66, "test_case": "9", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}]}	Python3	f	{"time_cost": 113, "memory_cost": 10137600}	2015313992	175.192.247.176
b0e2ddae1c571fd833373d5d579e92c6	2	13	2021-01-04 15:47:39.89449+00	117	available_char = ["H","I","N","O","S","X","Z"]\n\nS = input()\n\nresult = "YES"\n\ncnt = 0\nfor c in available_char:\n    cnt += S.count(c)\nif(len(S) != cnt):\n    result = "NO"\nprint(result)	0	{"err": null, "data": [{"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8859648, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9035776}	2019311602	121.189.141.120
f1bfce251cd240a25eeeb886d8b565f5	2	12	2021-01-04 11:48:56.543912+00	39	def hill(List):\n    current=List[0]\n    Flat=[List[0]]\n    Up=[List[0]]\n    Down=[List[0]]\n    for i in range(1,len(List)):\n        if current==List[i]:\n            Flat.append(List[i])\n        elif current<List[i]:\n            Up.append(List[i])\n        else:\n            Down.append(List[i])\n        current=List[i]\n    if len(Flat)==4:\n        print('Flat land')\n    elif len(Up)==4:\n        print('Uphill')\n    elif len(Down)==4:\n        print('Downhill')\n    else:\n        print('Unknown')	-1	{"err": null, "data": [{"error": 0, "memory": 8822784, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8888320, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8953856}	2019312342	124.56.82.117
12290a290c8c9d0cfe5bc3de086f466c	2	12	2021-01-05 00:34:47.046257+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tint h[5]; for (int i = 0; i < 4; i++) cin >> h[i];\n\n\tint mode = -1;\n\n\tfor (int i = 1; i < 4; i++) {\n\t\tif (h[i - 1] < h[i]) {\n\t\t\tif (mode != -1 && mode != 1) {\n\t\t\t\tcout << "Unknown"; return 0;\n\t\t\t}\n\t\t\tmode = 1;\n\t\t}\n\t\telse if (h[i - 1] == h[i]) {\n\t\t\tif (mode != -1 && mode != 2) {\n\t\t\t\tcout << "Unknown"; return 0;\n\t\t\t}\n\t\t\tmode = 2;\n\t\t}\n\t\telse {\n\t\t\tif (mode != -1 && mode != 3) {\n\t\t\t\tcout << "Unknown"; return 0;\n\t\t\t}\n\t\t\tmode = 3;\n\t\t}\n\t}\n\n\tif (mode == 1) cout << "Uphill";\n\telse if (mode == 2) cout << "Flat Land";\n\telse cout << "Downhill";\n\t\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3387392, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3514368}	2020313266	124.53.59.135
78b221a2701da5b48f9fc2dbf1230e18	2	12	2021-01-04 13:19:14.321627+00	111	high = []\nstate = None\nfor _ in range(4):\n    high.append(int(input()))\nfor i in range(3):\n    if i ==0 :\n        if high[i+1]-high[i] > 0:\n            state = 'Uphill'\n        elif high[i+1]-high[i] < 0:\n            state = 'Downhill'\n        elif high[i+1]-high[i] == 0:\n            state = 'Flat Land'\n    else:\n        if high[i+1]-high[i] > 0:\n            ck = 'Uphill'\n        elif high[i+1]-high[i] < 0:\n            ck = 'Downhill'\n        elif high[i+1]-high[i] == 0:\n            ck = 'Flat Land'\n        if state != ck:\n            state = 'Unknown'\n            break\nprint(state)	0	{"err": null, "data": [{"error": 0, "memory": 8867840, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 42, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8892416, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 43, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 42, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 41, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8888320, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 43, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 12, "memory_cost": 9031680}	2015313992	175.192.247.176
9e6853adae6ab799fac7aa3bd24ceb5e	2	13	2021-01-04 14:19:47.679927+00	82	sign = input()\nif "A" in sign or "B" in sign or "C" in sign or "D" in sign or "E" in sign or "F" in sign or "G" in sign or "J" in sign or "K" in sign or "L" in sign or "M" in sign or "P" in sign or "Q" in sign or "R"in sign or"T"in sign or"U"in sign or"V"in sign or"W"in sign :\n  print("NO")\nelse:\n  print("YES")	0	{"err": null, "data": [{"error": 0, "memory": 8908800, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8867840, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8892416, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8896512, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8957952}	2020312657	121.137.49.201
3c9acaf6f73f444b1a113de8ea4807a1	2	13	2021-01-05 01:44:58.733085+00	87	s = str(input())\nuse = 'HINOSXZ'\nresult = 'YES'\nfor i in s:\n    if i not in use:\n        result = 'NO'\nprint(result)	0	{"err": null, "data": [{"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8855552, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8855552, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 17, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8982528}	2020314086	14.39.62.140
d1e4d7f659bbec1c6c413089b4ca5656	2	12	2021-01-04 15:23:12.293004+00	117	h = []\n\nfor i in range(0, 4):\n    h.append(input())\n\n\ncurrent_hill = "Nothing"\n\n\nfor i in range(1,4):\n    if(current_hill == "Nothing"):\n        \n        if(h[i] > h[i-1]):\n            current_hill = "Uphill"\n\n        elif(h[i] < h[i-1]):\n            current_hill = "Downhill"\n\n        elif(h[i] == h[i-1]):\n            current_hill = "Flat Land"\n\n    else:\n        if(current_hill == "Uphill"):\n            if(h[i] <= h[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Downhill"):\n            if(h[i] >= h[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Flat Land"):\n            if(h[i] != h[i-1]):\n                current_hill = "Unknown"\n\nprint(current_hill)	-1	{"err": null, "data": [{"error": 0, "memory": 8855552, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8847360, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 14, "memory_cost": 8986624}	2019311602	211.104.145.52
2fdcd09a5f30fbaf127618ae1ceeec94	2	12	2021-01-04 11:51:19.328635+00	10	#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    ios::sync_with_stdio(false); cin.tie(NULL);\n    bool in, de;\n    in = de = true;\n    int tmp; cin >> tmp;\n    for(int i = 0; i < 3; i++){\n        int temp; cin >> temp;\n        if(tmp < temp) de = false;\n        if(tmp > temp) in = false;\n        tmp = temp;\n    }\n    if(in && !de) cout << "Uphill";\n    else if(!in && de) cout << "Downhill";\n    else if(in && de) cout << "Flat Land";\n    else cout << "Unknown";\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3407872, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3346432, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3358720, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	C++	f	{"time_cost": 1, "memory_cost": 3596288}	2020311119	218.238.218.240
86ce43bd5fbf2fc217a02f9acb31214f	2	13	2021-01-04 13:22:35.19308+00	111	Q = input()\nck = True\nfor i in Q:\n    if not i in 'HINOSXZ':\n        print('NO')\n        ck = False\nif ck:\n    print('YES')	-1	{"err": null, "data": [{"error": 0, "memory": 8937472, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 14, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8863744, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "9d762d3b96b04534bd794cb8e15960f8"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "8", "output_md5": "646da0df850e1bf42ee11fcce0fa17ac"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8867840, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8982528}	2015313992	175.192.247.176
dbe92eaec0881161a9753a50bae1bd31	2	12	2021-01-05 01:29:52.966358+00	72	#include<iostream>\n#include<algorithm>\nusing namespace std;\nint a, b, c, d;\nint main(){\n    cin >> a >> b >> c >> d;\n    if(a < b && b < c && c < d) cout << "Uphill";\n    else if(a > b && b > c && c > d) cout << "Downhill";\n    else if(a == b && b == c && c == d) cout << "Flat Land";\n    else cout << "Unknown";\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3526656}	9967han	222.112.181.211
e1315fe60218313e8cc4697cd81dcfc6	2	14	2021-01-04 14:23:53.852707+00	111	N = int(input())\n\nlst = [[int(input()),1], [int(input()),1]]\n\nans = 0\n\nwhole = [lst[0][0], lst[1][0]]\n\ndef check(n):\n    global whole\n    ch = 1\n    re = -2\n    while whole[re] == n:\n        ch += 1\n        re -= 1\n    return ch\n\ndef long(n):\n    global lst\n    global ans\n    global whole\n    if n == lst[1][0]:\n        lst[1][1] += 1\n    elif n == lst[0][0]:\n        lst[0][1] += 1\n        lst.append(lst.pop(0))\n    else:\n        temp = max([lst[0][1],lst[1][1]])\n        if temp > ans:\n            ans = temp\n        lst.pop(0)\n        lst[0][1] = check(lst[0][0])\n        lst.append([n,1])\n    whole.append(n)\n        \n\nfor i in range(N-2):\n    long(int(input()))\nif lst[0][1] > ans:\n    ans = lst[0][1]\nif lst[1][1] > ans:\n    ans = lst[1][1]\n\nprint(ans)	4	{"err": null, "data": [{"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9109504, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8863744, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 17, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9072640, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9027584, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 12, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 8970240, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9113600, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 20, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 9117696, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 16, "test_case": "19", "output_md5": null}, {"error": 0, "memory": 8953856, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 17, "test_case": "20", "output_md5": null}, {"error": 0, "memory": 9048064, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 20, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9023488, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 13, "test_case": "22", "output_md5": null}]}	Python3	f	{"time_cost": 18, "memory_cost": 9117696}	2015313992	175.192.247.176
caf8ddf29a82d33beecc8f666a4a813c	2	15	2021-01-04 15:24:10.271754+00	111	N, M = list(map(int,input().split(' ')))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    else: \n        p = find(parent[x])\n        parent[x] = p\n        return p\n\ndef union(x,y):\n    xx = find(x)\n    yy = find(y)\n    if xx != yy:\n        parent[y] = xx\n        number[xx] += number[y]\n        number[y] = 0\n\nparent = dict()\nnumber = dict()\nfor i in range(N):\n    p = i\n    parent[p] = p\n    n = int(input())\n    number[p] = n\nfor i in range(M):\n    x, y = list(map(int,input().split(' ')))\n    union(x,y)\nck = True\nfor i in number.values():\n    if i != 0:\n        ck = False\nif ck:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')	-1	{"err": null, "data": [{"error": 0, "memory": 9986048, "output": null, "result": -1, "signal": 0, "cpu_time": 64, "exit_code": 0, "real_time": 72, "test_case": "1", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9457664, "output": null, "result": -1, "signal": 0, "cpu_time": 76, "exit_code": 0, "real_time": 85, "test_case": "2", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9416704, "output": null, "result": -1, "signal": 0, "cpu_time": 33, "exit_code": 0, "real_time": 50, "test_case": "3", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9482240, "output": null, "result": -1, "signal": 0, "cpu_time": 110, "exit_code": 0, "real_time": 114, "test_case": "4", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9609216, "output": null, "result": -1, "signal": 0, "cpu_time": 47, "exit_code": 0, "real_time": 72, "test_case": "5", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9576448, "output": null, "result": -1, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 36, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9400320, "output": null, "result": 0, "signal": 0, "cpu_time": 81, "exit_code": 0, "real_time": 89, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9478144, "output": null, "result": -1, "signal": 0, "cpu_time": 32, "exit_code": 0, "real_time": 36, "test_case": "8", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 10215424, "output": null, "result": -1, "signal": 0, "cpu_time": 63, "exit_code": 0, "real_time": 68, "test_case": "9", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}]}	Python3	f	{"time_cost": 110, "memory_cost": 10215424}	2015313992	175.192.247.176
2c9215fa2d5c40b1cd34dc57f1c8ea8a	2	14	2021-01-04 11:52:20.214752+00	88	people = int(input())\ncount = []\nfor i in range(people):\n    count.append(int(input()))\n\nset_count = set(count)\nres = 0\ndic = {}\ntemp_list = []\nfor num in set_count:\n    sabon = count.copy()\n    for _ in range(count.count(num)):\n        sabon.remove(num)\n        for i in range(len(sabon)-1):\n            \n            if sabon[i]==sabon[i+1]:\n                res += 1\n            elif sabon[i] !=sabon[i+1] and res > 1:\n                temp_list.append(res)\n                \n                dic[num]=max(temp_list)\n                temp_list = []\n    res=0\nprint(dic[max(dic)])	4	{"err": null, "data": [{"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 19, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9048064, "output": null, "result": 4, "signal": 0, "cpu_time": 263, "exit_code": 1, "real_time": 275, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "c16a5320fa475530d9583c34fd356ef5"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "5", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 9015296, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "6", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 20, "test_case": "7", "output_md5": "49ae49a23f67c759bf4fc791ba842aa2"}, {"error": 0, "memory": 9043968, "output": null, "result": -1, "signal": 0, "cpu_time": 400, "exit_code": 0, "real_time": 404, "test_case": "8", "output_md5": "7757c9e5178fdb7d4d39207ff91840c3"}, {"error": 0, "memory": 9056256, "output": null, "result": -1, "signal": 0, "cpu_time": 472, "exit_code": 0, "real_time": 473, "test_case": "9", "output_md5": "621765159ee1ea4299c0df3e1d29034b"}, {"error": 0, "memory": 9076736, "output": null, "result": -1, "signal": 0, "cpu_time": 499, "exit_code": 0, "real_time": 504, "test_case": "10", "output_md5": "ef1e491a766ce3127556063d49bc2f98"}, {"error": 0, "memory": 9056256, "output": null, "result": -1, "signal": 0, "cpu_time": 483, "exit_code": 0, "real_time": 487, "test_case": "11", "output_md5": "7eacb532570ff6858afd2723755ff790"}, {"error": 0, "memory": 9043968, "output": null, "result": -1, "signal": 0, "cpu_time": 498, "exit_code": 0, "real_time": 504, "test_case": "12", "output_md5": "03afdbd66e7929b125f8597834fa83a4"}, {"error": 0, "memory": 9068544, "output": null, "result": -1, "signal": 0, "cpu_time": 417, "exit_code": 0, "real_time": 421, "test_case": "13", "output_md5": "c9f0f895fb98ab9159f51fd0297e236d"}, {"error": 0, "memory": 9158656, "output": null, "result": 0, "signal": 0, "cpu_time": 263, "exit_code": 0, "real_time": 272, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9043968, "output": null, "result": -1, "signal": 0, "cpu_time": 209, "exit_code": 0, "real_time": 222, "test_case": "15", "output_md5": "8322f656f09153add8660888b4e4d373"}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 312, "exit_code": 0, "real_time": 321, "test_case": "16", "output_md5": "76af383c041d78e292e2694a31dab351"}, {"error": 0, "memory": 9138176, "output": null, "result": -1, "signal": 0, "cpu_time": 514, "exit_code": 0, "real_time": 527, "test_case": "17", "output_md5": "8613985ec49eb8f757ae6439e879bb2a"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 454, "exit_code": 0, "real_time": 459, "test_case": "18", "output_md5": "ef1890585bae446a0668afed3012daa2"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 339, "exit_code": 0, "real_time": 343, "test_case": "19", "output_md5": "95cc848bdbf89f5187fbfa8aa2ba1a5e"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 354, "exit_code": 0, "real_time": 357, "test_case": "20", "output_md5": "7884a9652e94555c70f96b6be63be216"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 339, "exit_code": 0, "real_time": 343, "test_case": "21", "output_md5": "7aaba5f3511f56128e7130c2973e0503"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 328, "exit_code": 0, "real_time": 337, "test_case": "22", "output_md5": "74e1513cc2927e89575044e7d6dbc8e0"}]}	Python3	f	{"time_cost": 514, "memory_cost": 9158656}	2015312922	218.209.14.16
9446218275b14652d20fea542893ca18	2	12	2021-01-05 00:34:53.490228+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tint h[5]; for (int i = 0; i < 4; i++) cin >> h[i];\n\n\tint mode = -1;\n\n\tfor (int i = 1; i < 4; i++) {\n\t\tif (h[i - 1] < h[i]) {\n\t\t\tif (mode != -1 && mode != 1) {\n\t\t\t\tcout << "Unknown"; return 0;\n\t\t\t}\n\t\t\tmode = 1;\n\t\t}\n\t\telse if (h[i - 1] == h[i]) {\n\t\t\tif (mode != -1 && mode != 2) {\n\t\t\t\tcout << "Unknown"; return 0;\n\t\t\t}\n\t\t\tmode = 2;\n\t\t}\n\t\telse {\n\t\t\tif (mode != -1 && mode != 3) {\n\t\t\t\tcout << "Unknown"; return 0;\n\t\t\t}\n\t\t\tmode = 3;\n\t\t}\n\t}\n\n\tif (mode == 1) cout << "Uphill";\n\telse if (mode == 2) cout << "Flat Land";\n\telse cout << "Downhill";\n\t\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3420160, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3555328}	2020313266	124.53.59.135
5b31cb5ad83680ecf032b4af049d3458	2	12	2021-01-04 13:25:03.098088+00	31	#include "stdio.h"\n\nint main() {\n  int flag = 0;\n  \n  int nums[4] = {0,0,0,0};\n  for(int i = 0; i < 4; i++) {\n    scanf("%d", &nums[i]);\n  }\n  \n  if(\n      (nums[0] < nums[1]) &&\n      (nums[1] < nums[2]) &&\n      (nums[2] < nums[3])\n  ){ printf("Uphill"); return 0; }\n  \n  if(\n      (nums[0] > nums[1]) &&\n      (nums[1] > nums[2]) &&\n      (nums[2] > nums[3])\n  ){ printf("Downhill"); return 0; }\n  \n  if(\n      (nums[0] == nums[1]) &&\n      (nums[1] == nums[2]) &&\n      (nums[2] == nums[3])\n  ){ printf("Flat Land"); return 0; }\n  \n  printf("Unknown");\n  \n  return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1581056, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1703936}	2014311827	210.113.4.2
6b07dd61e507ad2880bd4916c7d2a31f	2	12	2021-01-05 14:09:11.05572+00	142	first = int(input())\nsecond = int(input())\nthird = int(input())\nfourth = int(input())\nif first < second:\n  if second < third:\n    if third < fourth:\n      print("Uphill")\n    else:\n      print("Unknown")\n  else:\n    print("Unknown")\nelif first == second:\n  if second == third:\n    if third == fourth:\n      print("Flat Land")\n    else:\n      print("Unknown")\n  else:\n    print("Unknown")\nelif first > second:\n  if second > third:\n    if third > fourth:\n      print("Downhill")\n\telse:\n      print("Unknown")\n  else:\n    print("Unknown")	-2	{}	Python2	f	{"score": 0, "err_info": "Sorry: IndentationError: unexpected indent (solution.py, line 25)"}	2020311733	1.225.26.118
6211a18bc112eafdf51457881701dd44	2	15	2021-01-04 15:25:01.840273+00	111	N, M = list(map(int,input().split(' ')))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    else: \n        p = find(parent[x])\n        parent[x] = p\n        return p\n\ndef union(x,y):\n    xx = find(x)\n    yy = find(y)\n    if xx != yy:\n        parent[y] = xx\n        number[xx] += number[y]\n        number[y] = 0\n\nparent = dict()\nnumber = dict()\nfor i in range(N):\n    p = i\n    parent[p] = p\n    n = int(input())\n    number[p] = n\nfor i in range(M):\n    x, y = list(map(int,input().split(' ')))\n    union(x,y)\nck = True\nfor i in number.values():\n    if i != 0:\n        ck = False\nif ck:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')	-1	{"err": null, "data": [{"error": 0, "memory": 10047488, "output": null, "result": -1, "signal": 0, "cpu_time": 83, "exit_code": 0, "real_time": 88, "test_case": "1", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9568256, "output": null, "result": -1, "signal": 0, "cpu_time": 67, "exit_code": 0, "real_time": 88, "test_case": "2", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9334784, "output": null, "result": -1, "signal": 0, "cpu_time": 58, "exit_code": 0, "real_time": 67, "test_case": "3", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9306112, "output": null, "result": -1, "signal": 0, "cpu_time": 112, "exit_code": 0, "real_time": 125, "test_case": "4", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9502720, "output": null, "result": -1, "signal": 0, "cpu_time": 55, "exit_code": 0, "real_time": 79, "test_case": "5", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9424896, "output": null, "result": -1, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 54, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9441280, "output": null, "result": 0, "signal": 0, "cpu_time": 66, "exit_code": 0, "real_time": 71, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9297920, "output": null, "result": -1, "signal": 0, "cpu_time": 43, "exit_code": 0, "real_time": 51, "test_case": "8", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 10170368, "output": null, "result": -1, "signal": 0, "cpu_time": 54, "exit_code": 0, "real_time": 66, "test_case": "9", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}]}	Python3	f	{"time_cost": 112, "memory_cost": 10170368}	2015313992	175.192.247.176
3445fd91c51e807eb986b57d871f7a7e	2	12	2021-01-04 15:32:03.149717+00	117	h_ih = []\n\nfor i in range(0, 4):\n    h_ih.append(input())\n\n\ncurrent_hill = "Nothing"\n\n\nfor i in range(1,4):\n    if(current_hill == "Nothing"):\n        \n        if(h_ih[i] > h_ih[i-1]):\n            current_hill = "Uphill"\n\n        elif(h_ih[i] < h_ih[i-1]):\n            current_hill = "Downhill"\n\n        elif(h_ih[i] == h_ih[i-1]):\n            current_hill = "Flat Land"\n\n    else:\n        if(current_hill == "Uphill"):\n            if(h_ih[i] <= h_ih[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Downhill"):\n            if(h_ih[i] >= h_ih[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Flat Land"):\n            if(h_ih[i] != h_ih[i-1]):\n                current_hill = "Unknown"\n\nprint(str(current_hill))	0	{"err": null, "data": [{"error": 0, "memory": 7245824, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7426048, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 7364608, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 11, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7446528, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 7340032, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python2	f	{"time_cost": 11, "memory_cost": 7446528}	2019311602	121.189.141.120
acd5cd1b5ab537c8f4bf9df99c500040	2	12	2021-01-04 11:53:34.195583+00	10	#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    ios::sync_with_stdio(false); cin.tie(NULL);\n    bool in, de, flat;\n    in = de = flat = true;\n    int tmp; cin >> tmp;\n    for(int i = 0; i < 3; i++){\n        int temp; cin >> temp;\n        if(tmp <= temp) de = false;\n        if(tmp >= temp) in = false;\n        if(tmp != temp) flat = false;\n        tmp = temp;\n    }\n    if(in && !de) cout << "Uphill";\n    else if(!in && de) cout << "Downhill";\n    else if(flat) cout << "Flat Land";\n    else cout << "Unknown";\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3354624, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3612672}	2020311119	218.238.218.240
418e55c3c20f8d9f757fae6b722ea003	2	13	2021-01-04 13:25:52.654874+00	111	Q = input()\nck = True\nfor i in Q:\n    if not i in 'HINOSXZ':\n        print('NO')\n        ck = False\n        break\nif ck:\n    print('YES')	0	{"err": null, "data": [{"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8851456, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8810496, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8859648, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8892416, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8691712, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8859648, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 12, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 18, "memory_cost": 9039872}	2015313992	175.192.247.176
aa8c150e672d9b096abfafd5ec3ad0ca	2	12	2021-01-04 11:55:41.298553+00	39	def hill(List):\n    current=List[0]\n    Flat=[List[0]]\n    Up=[List[0]]\n    Down=[List[0]]\n    for i in range(1,len(List)):\n        if current==List[i]:\n            Flat.append(List[i])\n        elif current<List[i]:\n            Up.append(List[i])\n        else:\n            Down.append(List[i])\n        current=List[i]\n    if len(Flat)==4:\n        print('Flat land')\n    elif len(Up)==4:\n        print('Uphill')\n    elif len(Down)==4:\n        print('Downhill')\n    else:\n        print('Unknown')\n            \nList=[]\nimport sys\n \nfor x in sys.stdin.readline():\n    List.append(x)\nhill(List)	-1	{"err": null, "data": [{"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 11, "memory_cost": 8962048}	2019312342	124.56.82.117
4eaea1bbf29cc5399820584f8b3a970a	2	14	2021-01-04 14:38:50.11376+00	111	N = int(input())\nlst = [[-1,1], [-1,1]]\n\nans = 0\n\nwhole = [-1,-1]\n\ndef check(n):\n    global whole\n    ch = 1\n    re = -2\n    if n == -1:\n        return ch\n    while whole[re] == n:\n        ch += 1\n        re -= 1\n    return ch\n\ndef long(n):\n    global lst\n    global ans\n    global whole\n\n    if n == lst[1][0]:\n        lst[1][1] += 1\n    elif n == lst[0][0]:\n        lst[0][1] += 1\n        lst.append(lst.pop(0))\n    else:\n        temp = max([lst[0][1],lst[1][1]])\n        if temp > ans:\n            ans = temp\n        lst.pop(0)\n        lst[0][1] = check(lst[0][0])\n        lst.append([n,1])\n    whole.append(n)\n        \n\nfor i in range(N):\n    long(int(input()))\nif lst[0][1] > ans:\n    ans = lst[0][1]\nif lst[1][1] > ans:\n    ans = lst[1][1]\n\nprint(ans)	0	{"err": null, "data": [{"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 23, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9138176, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 13, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9072640, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 19, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 19, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8896512, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 20, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 9048064, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 22, "memory_cost": 9138176}	2015313992	175.192.247.176
6adf08b5579615a3f9566e91104173e7	2	14	2021-01-04 15:49:27.696507+00	115	N = int(input())\npeople = []\nfor i in range(N) :\n    num = int(input())\n    people.append(num)\ns1 = set(people)\nleng_list = []\nfor i in s1 :\n    check_list = []\n    cnt_list = []\n    cnt = 0\n    for j in people :\n        if j != i :\n            check_list.append(j)\n    for k in range(0, len(check_list)) :\n        if check_list[k-1] == check_list[k] :\n            cnt += 1\n            cnt_list.append(cnt)\n        else:\n            cnt = 0\n    cnt_list.sort(reverse = True)\n    final = mid_list[0] + 1\n    leng_list.append(final)\nleng_list.sort(reverse = True)\nprint(leng_list[0])	4	{"err": null, "data": [{"error": 0, "memory": 7409664, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 15, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7516160, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7577600, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 10, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7401472, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 12, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7405568, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 11, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7573504, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7565312, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 1, "real_time": 10, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7389184, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 15, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7483392, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 17, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7524352, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 17, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 7561216, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 15, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 7639040, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "12", "output_md5": null}, {"error": 0, "memory": 7503872, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 17, "test_case": "13", "output_md5": null}, {"error": 0, "memory": 7385088, "output": null, "result": 4, "signal": 0, "cpu_time": 17, "exit_code": 1, "real_time": 17, "test_case": "14", "output_md5": null}, {"error": 0, "memory": 7491584, "output": null, "result": 4, "signal": 0, "cpu_time": 17, "exit_code": 1, "real_time": 18, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 7409664, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 15, "test_case": "16", "output_md5": null}, {"error": 0, "memory": 7483392, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 16, "test_case": "17", "output_md5": null}, {"error": 0, "memory": 7475200, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 15, "test_case": "18", "output_md5": null}, {"error": 0, "memory": 7561216, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 17, "test_case": "19", "output_md5": null}, {"error": 0, "memory": 7491584, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 15, "test_case": "20", "output_md5": null}, {"error": 0, "memory": 7573504, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 12, "test_case": "21", "output_md5": null}, {"error": 0, "memory": 7585792, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 16, "test_case": "22", "output_md5": null}]}	Python2	f	{"time_cost": 17, "memory_cost": 7639040}	2020311689	116.120.200.125
4d7f6388a16f93648c55f248072d75f4	2	14	2021-01-04 15:56:10.520191+00	115	N = int(input())\npeople = []\nfor i in range(N) :\n    num = int(input())\n    people.append(num)\ns1 = set(people)\nleng_list = []\nfor i in s1 :\n    check_list = []\n    cnt_list = []\n    cnt = 0\n    for j in people :\n        if j != i :\n            check_list.append(j)\n    for k in range(0, len(check_list)) :\n        if check_list[k-1] == check_list[k] :\n            cnt += 1\n            cnt_list.append(cnt)\n        else:\n            cnt = 0\n    cnt_list.sort(reverse = True)\n    final = cnt_list[0] + 1\n    leng_list.append(final)\nleng_list.sort(reverse = True)\nprint(leng_list[0])	4	{"err": null, "data": [{"error": 0, "memory": 7417856, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7573504, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 17, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7368704, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7446528, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7467008, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7467008, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7368704, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7454720, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 7483392, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7581696, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 19, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7475200, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 28, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7593984, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 36, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7532544, "output": null, "result": 0, "signal": 0, "cpu_time": 104, "exit_code": 0, "real_time": 111, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7573504, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 16, "test_case": "14", "output_md5": null}, {"error": 0, "memory": 7389184, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "15", "output_md5": "2bb232c0b13c774965ef8558f0fbd615"}, {"error": 0, "memory": 7503872, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 7553024, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 38, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7462912, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 15, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 7606272, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 32, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 7520256, "output": null, "result": 0, "signal": 0, "cpu_time": 27, "exit_code": 0, "real_time": 32, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 7589888, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 26, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 7413760, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 27, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python2	f	{"time_cost": 104, "memory_cost": 7606272}	2020311689	116.120.200.125
e9c90e84700af225105beb58330b4d8b	2	13	2021-01-04 11:56:59.556402+00	10	#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    ios::sync_with_stdio(false); cin.tie(NULL);\n    set<char> s;\n    s.insert('H');\n    s.insert('I');\n    s.insert('N');\n    s.insert('O');\n    s.insert('S');\n    s.insert('X');\n    s.insert('Z');\n    string str; cin >> str;\n    for(int i = 0; i < str.size(); i++){\n        if(s.find(str[i]) == s.end()){\n            cout << "NO";\n            return 0;\n        }\n    }\n    cout << "YES";\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3645440, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3465216, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3600384, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3645440}	2020311119	218.238.218.240
9fe0f95f0ff27dd763c43bb7fff57fcb	2	14	2021-01-04 12:03:30.204981+00	88	people = int(input())\ncount = []\nfor i in range(people):\n    count.append(int(input()))\n\nset_count = set(count)\nres = 0\ndic = {}\ntemp_list = []\nfor num in set_count:\n    sabon = count.copy()\n    for _ in range(count.count(num)):\n        sabon.remove(num)\n        for i in range(len(sabon)-1):\n            \n            if sabon[i]==sabon[i+1]:\n                res += 1\n            elif sabon[i] !=sabon[i+1] and res > 1:\n                temp_list.append(res)\n                \n                dic[num]=max(temp_list)\n                temp_list = []\n    res=0\nprint(dic[max(dic)])	4	{"err": null, "data": [{"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9027584, "output": null, "result": 4, "signal": 0, "cpu_time": 262, "exit_code": 1, "real_time": 263, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "c16a5320fa475530d9583c34fd356ef5"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 8871936, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 24, "test_case": "6", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 9121792, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 22, "test_case": "7", "output_md5": "49ae49a23f67c759bf4fc791ba842aa2"}, {"error": 0, "memory": 9134080, "output": null, "result": -1, "signal": 0, "cpu_time": 407, "exit_code": 0, "real_time": 412, "test_case": "8", "output_md5": "7757c9e5178fdb7d4d39207ff91840c3"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 467, "exit_code": 0, "real_time": 472, "test_case": "9", "output_md5": "621765159ee1ea4299c0df3e1d29034b"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 473, "exit_code": 0, "real_time": 482, "test_case": "10", "output_md5": "ef1e491a766ce3127556063d49bc2f98"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 495, "exit_code": 0, "real_time": 504, "test_case": "11", "output_md5": "7eacb532570ff6858afd2723755ff790"}, {"error": 0, "memory": 8970240, "output": null, "result": -1, "signal": 0, "cpu_time": 488, "exit_code": 0, "real_time": 497, "test_case": "12", "output_md5": "03afdbd66e7929b125f8597834fa83a4"}, {"error": 0, "memory": 9105408, "output": null, "result": -1, "signal": 0, "cpu_time": 403, "exit_code": 0, "real_time": 411, "test_case": "13", "output_md5": "c9f0f895fb98ab9159f51fd0297e236d"}, {"error": 0, "memory": 9056256, "output": null, "result": 0, "signal": 0, "cpu_time": 294, "exit_code": 0, "real_time": 301, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 221, "exit_code": 0, "real_time": 222, "test_case": "15", "output_md5": "8322f656f09153add8660888b4e4d373"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 326, "exit_code": 0, "real_time": 327, "test_case": "16", "output_md5": "76af383c041d78e292e2694a31dab351"}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 497, "exit_code": 0, "real_time": 506, "test_case": "17", "output_md5": "8613985ec49eb8f757ae6439e879bb2a"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 454, "exit_code": 0, "real_time": 455, "test_case": "18", "output_md5": "ef1890585bae446a0668afed3012daa2"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 338, "exit_code": 0, "real_time": 339, "test_case": "19", "output_md5": "95cc848bdbf89f5187fbfa8aa2ba1a5e"}, {"error": 0, "memory": 9048064, "output": null, "result": -1, "signal": 0, "cpu_time": 339, "exit_code": 0, "real_time": 344, "test_case": "20", "output_md5": "7884a9652e94555c70f96b6be63be216"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 363, "exit_code": 0, "real_time": 364, "test_case": "21", "output_md5": "7aaba5f3511f56128e7130c2973e0503"}, {"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 342, "exit_code": 0, "real_time": 347, "test_case": "22", "output_md5": "74e1513cc2927e89575044e7d6dbc8e0"}]}	Python3	f	{"time_cost": 497, "memory_cost": 9134080}	2015312922	218.209.14.16
f265af43d2f85c42513353d2819053bd	2	15	2021-01-04 12:17:47.516573+00	10	#include <bits/stdc++.h>\nusing namespace std;\nvector<int> arr;\nint p[10003];\nint find(int a){\n    if(a == p[a]) return a;\n    return p[a] = find(p[a]);\n}\nvoid uf(int a, int b){\n    a = find(a); b = find(b);\n    if(a == b) return;\n    if(a > b) swap(a, b);\n    p[b] = a;\n    arr[a] += arr[b];\n}\nint main(){\n    ios::sync_with_stdio(false); cin.tie(NULL);\n    int n, m; cin >> n >> m;\n    for(int i = 0; i < n; i++) p[i] = i;\n    for(int i = 0; i < n; i++){\n        int tmp; cin >> tmp;\n        arr.push_back(tmp);\n    }\n    for(int i = 0; i < m; i++){\n        int a, b; cin >> a >> b;\n        uf(a, b);\n    }\n    for(int i = 0; i < n; i++)\n        if(arr[find(i)] < 0){\n            cout << "IMPOSSIBLE";\n            return 0;\n        }\n    cout << "POSSIBLE";\n    \n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 11, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3600384, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3661824, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 7, "memory_cost": 3661824}	2020311119	218.238.218.240
25c9de3d343b9e1d94f39c4b95481c5e	2	12	2021-01-04 12:31:15.110822+00	107	a = int(input("첫번째 지점의 높이"))\nb = int(input("두번째 지점의 높이"))\nc = int(input("세번째 지점의 높이"))\nd = int(input("네번째 지점의 높이"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelse:\n  print("Unknown")	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/744506871b514725b245b13e8fa6af45/main.c:1:5: error: expected expression before 'int'\\n a = int(input(\\"첫번째 지점의 높이\\"))\\n     ^~~"}	2020311650	1.251.170.216
4470e48872509060bf237374fe2270dc	2	13	2021-01-04 12:32:52.434312+00	109	s = input()\nalpha_list = ["H","I","N","O","S","X","Z"]\n\ndef solution(s):\n\tfor i in s:\n\t\tif i not in alpha_list:\n\t\t\treturn "NO"\n\treturn "YES"\n\nprint(solution(s))	0	{"err": null, "data": [{"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 20, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8896512, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8912896, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 21, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8855552, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 20, "memory_cost": 9011200}	2015313348	61.253.60.219
b7b29f7828b027278c8ea3c06926592e	2	12	2021-01-04 12:35:52.648677+00	39	def hill(List):\n    current=List[0]\n    Flat=[List[0]]\n    Up=[List[0]]\n    Down=[List[0]]\n    for i in range(1,len(List)):\n        if current==List[i]:\n            Flat.append(List[i])\n        elif current<List[i]:\n            Up.append(List[i])\n        else:\n            Down.append(List[i])\n        current=List[i]\n    if len(Flat)==4:\n        print('Flat land')\n    elif len(Up)==4:\n        print('Uphill')\n    elif len(Down)==4:\n        print('Downhill')\n    else:\n        print('Unknown')\n            \nimport sys\n\n\nList=[]\nfor j in range(4):\n    num = sys.stdin.readline(1)\n    if num=='\\n':\n        num = sys.stdin.readline(1)\n    List.append(num)\nhill(List)	-1	{"err": null, "data": [{"error": 0, "memory": 8925184, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8896512, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8888320, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8957952}	2019312342	124.56.82.117
b862d8ab5adc656b14c239e6029567e7	2	12	2021-01-04 12:39:04.518665+00	107	a = int(input("처음"))\nb = int(input("둘"))\nc = int(input("셋"))\nd = int(input("넷"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelif a=b and b=c and c=d:\n  print("Flat Land")\nelse:\n  print("Unknown")	-2	{}	Python3	f	{"score": 0, "err_info": "File \\"/judger/run/659f9a8f1a3b43a48bdfcd87e0ae91a7/solution.py\\", line 10\\n    elif a=b and b=c and c=d:\\n          ^\\nSyntaxError: invalid syntax"}	2020311650	1.251.170.216
30cfae1afb2a50c1d1260578217514e3	2	14	2021-01-04 12:04:53.943789+00	88	people = int(input())\ncount = []\nfor i in range(people):\n    count.append(int(input()))\n\nset_count = set(count)\nres = 0\ndic = {}\ntemp_list = []\nfor num in set_count:\n    sabon = count.copy()\n    for _ in range(count.count(num)):\n        sabon.remove(num)\n        for i in range(len(sabon)-1):\n            if sabon[i]==sabon[i+1]:\n                res += 1\n            elif sabon[i] !=sabon[i+1] and res > 1:\n                \n                dic[num]=res\n    res=0\nprint(dic[max(dic)])	4	{"err": null, "data": [{"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9089024, "output": null, "result": 4, "signal": 0, "cpu_time": 275, "exit_code": 1, "real_time": 280, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "c16a5320fa475530d9583c34fd356ef5"}, {"error": 0, "memory": 9109504, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 8990720, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "5", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "7", "output_md5": "49ae49a23f67c759bf4fc791ba842aa2"}, {"error": 0, "memory": 8974336, "output": null, "result": -1, "signal": 0, "cpu_time": 248, "exit_code": 0, "real_time": 253, "test_case": "8", "output_md5": "7757c9e5178fdb7d4d39207ff91840c3"}, {"error": 0, "memory": 8970240, "output": null, "result": -1, "signal": 0, "cpu_time": 325, "exit_code": 0, "real_time": 333, "test_case": "9", "output_md5": "621765159ee1ea4299c0df3e1d29034b"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 299, "exit_code": 0, "real_time": 303, "test_case": "10", "output_md5": "ef1e491a766ce3127556063d49bc2f98"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 315, "exit_code": 0, "real_time": 320, "test_case": "11", "output_md5": "7eacb532570ff6858afd2723755ff790"}, {"error": 0, "memory": 9015296, "output": null, "result": -1, "signal": 0, "cpu_time": 303, "exit_code": 0, "real_time": 309, "test_case": "12", "output_md5": "03afdbd66e7929b125f8597834fa83a4"}, {"error": 0, "memory": 8974336, "output": null, "result": -1, "signal": 0, "cpu_time": 288, "exit_code": 0, "real_time": 288, "test_case": "13", "output_md5": "c9f0f895fb98ab9159f51fd0297e236d"}, {"error": 0, "memory": 8970240, "output": null, "result": 0, "signal": 0, "cpu_time": 258, "exit_code": 0, "real_time": 258, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9117696, "output": null, "result": -1, "signal": 0, "cpu_time": 166, "exit_code": 0, "real_time": 171, "test_case": "15", "output_md5": "8322f656f09153add8660888b4e4d373"}, {"error": 0, "memory": 8966144, "output": null, "result": -1, "signal": 0, "cpu_time": 209, "exit_code": 0, "real_time": 210, "test_case": "16", "output_md5": "76af383c041d78e292e2694a31dab351"}, {"error": 0, "memory": 9121792, "output": null, "result": -1, "signal": 0, "cpu_time": 328, "exit_code": 0, "real_time": 329, "test_case": "17", "output_md5": "8613985ec49eb8f757ae6439e879bb2a"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 287, "exit_code": 0, "real_time": 292, "test_case": "18", "output_md5": "ef1890585bae446a0668afed3012daa2"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 245, "exit_code": 0, "real_time": 255, "test_case": "19", "output_md5": "95cc848bdbf89f5187fbfa8aa2ba1a5e"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 236, "exit_code": 0, "real_time": 236, "test_case": "20", "output_md5": "7884a9652e94555c70f96b6be63be216"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 256, "exit_code": 0, "real_time": 257, "test_case": "21", "output_md5": "7aaba5f3511f56128e7130c2973e0503"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 244, "exit_code": 0, "real_time": 245, "test_case": "22", "output_md5": "74e1513cc2927e89575044e7d6dbc8e0"}]}	Python3	f	{"time_cost": 328, "memory_cost": 9121792}	2015312922	218.209.14.16
9c90dd68b92a890d4b934e63ecad527e	2	14	2021-01-04 12:05:50.642697+00	10	#include <bits/stdc++.h>\nusing namespace std;\nvector<int> arr;\nset<int> s;\n\nint main(){\n    ios::sync_with_stdio(false); cin.tie(NULL);\n    \n    int n, ans = 0; cin >> n;\n    for(int i = 0; i < n; i++){\n        int tmp; cin >> tmp;\n        arr.push_back(tmp);\n    }\n    for(int i = 0; i < n; i++){\n        if(s.find(arr[i]) != s.end()) continue;\n        int num = arr[0], cnt = 1;\n        for(int j = 1; j < n; j++){\n            if(arr[j] == arr[i]) continue;\n            if(arr[j] == num){\n                cnt++;\n            }else{\n                num = arr[j];\n                cnt = 1;\n            }\n            ans = max(ans, cnt);\n        }\n        s.insert(arr[i]);\n    }\n    cout << ans;\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3452928, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3575808, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3608576, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 3, "memory_cost": 3637248}	2020311119	218.238.218.240
71504d398ca95bf7ec747bf47bf0a753	2	15	2021-01-04 12:14:52.4311+00	10	#include <bits/stdc++.h>\nusing namespace std;\nvector<int> arr;\nint p[10003];\nint find(int a){\n    if(a == p[a]) return a;\n    return p[a] = find(p[a]);\n}\nvoid uf(int a, int b){\n    a = find(a); b = find(b);\n    if(a == b) return;\n    if(a > b) swap(a, b);\n    p[b] = a;\n    arr[a] += arr[b];\n}\nint main(){\n    ios::sync_with_stdio(false); cin.tie(NULL);\n    int n, m; cin >> n >> m;\n    for(int i = 0; i < n; i++) p[i] = i;\n    for(int i = 0; i < n; i++){\n        int tmp; cin >> tmp;\n        arr.push_back(tmp);\n    }\n    for(int i = 0; i < m; i++){\n        int a, b; cin >> a >> b;\n        uf(a, b);\n    }\n    for(int i = 0; i < n; i++)\n        if(arr[find(i)] < 0) cout << "IMPOSSIBLE";\n    cout << "POSSIBLE";\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3678208, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 11, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3653632, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "7", "output_md5": "95b68647b860eb7d5a161f8f71815411"}, {"error": 0, "memory": 3592192, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3682304, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 11, "memory_cost": 3702784}	2020311119	218.238.218.240
3079193c15d3240c9a052d0769287bf0	2	12	2021-01-04 12:16:22.46182+00	103	a=input("첫 번째 숫자를 입력하세요:")\nb=input("두 번째 숫자를 입력하세요:")\nc=input("세 번째 숫자를 입력하세요:")\nd=input("네 번째 숫자를 입력하세요:")\n\nif a>b:\n\tif b>c:\n\t\tif c>d:\n\t\t\tprint("downhill")\n\t\telse:\n\t\t\tprint("unkown")\n\t\t\t\n\telse:\n\t\tprint("unkown")\n\t\t\nif a<b:\n\tif b<c:\n\t\tif c<d:\n\t\t\tprint("uphill")\n\t\telse:\n\t\t\tprint("unkown")\n\t\t\t\n\telse:\n\t\tprint("unkown")\n\t\t\nif a==b:\n\tif b==c:\n\t\tif c==d:\n\t\t\tprint('Flat Land')\n\t\telse:\n\t\t\tprint("Unkown")\n\t\t\t\n\telse:\n\t\tprint("Unkown")	-1	{"err": null, "data": [{"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "5754916cf817dd085d341ad543b95dcd"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "37d79dde05b252fa2c5e814c08dd0d13"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "33baf89cf274de6b32ea0a23e4010010"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "088163273146d5c4489b7d475501001c"}, {"error": 0, "memory": 8929280, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "5", "output_md5": "088163273146d5c4489b7d475501001c"}]}	Python3	f	{"time_cost": 13, "memory_cost": 8986624}	2017314205	175.117.35.4
74dd2d8df67ed5cea2a8365dfc6ce517	2	12	2021-01-04 12:31:30.976534+00	107	a = int(input("첫번째 지점의 높이"))\nb = int(input("두번째 지점의 높이"))\nc = int(input("세번째 지점의 높이"))\nd = int(input("네번째 지점의 높이"))\n  \nif (a<b<c<d):\n print("Uphill")\nelif (a>b>c>d):\n print("Downhill")\nelse:\n print("Unknown")	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/26d2dbef6e584cb3855f8f878a889fbe/main.c:1:5: error: expected expression before 'int'\\n a = int(input(\\"첫번째 지점의 높이\\"))\\n     ^~~"}	2020311650	1.251.170.216
5d7ee03708187de203eab8703c88de0f	2	12	2021-01-04 12:33:45.638405+00	107	a = int(input("처음"))\n  b = int(input("둘"))\n  c = int(input("셋"))\n  d = int(input("넷"))\n  \nif (a<b<c<d):\n\tprint("Uphill")\nelif (a>b>c>d):\n\tprint("Downhill")\nelse:\n\tprint("Unknown")	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/177ade762f194c828f5fef34b80f9390/main.c:1:5: error: expected expression before 'int'\\n a = int(input(\\"처음\\"))\\n     ^~~"}	2020311650	1.251.170.216
b565f5855aa1caabf8ac5bfae64c9692	2	12	2021-01-04 12:41:41.660138+00	107	a = int(input("처음"))\nb = int(input("둘"))\nc = int(input("셋"))\nd = int(input("넷"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelif (a=b=c=d):\n  print("Flat Land")\nelse:\n  print("Unknown")	-2	{}	Python3	f	{"score": 0, "err_info": "File \\"/judger/run/4d26b38ba2d44a0698370c075a88633b/solution.py\\", line 10\\n    elif (a=b=c=d):\\n           ^\\nSyntaxError: invalid syntax"}	2020311650	1.251.170.216
23ccc5fa9b22f4ac36f3a8036fdb1558	2	14	2021-01-04 12:21:41.269192+00	88	people = int(input())\ncount = []\nfor i in range(people):\n    count.append(int(input()))\n\nres = 0\ntemp_list = []\nset_count = set(count)\nfor num in set_count:\n    sabon = count.copy()\n    for _ in range(count.count(num)):\n        sabon.remove(num)\n    for i in range(len(sabon)-1):\n        if sabon[i] == sabon[i+1]:\n            res += 1\n        elif sabon[i] != sabon[i+1] and len(sabon)-i <res:\n            temp_list.append(res+1)\n    res = 0\nprint(temp_list)	-1	{"err": null, "data": [{"error": 0, "memory": 8937472, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "e962e23c139e7252904b9221d9967442"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 333, "exit_code": 0, "real_time": 337, "test_case": "2", "output_md5": "d751713988987e9331980363e24189ce"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "d330f97b5d29dc00936fade1fda8739b"}, {"error": 0, "memory": 9064448, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "d751713988987e9331980363e24189ce"}, {"error": 0, "memory": 8900608, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "d751713988987e9331980363e24189ce"}, {"error": 0, "memory": 8982528, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 20, "test_case": "6", "output_md5": "ec858a3b5827dcc4d08c373a37285c13"}, {"error": 0, "memory": 8974336, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "68994b7ca1c92d1c4286807ca254feda"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "8", "output_md5": "6463ff75b72b8e9c4bea25f7f8544188"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 26, "test_case": "9", "output_md5": "d17075ff79b44df9bce1efb204aedcab"}, {"error": 0, "memory": 9068544, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 25, "test_case": "10", "output_md5": "f0923efd49f3f70c072b0a3817daea20"}, {"error": 0, "memory": 9084928, "output": null, "result": -1, "signal": 0, "cpu_time": 33, "exit_code": 0, "real_time": 38, "test_case": "11", "output_md5": "e6a3f02acf0fe8e00ef5ac5b865c8ea3"}, {"error": 0, "memory": 9105408, "output": null, "result": -1, "signal": 0, "cpu_time": 49, "exit_code": 0, "real_time": 54, "test_case": "12", "output_md5": "1388d9a4e2857589f6f32c8ab1d6d1b3"}, {"error": 0, "memory": 9150464, "output": null, "result": -1, "signal": 0, "cpu_time": 163, "exit_code": 0, "real_time": 168, "test_case": "13", "output_md5": "e962e23c139e7252904b9221d9967442"}, {"error": 0, "memory": 9068544, "output": null, "result": -1, "signal": 0, "cpu_time": 237, "exit_code": 0, "real_time": 237, "test_case": "14", "output_md5": "d751713988987e9331980363e24189ce"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "15", "output_md5": "d751713988987e9331980363e24189ce"}, {"error": 0, "memory": 9003008, "output": null, "result": -1, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 27, "test_case": "16", "output_md5": "7b253b0f41f04f24c136d03518f39294"}, {"error": 0, "memory": 9052160, "output": null, "result": -1, "signal": 0, "cpu_time": 47, "exit_code": 0, "real_time": 52, "test_case": "17", "output_md5": "d0ab406cc0355d1106421362dfebc0f8"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 21, "test_case": "18", "output_md5": "c2663a42e21e76fe57e08d384ce6f251"}, {"error": 0, "memory": 9281536, "output": null, "result": -1, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 30, "test_case": "19", "output_md5": "f7d1cfacdc6b235ea6ec4485e69a3d94"}, {"error": 0, "memory": 9273344, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 30, "test_case": "20", "output_md5": "f8c7b3a188015d8c2c641deb0290153b"}, {"error": 0, "memory": 9166848, "output": null, "result": -1, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 43, "test_case": "21", "output_md5": "f88b525765e89c5f8214a21147f658df"}, {"error": 0, "memory": 9244672, "output": null, "result": -1, "signal": 0, "cpu_time": 28, "exit_code": 0, "real_time": 38, "test_case": "22", "output_md5": "24125923f891fedc6e80b3d204daa08a"}]}	Python3	f	{"time_cost": 333, "memory_cost": 9281536}	2015312922	218.209.14.16
b78600093e1b0cafde111ee9fed814e4	2	14	2021-01-04 12:22:30.296087+00	88	people = int(input())\ncount = []\nfor i in range(people):\n    count.append(int(input()))\n\nres = 0\ntemp_list = []\nset_count = set(count)\nfor num in set_count:\n    sabon = count.copy()\n    for _ in range(count.count(num)):\n        sabon.remove(num)\n    for i in range(len(sabon)-1):\n        if sabon[i] == sabon[i+1]:\n            res += 1\n        elif sabon[i] != sabon[i+1] and len(sabon)-i <res:\n            temp_list.append(res+1)\n    res = 0\nprint(max(temp_list))	4	{"err": null, "data": [{"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9023488, "output": null, "result": 4, "signal": 0, "cpu_time": 333, "exit_code": 1, "real_time": 337, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 9027584, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 19, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8982528, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 16, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "6", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 12, "test_case": "7", "output_md5": "1ff1de774005f8da13f42943881c655f"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 24, "test_case": "8", "output_md5": "63dc7ed1010d3c3b8269faf0ba7491d4"}, {"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 26, "test_case": "9", "output_md5": "812b4ba287f5ee0bc9d43bbf5bbe87fb"}, {"error": 0, "memory": 9052160, "output": null, "result": -1, "signal": 0, "cpu_time": 28, "exit_code": 0, "real_time": 32, "test_case": "10", "output_md5": "072b030ba126b2f4b2374f342be9ed44"}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 27, "exit_code": 0, "real_time": 40, "test_case": "11", "output_md5": "98f13708210194c475687be6106a3b84"}, {"error": 0, "memory": 9089024, "output": null, "result": -1, "signal": 0, "cpu_time": 47, "exit_code": 0, "real_time": 55, "test_case": "12", "output_md5": "45c48cce2e2d7fbdea1afc51c7c6ad26"}, {"error": 0, "memory": 9084928, "output": null, "result": -1, "signal": 0, "cpu_time": 174, "exit_code": 0, "real_time": 175, "test_case": "13", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9023488, "output": null, "result": 4, "signal": 0, "cpu_time": 230, "exit_code": 1, "real_time": 234, "test_case": "14", "output_md5": null}, {"error": 0, "memory": 8974336, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 20, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 8990720, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 24, "test_case": "16", "output_md5": "6c524f9d5d7027454a783c841250ba71"}, {"error": 0, "memory": 9146368, "output": null, "result": -1, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 51, "test_case": "17", "output_md5": "c20ad4d76fe97759aa27a0c99bff6710"}, {"error": 0, "memory": 9084928, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 23, "test_case": "18", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 9105408, "output": null, "result": -1, "signal": 0, "cpu_time": 33, "exit_code": 0, "real_time": 34, "test_case": "19", "output_md5": "e2230b853516e7b05d79744fbd4c9c13"}, {"error": 0, "memory": 9138176, "output": null, "result": -1, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 30, "test_case": "20", "output_md5": "2d6cc4b2d139a53512fb8cbb3086ae2e"}, {"error": 0, "memory": 9125888, "output": null, "result": -1, "signal": 0, "cpu_time": 28, "exit_code": 0, "real_time": 33, "test_case": "21", "output_md5": "a516a87cfcaef229b342c437fe2b95f7"}, {"error": 0, "memory": 9203712, "output": null, "result": -1, "signal": 0, "cpu_time": 31, "exit_code": 0, "real_time": 36, "test_case": "22", "output_md5": "63538fe6ef330c13a05a3ed7e599d5f7"}]}	Python3	f	{"time_cost": 333, "memory_cost": 9203712}	2015312922	218.209.14.16
fea2d14cd98e5a5c353e9ead822f2a9e	2	12	2021-01-04 12:28:40.316752+00	109	n1 = int(input())\nn2 = int(input())\nn3 = int(input())\nn4 = int(input())\n\nif n1<n2 and n2<n3 and n3<n4:\n\tprint("Uphill")\nelif n1>n2 and n2>n3 and n3>n4:\n\tprint("Downhill")\nelif n1==n2 and n2==n3 and n3==n4:\n\tprint("Flat Land")\nelse:\n\tprint("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9113600, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9113600}	2015313348	61.253.60.219
301d577e407f3da2e23cdc17e03db111	2	14	2021-01-04 12:32:15.358004+00	88	people = int(input())\ncount = []\nfor i in range(people):\n    count.append(int(input()))\n\nres = 0\ntemp_list = []\nset_count = set(count)\nfor num in set_count:\n    sabon = count.copy()\n    for _ in range(count.count(num)):\n        sabon.remove(num)\n    for i in range(len(sabon)-1):\n        if sabon[i] == sabon[i+1]:\n            res += 1\n        elif sabon[i] != sabon[i+1] and len(sabon)-i <res:\n            temp_list.append(res+1)\n    res = 0\nprint(max(temp_list))	4	{"err": null, "data": [{"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9048064, "output": null, "result": 4, "signal": 0, "cpu_time": 345, "exit_code": 1, "real_time": 346, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9101312, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 8986624, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 16, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8957952, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 19, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "7", "output_md5": "1ff1de774005f8da13f42943881c655f"}, {"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "8", "output_md5": "63dc7ed1010d3c3b8269faf0ba7491d4"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "9", "output_md5": "812b4ba287f5ee0bc9d43bbf5bbe87fb"}, {"error": 0, "memory": 8970240, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 24, "test_case": "10", "output_md5": "072b030ba126b2f4b2374f342be9ed44"}, {"error": 0, "memory": 9142272, "output": null, "result": -1, "signal": 0, "cpu_time": 30, "exit_code": 0, "real_time": 35, "test_case": "11", "output_md5": "98f13708210194c475687be6106a3b84"}, {"error": 0, "memory": 9056256, "output": null, "result": -1, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 54, "test_case": "12", "output_md5": "45c48cce2e2d7fbdea1afc51c7c6ad26"}, {"error": 0, "memory": 9052160, "output": null, "result": -1, "signal": 0, "cpu_time": 165, "exit_code": 0, "real_time": 166, "test_case": "13", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9154560, "output": null, "result": 4, "signal": 0, "cpu_time": 214, "exit_code": 1, "real_time": 226, "test_case": "14", "output_md5": null}, {"error": 0, "memory": 9011200, "output": null, "result": 4, "signal": 0, "cpu_time": 24, "exit_code": 1, "real_time": 25, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 9117696, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 23, "test_case": "16", "output_md5": "6c524f9d5d7027454a783c841250ba71"}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 49, "exit_code": 0, "real_time": 54, "test_case": "17", "output_md5": "c20ad4d76fe97759aa27a0c99bff6710"}, {"error": 0, "memory": 9043968, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "18", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 9097216, "output": null, "result": -1, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 31, "test_case": "19", "output_md5": "e2230b853516e7b05d79744fbd4c9c13"}, {"error": 0, "memory": 9117696, "output": null, "result": -1, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 33, "test_case": "20", "output_md5": "2d6cc4b2d139a53512fb8cbb3086ae2e"}, {"error": 0, "memory": 9158656, "output": null, "result": -1, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 37, "test_case": "21", "output_md5": "a516a87cfcaef229b342c437fe2b95f7"}, {"error": 0, "memory": 9121792, "output": null, "result": -1, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 34, "test_case": "22", "output_md5": "63538fe6ef330c13a05a3ed7e599d5f7"}]}	Python3	f	{"time_cost": 345, "memory_cost": 9158656}	2015312922	218.209.14.16
e7623e227c3199ee6290ebd42e10f9cc	2	12	2021-01-04 12:36:14.849339+00	39	def hill(List):\n    current=List[0]\n    Flat=[List[0]]\n    Up=[List[0]]\n    Down=[List[0]]\n    for i in range(1,len(List)):\n        if current==List[i]:\n            Flat.append(List[i])\n        elif current<List[i]:\n            Up.append(List[i])\n        else:\n            Down.append(List[i])\n        current=List[i]\n    if len(Flat)==4:\n        print('Flat land')\n    elif len(Up)==4:\n        print('Uphill')\n    elif len(Down)==4:\n        print('Downhill')\n    else:\n        print('Unknown')\n            \nimport sys\n\n\nList=[]\nfor j in range(4):\n    num = sys.stdin.readline(1)\n    \n    List.append(num)\nhill(List)	-1	{"err": null, "data": [{"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8871936, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8777728, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8896512, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 11, "memory_cost": 8957952}	2019312342	124.56.82.117
7f544b1e66719453c7dfacdd6e48e64f	2	13	2021-01-05 00:38:05.307468+00	122	def f(a):\n    for i in input():\n        if i not in a:\n            print('NO')\n            return\n    print('YES')\n    return\nf(['H', 'I', 'N', 'O', 'S', 'X', 'Z'])	0	{"err": null, "data": [{"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8908800, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8765440, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8859648, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9039872}	2020313266	124.53.59.135
2c6dddee6034f7e4b17c8d06284778d7	2	13	2021-01-04 13:39:47.81152+00	31	#include "stdio.h"\n#include "string.h"\n\nint isPossible(char c) {\n    char alps[7] = {'H','I','N','O','S','X','Z'};\n    \n    for(int i = 0; i < 7; i++) {\n        if(c == alps[i]) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nint main() {\n    char str[30] = "";\n    \n    scanf("%s", str);\n    \n    for(int i = 0; i < strlen(str); i++) {\n        if(isPossible(str[i]) == 0) {\n            printf("NO");\n            return 0;\n        }\n    }\n    printf("YES");\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1740800, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1581056, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1589248, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1740800}	2014311827	210.113.4.2
d5c89f2e028a1dffba328fd37b589074	2	12	2021-01-04 14:43:31.966945+00	115	num_list = []\nfor i in range(4):\n    angle = int(input())\n    num_list.append(angle)\ncount = 0\nsame = 0\n\nfor i in range(len(num_list)-1) :\n    if num_list[i] < num_list[i+1] :\n        count += 1\n    elif num_list[i] > num_list[i+1] :\n        count -= 1\n    else :\n        same += 1\n\nif same == 3:\n    print("Flat Land")\nelse :\n    if count == 3:\n        print("Uphill")\n    elif count == -3:\n        print("Downhill")\n    else :\n        print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8912896, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 12, "memory_cost": 9003008}	2020311689	116.120.200.125
1ab0a9fad996733bdad6c4d37668c804	2	12	2021-01-04 15:27:08.002217+00	117	h_ih = []\n\nfor i in range(0, 4):\n    h_ih.append(input())\n\n\ncurrent_hill = "Nothing"\n\n\nfor i in range(1,4):\n    if(current_hill == "Nothing"):\n        \n        if(h_ih[i] > h_ih[i-1]):\n            current_hill = "Uphill"\n\n        elif(h_ih[i] < h_ih[i-1]):\n            current_hill = "Downhill"\n\n        elif(h_ih[i] == h_ih[i-1]):\n            current_hill = "Flat Land"\n\n    else:\n        if(current_hill == "Uphill"):\n            if(h_ih[i] <= h_ih[i-1]):\n                current_hill ="Unknown"	-1	{"err": null, "data": [{"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8884224, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8904704, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9035776}	2019311602	121.189.141.120
acc8ac80cf8292480686adf367d1f224	2	13	2021-01-04 15:49:33.60768+00	118	import sys\n\nA = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nS = input("문자열 입력: ")\n\nfor i in range(len(S)):\n  result = S[i] in A\n  if result == 'False':\n    print("NO")\n    sys.exit()\nprint("Yes")	-1	{"err": null, "data": [{"error": 0, "memory": 8863744, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "9d004e178102087404260244ee34e68b"}, {"error": 0, "memory": 8855552, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "2", "output_md5": "9d004e178102087404260244ee34e68b"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "9d004e178102087404260244ee34e68b"}, {"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "9d004e178102087404260244ee34e68b"}, {"error": 0, "memory": 8908800, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "9d004e178102087404260244ee34e68b"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "6", "output_md5": "9d004e178102087404260244ee34e68b"}, {"error": 0, "memory": 8904704, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "7", "output_md5": "9d004e178102087404260244ee34e68b"}, {"error": 0, "memory": 8876032, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "9d004e178102087404260244ee34e68b"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "9d004e178102087404260244ee34e68b"}, {"error": 0, "memory": 8904704, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "10", "output_md5": "9d004e178102087404260244ee34e68b"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8962048}	2019310444	118.218.64.78
f87206e95e21ad4cca10dcdfc320038b	2	12	2021-01-04 12:37:01.552966+00	107	a = int(input("처음"))\nb = int(input("둘"))\nc = int(input("셋"))\nd = int(input("넷"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelse:\n  print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 7266304, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 9, "test_case": "1", "output_md5": "bc451bbfb0d94468b6c977027c7b6bfb"}, {"error": 0, "memory": 7278592, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "42e3651c47b3b3975ac76eb61d4d45de"}, {"error": 0, "memory": 7376896, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 9, "test_case": "3", "output_md5": "bc451bbfb0d94468b6c977027c7b6bfb"}, {"error": 0, "memory": 7446528, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "58a9fc9cd68c6eeb3701aecc84750c0f"}, {"error": 0, "memory": 7442432, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 10, "test_case": "5", "output_md5": "bc451bbfb0d94468b6c977027c7b6bfb"}]}	Python2	f	{"time_cost": 9, "memory_cost": 7446528}	2020311650	1.251.170.216
fd8a7d1dadf39711bf0415a808ba6e35	2	12	2021-01-04 13:41:30.852226+00	112	include <stdio.h>\ninclude <stdlib.h>\n\nint main()\n{\n\tint number[4];\n    for(i = 0; i < 4; i++){\n    \tscanf("%d", number[i]);\n    }\n  for(i = 0; i < 3; i++){\n    \tif(number[i]< number[i + 1])\n    }	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/c12cea95373d4e91b29a7f498a714a1c/main.c:1:9: error: expected '=', ',', ';', 'asm' or '__attribute__' before '<' token\\n include <stdio.h>\\n         ^"}	2020313744	58.238.95.44
d38f8b5faea61861da4bfd4ae822dda9	2	12	2021-01-05 01:58:37.322006+00	25	List = []\nfor i in range(4):\n   k = int(input())\n    print()\n    List.append(k)\n    \na = List[0]\nb = List[1]\nc = List[2]\nd = List[3]\n\nif a<b<c<d:\n  print('Uphill')\nelif a>b>c>d:\n  print('Downhill')\nelif a==b==c==d:\n  print('Flat Land')\nelse:\n  print('Unknown')	-2	{}	Python3	f	{"score": 0, "err_info": "Sorry: IndentationError: unexpected indent (solution.py, line 4)"}	2020313223	221.143.30.115
3b5bb0a3bf058fc6d2c78bd87e06aa67	2	15	2021-01-04 14:52:52.531766+00	111	N, M = list(map(int,input().split(' ')))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    else: \n        p = find(parent[x])\n        parent[x] = p\n        return p\n\ndef union(x,y):\n    xx = find(x)\n    yy = find(y)\n    if xx != yy:\n        parent[y] = xx\n        number[xx] += number[y]\n        number[y] = 0\n\nparent = dict()\nnumber = dict()\nfor i in range(N):\n    p = i\n    parent[p] = p\n    n = int(input())\n    number[p] = n\nfor i in range(M):\n    x, y = list(map(int,input().split(' ')))\n    union(x,y)\nck = True\nfor i in number.values():\n    if i != 0:\n        ck = False\nif ck:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')	-1	{"err": null, "data": [{"error": 0, "memory": 9990144, "output": null, "result": -1, "signal": 0, "cpu_time": 63, "exit_code": 0, "real_time": 72, "test_case": "1", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9457664, "output": null, "result": -1, "signal": 0, "cpu_time": 90, "exit_code": 0, "real_time": 98, "test_case": "2", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9347072, "output": null, "result": -1, "signal": 0, "cpu_time": 47, "exit_code": 0, "real_time": 55, "test_case": "3", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9461760, "output": null, "result": -1, "signal": 0, "cpu_time": 102, "exit_code": 0, "real_time": 126, "test_case": "4", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9588736, "output": null, "result": -1, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 62, "test_case": "5", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9486336, "output": null, "result": -1, "signal": 0, "cpu_time": 42, "exit_code": 0, "real_time": 55, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9486336, "output": null, "result": 0, "signal": 0, "cpu_time": 55, "exit_code": 0, "real_time": 64, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9449472, "output": null, "result": -1, "signal": 0, "cpu_time": 36, "exit_code": 0, "real_time": 36, "test_case": "8", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 10096640, "output": null, "result": -1, "signal": 0, "cpu_time": 67, "exit_code": 0, "real_time": 75, "test_case": "9", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}]}	Python3	f	{"time_cost": 102, "memory_cost": 10096640}	2015313992	175.192.247.176
f6d6a745ccebcf5490f8ff2c893c02dc	2	12	2021-01-04 15:32:45.967897+00	117	#include <stdio.h>\n\n#define UPHILL 0\n#define DOWNHILL 1\n#define FLAT_LAND 2\n#define UNKNOWN 3\n#define NOT_SEL -1\n\nint main()\n{\n   int height[4];\n   char Hills[4][10] = {"Uphill", "Downhill", "Flat Land", "Unknown"};\n   int current_Hill = NOT_SEL;\n   \n   for(int i = 0; i < 4; i ++)\n   {\n      scanf("%d", &height[i]);\n      getchar();\n   }\n      \n   for(int i = 1; i < 4; i++)\n   {\n      if(current_Hill == -1)\n      {\n         if(height[i] > height[i-1])\n         {\n            current_Hill = UPHILL;\n         }\n         else if(height[i] < height[i-1])\n         {\n            current_Hill = DOWNHILL;\n         }\n         else if(height[i] == height[i-1])\n         {\n            current_Hill = FLAT_LAND;\n         }\n      }\n      else\n      {\n         if(current_Hill == UPHILL)\n         {\n            if(height[i] <= height[i-1])\n            {\n               current_Hill = UNKNOWN;\n            }\n         }\n         else if(current_Hill == DOWNHILL)\n         {\n            if(height[i] >= height[i-1])\n            {\n               current_Hill = UNKNOWN;\n            }\n         }\n         else if(current_Hill == FLAT_LAND)\n         {\n            if(height[i] != height[i-1])\n            {\n               current_Hill = UNKNOWN;\n            }\n         }\n      }\n   }\n   printf("%s", Hills[current_Hill]);\n   \n   return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1695744, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1695744}	2019311602	121.189.141.120
53e255d3020a09243213226cec8b9254	2	14	2021-01-04 15:59:18.89168+00	115	N = int(input())\npeople = []\nfor i in range(N) :\n    num = int(input())\n    people.append(num)\ns1 = set(people)\nleng_list = []\nfor i in s1 :\n    check_list = []\n    cnt_list = []\n    cnt = 1\n    for j in people :\n        if j != i :\n            check_list.append(j)\n    for k in range(len(check_list)-1) :\n        if check_list[k] == check_list[k+1] :\n            cnt += 1\n            cnt_list.append(cnt)\n        else:\n            cnt = 1\n            cnt_list.append(cnt)\n    cnt_list.sort(reverse = True)\n    final = cnt_list[0]\n    leng_list.append(final)\nleng_list.sort(reverse = True)\nprint(leng_list[0])	0	{"err": null, "data": [{"error": 0, "memory": 7344128, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7647232, "output": null, "result": 0, "signal": 0, "cpu_time": 278, "exit_code": 0, "real_time": 294, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 7507968, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 11, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7487488, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7499776, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7495680, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 12, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7413760, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7475200, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 7483392, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7446528, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 22, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7409664, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 31, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7446528, "output": null, "result": 0, "signal": 0, "cpu_time": 44, "exit_code": 0, "real_time": 45, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7585792, "output": null, "result": 0, "signal": 0, "cpu_time": 135, "exit_code": 0, "real_time": 144, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7606272, "output": null, "result": 0, "signal": 0, "cpu_time": 186, "exit_code": 0, "real_time": 191, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7536640, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 17, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 7553024, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 7503872, "output": null, "result": 0, "signal": 0, "cpu_time": 34, "exit_code": 0, "real_time": 43, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7430144, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 7548928, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 25, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 7634944, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 30, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 7442432, "output": null, "result": 0, "signal": 0, "cpu_time": 29, "exit_code": 0, "real_time": 30, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 7528448, "output": null, "result": 0, "signal": 0, "cpu_time": 29, "exit_code": 0, "real_time": 30, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python2	f	{"time_cost": 278, "memory_cost": 7647232}	2020311689	116.120.200.125
c76b93e57d452c16453a96427ee8243d	2	12	2021-01-04 12:37:07.510882+00	107	a = int(input("처음"))\nb = int(input("둘"))\nc = int(input("셋"))\nd = int(input("넷"))\n  \nif (a<b<c<d):\n  print("Uphill")\nelif (a>b>c>d):\n  print("Downhill")\nelse:\n  print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "bc451bbfb0d94468b6c977027c7b6bfb"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "42e3651c47b3b3975ac76eb61d4d45de"}, {"error": 0, "memory": 9084928, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "bc451bbfb0d94468b6c977027c7b6bfb"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "4", "output_md5": "58a9fc9cd68c6eeb3701aecc84750c0f"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 19, "test_case": "5", "output_md5": "bc451bbfb0d94468b6c977027c7b6bfb"}]}	Python3	f	{"time_cost": 19, "memory_cost": 9084928}	2020311650	1.251.170.216
976b658a7af643066533e5114da03641	2	12	2021-01-04 13:44:22.731907+00	113	#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n\tint tmp, bf, cnt = 0, same=0;\n\tfor (int i = 0; i < 4; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tcin >> bf;\n\t\t\tcontinue;\n\t\t}\n\t\tcin >> tmp;\n\t\tif (bf < tmp) cnt++;\n\t\telse if (bf == tmp) same++;\n\t\tbf = tmp;\n\t\t\n\t}\n\n\tif (cnt == 3) cout << "Uphill";\n\telse if (cnt == 0 && same != 3) cout << "Downhill";\n\telse if (same == 3) cout << "Flat Land";\n\telse cout << "Unknown";\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3489792, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3514368}	2016312810	218.209.217.214
201abf1bdcb4a976b0e6184538bda421	2	15	2021-01-04 14:57:42.342426+00	111	N, M = list(map(int,input().split(' ')))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    else: \n        p = find(parent[x])\n        parent[x] = p\n        return p\n\ndef union(x,y):\n    xx = find(x)\n    yy = find(y)\n    if xx != yy:\n        parent[y] = xx\n        number[xx] += number[y]\n        number[y] = 0\n\nparent = dict()\nnumber = dict()\nfor i in range(N):\n    p = i\n    parent[p] = p\n    n = int(input())\n    number[p] = n\nfor i in range(M):\n    x, y = list(map(int,input().split(' ')))\n    union(x,y)\nck = True\nfor i in number.values():\n    if i != 0:\n        ck = False\nif ck:\n    print('POSSIBLE')\nelse:\n    print('IMPOSSIBLE')	-1	{"err": null, "data": [{"error": 0, "memory": 10006528, "output": null, "result": -1, "signal": 0, "cpu_time": 65, "exit_code": 0, "real_time": 78, "test_case": "1", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9342976, "output": null, "result": -1, "signal": 0, "cpu_time": 99, "exit_code": 0, "real_time": 100, "test_case": "2", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9428992, "output": null, "result": -1, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 43, "test_case": "3", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9478144, "output": null, "result": -1, "signal": 0, "cpu_time": 111, "exit_code": 0, "real_time": 119, "test_case": "4", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9666560, "output": null, "result": -1, "signal": 0, "cpu_time": 53, "exit_code": 0, "real_time": 69, "test_case": "5", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9474048, "output": null, "result": -1, "signal": 0, "cpu_time": 27, "exit_code": 0, "real_time": 35, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9506816, "output": null, "result": 0, "signal": 0, "cpu_time": 58, "exit_code": 0, "real_time": 71, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9433088, "output": null, "result": -1, "signal": 0, "cpu_time": 52, "exit_code": 0, "real_time": 53, "test_case": "8", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 10289152, "output": null, "result": -1, "signal": 0, "cpu_time": 63, "exit_code": 0, "real_time": 67, "test_case": "9", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}]}	Python3	f	{"time_cost": 111, "memory_cost": 10289152}	2015313992	175.192.247.176
d5c045e4c9e478e3cb370a0f7e81b2ab	2	14	2021-01-04 15:27:58.610452+00	88	people = int(input())\ncount = []\nfor i in range(people):\n    count.append(str(input()))\n\nstr_num = ''.join(count)\nset_count = list(set(count))\n\nres = 0\nresult = []\nfor char in set_count:\n    temp_list = []\n    leng = str_num.replace(char,"")\n    for string in set_count:\n        subst = list(leng).count(string)\n        for i in range(leng.find(string),len(leng)):\n            if leng[i]==string:\n                res += 1\n                temp_list.append(res)\n            elif leng[i] != string:\n                res = 0\n    result.append(max(temp_list))\nprint(max(result))	1	{"err": null, "data": [{"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9089024, "output": null, "result": 1, "signal": 9, "cpu_time": 1994, "exit_code": 0, "real_time": 2000, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8941568, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 17, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9015296, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 14, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 9039872, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 15, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 9043968, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 19, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 9031680, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 18, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9052160, "output": null, "result": 4, "signal": 0, "cpu_time": 19, "exit_code": 1, "real_time": 23, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 9060352, "output": null, "result": 4, "signal": 0, "cpu_time": 26, "exit_code": 1, "real_time": 27, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 9216000, "output": null, "result": 4, "signal": 0, "cpu_time": 40, "exit_code": 1, "real_time": 45, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 9039872, "output": null, "result": 4, "signal": 0, "cpu_time": 56, "exit_code": 1, "real_time": 60, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 9117696, "output": null, "result": 4, "signal": 0, "cpu_time": 99, "exit_code": 1, "real_time": 104, "test_case": "12", "output_md5": null}, {"error": 0, "memory": 9150464, "output": null, "result": 4, "signal": 0, "cpu_time": 331, "exit_code": 1, "real_time": 335, "test_case": "13", "output_md5": null}, {"error": 0, "memory": 9179136, "output": null, "result": 4, "signal": 0, "cpu_time": 395, "exit_code": 1, "real_time": 400, "test_case": "14", "output_md5": null}, {"error": 0, "memory": 8974336, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 19, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 9142272, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 18, "test_case": "16", "output_md5": null}, {"error": 0, "memory": 8916992, "output": null, "result": 1, "signal": 9, "cpu_time": 1995, "exit_code": 0, "real_time": 2002, "test_case": "17", "output_md5": null}, {"error": 0, "memory": 9072640, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 22, "test_case": "18", "output_md5": null}, {"error": 0, "memory": 9203712, "output": null, "result": 4, "signal": 0, "cpu_time": 26, "exit_code": 1, "real_time": 36, "test_case": "19", "output_md5": null}, {"error": 0, "memory": 9121792, "output": null, "result": 4, "signal": 0, "cpu_time": 31, "exit_code": 1, "real_time": 36, "test_case": "20", "output_md5": null}, {"error": 0, "memory": 9089024, "output": null, "result": 4, "signal": 0, "cpu_time": 33, "exit_code": 1, "real_time": 37, "test_case": "21", "output_md5": null}, {"error": 0, "memory": 9039872, "output": null, "result": 4, "signal": 0, "cpu_time": 37, "exit_code": 1, "real_time": 42, "test_case": "22", "output_md5": null}]}	Python3	f	{"time_cost": 1995, "memory_cost": 9216000}	2015312922	218.209.14.16
ebb41ea58140e9dab8a92cf392dab335	2	13	2021-01-04 15:50:55.87587+00	118	import sys\n\nA = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nS = input("문자열 입력: ")\n\nfor i in range(len(S)):\n  result = S[i] in A\n  if result == 'False':\n    print("NO")\n    sys.exit()\nprint("YES")	-1	{"err": null, "data": [{"error": 0, "memory": 8900608, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8843264, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8757248, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8761344, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8871936, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8843264, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8835072, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "10", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9035776}	2019310444	118.218.64.78
e0d0ac6b4501b59ae5a7c06aa371382d	2	13	2021-01-04 15:55:55.275985+00	118	import sys\n\nA = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nS = input()\n\nfor i in range(len(S)):\n  result = S[i] in A\n  if result == False:\n    print("NO")\n    sys.exit()\nprint("YES")	0	{"err": null, "data": [{"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8908800, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8851456, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 11, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9035776}	2019310444	118.218.64.78
bd09605e440b255cd37c673b40b85db6	2	12	2021-01-04 12:43:15.050554+00	11	#include <stio.h>\nint a, b, c, d;\nint main(void)\n{\n\tscanf("%d %d %d %d",&a,&b,&c,&d);\n  \tif(a==b&&b==c&&c==d)\n      printf("Flat land");\n  \telse if(a<b&&b<c&&c<d)\n      printf("Uphill");\n  \telse if(a>b&&b>c&&c>d)\n      printf("Uphill");\n  \telse\n      printf("Unknown");\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/7bf581d3aac14bf28ebbec51bde5d4c3/main.c:1:10: fatal error: stio.h: No such file or directory\\n #include <stio.h>\\n          ^~~~~~~~\\ncompilation terminated."}	2017311005	211.36.140.36
a5be900e34f88b73d634ac6000622107	2	12	2021-01-04 13:44:41.809831+00	113	#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n\tint tmp, bf, cnt = 0, same=0;\n\tfor (int i = 0; i < 4; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tcin >> bf;\n\t\t\tcontinue;\n\t\t}\n\t\tcin >> tmp;\n\t\tif (bf < tmp) cnt++;\n\t\telse if (bf == tmp) same++;\n\t\tbf = tmp;\n\t\t\n\t}\n\n\tif (cnt == 3) cout << "Uphill";\n\telse if (cnt == 0 && same != 3) cout << "Downhill";\n\telse if (same == 3) cout << "Flat Land";\n\telse cout << "Unknown";\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3510272, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3538944}	2016312810	218.209.217.214
8a78a14b0458381510ec6211f94df4ce	2	13	2021-01-04 14:57:45.265614+00	115	import sys\n\nletter_list = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nS = str(input())\nfor i in range(len(S)) :\n    if S[i] not in letter_list :\n        print('No')\n        sys.exit()\nprint('Yes')	4	{"err": null, "data": [{"error": 0, "memory": 7372800, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7438336, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 12, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7401472, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 13, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7532544, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 12, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7258112, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 9, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7434240, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 13, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7557120, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7454720, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 11, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7462912, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 1, "real_time": 13, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7340032, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 12, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 12, "memory_cost": 7557120}	2020311689	116.120.200.125
a4522bf793df898abe1220db5f90b07b	2	14	2021-01-04 15:28:35.660448+00	88	people = int(input())\ncount = []\nfor i in range(people):\n    count.append(str(input()))\n\nstr_num = ''.join(count)\nset_count = list(set(count))\n\nres = 0\nresult = []\nfor char in set_count:\n    temp_list = []\n    leng = str_num.replace(char,"")\n    for string in set_count:\n        for i in range(leng.find(string),len(leng)):\n            if leng[i]==string:\n                res += 1\n                temp_list.append(res)\n            elif leng[i] != string:\n                res = 0\n    result.append(max(temp_list))\nprint(max(result))	1	{"err": null, "data": [{"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8957952, "output": null, "result": 1, "signal": 9, "cpu_time": 1993, "exit_code": 0, "real_time": 1999, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8990720, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 1, "real_time": 13, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9101312, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 16, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 9113600, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 15, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 9117696, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 16, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 8998912, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 22, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9023488, "output": null, "result": 4, "signal": 0, "cpu_time": 18, "exit_code": 1, "real_time": 23, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 9035776, "output": null, "result": 4, "signal": 0, "cpu_time": 19, "exit_code": 1, "real_time": 24, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 9019392, "output": null, "result": 4, "signal": 0, "cpu_time": 25, "exit_code": 1, "real_time": 30, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 8998912, "output": null, "result": 4, "signal": 0, "cpu_time": 55, "exit_code": 1, "real_time": 59, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 9003008, "output": null, "result": 4, "signal": 0, "cpu_time": 95, "exit_code": 1, "real_time": 103, "test_case": "12", "output_md5": null}, {"error": 0, "memory": 9027584, "output": null, "result": 4, "signal": 0, "cpu_time": 310, "exit_code": 1, "real_time": 311, "test_case": "13", "output_md5": null}, {"error": 0, "memory": 9150464, "output": null, "result": 4, "signal": 0, "cpu_time": 349, "exit_code": 1, "real_time": 349, "test_case": "14", "output_md5": null}, {"error": 0, "memory": 9035776, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 15, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 8949760, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 19, "test_case": "16", "output_md5": null}, {"error": 0, "memory": 8921088, "output": null, "result": 1, "signal": 9, "cpu_time": 1994, "exit_code": 0, "real_time": 1999, "test_case": "17", "output_md5": null}, {"error": 0, "memory": 9076736, "output": null, "result": 4, "signal": 0, "cpu_time": 21, "exit_code": 1, "real_time": 22, "test_case": "18", "output_md5": null}, {"error": 0, "memory": 9048064, "output": null, "result": 4, "signal": 0, "cpu_time": 33, "exit_code": 1, "real_time": 34, "test_case": "19", "output_md5": null}, {"error": 0, "memory": 9039872, "output": null, "result": 4, "signal": 0, "cpu_time": 42, "exit_code": 1, "real_time": 43, "test_case": "20", "output_md5": null}, {"error": 0, "memory": 9031680, "output": null, "result": 4, "signal": 0, "cpu_time": 36, "exit_code": 1, "real_time": 37, "test_case": "21", "output_md5": null}, {"error": 0, "memory": 9031680, "output": null, "result": 4, "signal": 0, "cpu_time": 30, "exit_code": 1, "real_time": 35, "test_case": "22", "output_md5": null}]}	Python3	f	{"time_cost": 1994, "memory_cost": 9150464}	2015312922	218.209.14.16
b030a1b29c9538d5ce8ee06a5f902058	2	14	2021-01-04 15:34:57.036251+00	115	N = int(input())\npeople = []\nfor i in range(N) :\n    num = int(input())\n    people.append(num)\ns1 = set(people)\nleng_list = []\nfor i in s1 :\n    check_list = []\n    mid_list = []\n    cnt = 0\n    for j in people :\n        if j != i :\n            check_list.append(j)\n    for i in range(len(check_list)-1) :\n        if check_list[i] == check_list[i+1] :\n            cnt += 1\n        else:\n            mid = cnt + 1\n            mid_list.append(mid)\n            cnt = 0\n    mid_list.sort(reverse = True)\n    leng_list.append(mid_list[0])\nleng_list.sort()\nprint(leng_list[-1])	-1	{"err": null, "data": [{"error": 0, "memory": 7397376, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7430144, "output": null, "result": 0, "signal": 0, "cpu_time": 312, "exit_code": 0, "real_time": 317, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 7507968, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7385088, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 10, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7286784, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7360512, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7409664, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7495680, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 17, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 7438336, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7421952, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7430144, "output": null, "result": 0, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 30, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7610368, "output": null, "result": 0, "signal": 0, "cpu_time": 39, "exit_code": 0, "real_time": 44, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7548928, "output": null, "result": 0, "signal": 0, "cpu_time": 141, "exit_code": 0, "real_time": 150, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7618560, "output": null, "result": 0, "signal": 0, "cpu_time": 205, "exit_code": 0, "real_time": 209, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7581696, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 17, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 7544832, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 18, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 7585792, "output": null, "result": 0, "signal": 0, "cpu_time": 37, "exit_code": 0, "real_time": 47, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7593984, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 25, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 7516160, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 25, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 7520256, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 26, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 7438336, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 31, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 7393280, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 30, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python2	f	{"time_cost": 312, "memory_cost": 7618560}	2020311689	116.120.200.125
aa9b468d5e0e2af2b9bad3bd1e307ac2	2	13	2021-01-04 15:53:39.931352+00	118	import sys\n\nA = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nS = input("문자열 입력: ")\n\nfor i in range(len(S)):\n  result = S[i] in A\n  if result == False:\n    print("NO")\n    sys.exit()\nprint("YES")	-1	{"err": null, "data": [{"error": 0, "memory": 8978432, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "76619f076a85f2ed3b6936b45e8d0fb2"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8773632, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "76619f076a85f2ed3b6936b45e8d0fb2"}, {"error": 0, "memory": 8884224, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "76619f076a85f2ed3b6936b45e8d0fb2"}, {"error": 0, "memory": 8867840, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 14, "test_case": "6", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8908800, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "7", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8925184, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "8", "output_md5": "76619f076a85f2ed3b6936b45e8d0fb2"}, {"error": 0, "memory": 8867840, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "4f5fd8e51dbd91aaf21f1f0736d1350f"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "10", "output_md5": "76619f076a85f2ed3b6936b45e8d0fb2"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8978432}	2019310444	118.218.64.78
7aaec6d078ce6aaae8633f0b60b5a642	2	12	2021-01-04 12:43:36.868771+00	11	#include <stdio.h>\nint a, b, c, d;\nint main(void)\n{\n\tscanf("%d %d %d %d",&a,&b,&c,&d);\n  \tif(a==b&&b==c&&c==d)\n      printf("Flat land");\n  \telse if(a<b&&b<c&&c<d)\n      printf("Uphill");\n  \telse if(a>b&&b>c&&c>d)\n      printf("Uphill");\n  \telse\n      printf("Unknown");\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1646592, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1617920, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1654784}	2017311005	211.36.140.36
37bb83d4b8fcc897dd81d6db1a364f95	2	14	2021-01-04 13:44:56.79333+00	111	N = int(input())\n\nlst = [[int(input()),1], [int(input()),1]]\n\nans = 0\n\ndef long(n):\n    global lst\n    global ans\n    if n == lst[-1][0]:\n        lst[-1][1] += 1\n    elif n == lst[0][0]:\n        lst[0][1] += 1\n    else:\n        temp = lst[0][1]\n        lst.pop(0)\n        lst[0][1] = 1\n        lst.append([n,1])\n        if temp > ans:\n            ans = temp\n\nfor i in range(N-2):\n    long(int(input()))\nprint(ans)	-1	{"err": null, "data": [{"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 8871936, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 21, "test_case": "3", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "5", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9109504, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8855552, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8904704, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "11", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 16, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9142272, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9015296, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "15", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9048064, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 17, "test_case": "16", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "17", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 14, "test_case": "18", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 8937472, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 17, "test_case": "19", "output_md5": "67c6a1e7ce56d3d6fa748ab6d9af3fd7"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "20", "output_md5": "a684eceee76fc522773286a895bc8436"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "21", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "22", "output_md5": "a5bfc9e07964f8dddeb95fc584cd965d"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9142272}	2015313992	175.192.247.176
85a9f75f4f5ac30d0e39d2c24cb397c5	2	13	2021-01-04 15:00:11.303535+00	115	letter_list = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nS = str(input())\nwrong = 0\nfor i in range(len(S)) :\n    if S[i] not in letter_list :\n        wrong += 1\nif wrong == 0 :\n    print('Yes')\nelse :\n    print('No')	4	{"err": null, "data": [{"error": 0, "memory": 7348224, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7340032, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7319552, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 12, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7389184, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 15, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7290880, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 12, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7364608, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 1, "real_time": 12, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7290880, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 15, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7331840, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 13, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7450624, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 12, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7499776, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 15, "memory_cost": 7499776}	2020311689	116.120.200.125
49c5b89fb18001d78e75bb33f5277d97	2	12	2021-01-04 15:28:45.795674+00	117	h_ih = []\n\nfor i in range(0, 4):\n    h_ih.append(input())\n\n\ncurrent_hill = "Nothing"\n\n\nfor i in range(1,4):\n    if(current_hill == "Nothing"):\n        \n        if(h_ih[i] > h_ih[i-1]):\n            current_hill = "Uphill"\n\n        elif(h_ih[i] < h_ih[i-1]):\n            current_hill = "Downhill"\n\n        elif(h_ih[i] == h_ih[i-1]):\n            current_hill = "Flat Land"\n\n    else:\n        if(current_hill == "Uphill"):\n            if(h_ih[i] <= h_ih[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Downhill"):\n            if(h_ih[i] >= h_ih[i-1]):\n                current_hill ="Unknown"\n        elif(current_hill == "Flat Land"):\n            if(h_ih[i] != h_ih[i-1]):\n                current_hill = "Unknown"\n\nprint(current_hill)	-1	{"err": null, "data": [{"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8925184, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8962048}	2019311602	121.189.141.120
567b0bf1b595a2b47205227e27daa5ae	2	13	2021-01-05 08:24:09.844724+00	133	words = input("")\nANS=True\n\nfor i in range(len(words)):\n  if (words[i] not in ["H","I","N","O","S","X","Z"]):\n    ANS=False\n\nif ANS == False:\n  print("NO")\nelse:\n  print("YES")	0	{"err": null, "data": [{"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8867840, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8851456, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8900608, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8847360, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 19, "memory_cost": 8962048}	2020314792	175.116.4.40
6ed0f214ac426e13952202913843ce83	2	14	2021-01-04 15:35:44.099568+00	115	N = int(input())\npeople = []\nfor i in range(N) :\n    num = int(input())\n    people.append(num)\ns1 = set(people)\nleng_list = []\nfor i in s1 :\n    check_list = []\n    mid_list = []\n    cnt = 0\n    for j in people :\n        if j != i :\n            check_list.append(j)\n    for i in range(len(check_list)-1) :\n        if check_list[i] == check_list[i+1] :\n            cnt += 1\n        else:\n            mid = cnt + 1\n            mid_list.append(mid)\n            cnt = 0\n    mid_list.sort(reverse = True)\n    leng_list.append(mid_list[0])\nleng_list.sort(reverse = True)\nprint(leng_list[0])	-1	{"err": null, "data": [{"error": 0, "memory": 7446528, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7606272, "output": null, "result": 0, "signal": 0, "cpu_time": 309, "exit_code": 0, "real_time": 314, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 7458816, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7364608, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 11, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7454720, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7282688, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7401472, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 9, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7389184, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 7458816, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 19, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7512064, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 22, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7491584, "output": null, "result": 0, "signal": 0, "cpu_time": 30, "exit_code": 0, "real_time": 38, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7516160, "output": null, "result": 0, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 51, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7610368, "output": null, "result": 0, "signal": 0, "cpu_time": 156, "exit_code": 0, "real_time": 161, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7503872, "output": null, "result": 0, "signal": 0, "cpu_time": 196, "exit_code": 0, "real_time": 209, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7639040, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 1, "real_time": 13, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 7512064, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 17, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 7401472, "output": null, "result": 0, "signal": 0, "cpu_time": 43, "exit_code": 0, "real_time": 48, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7467008, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 17, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 7356416, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 28, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 7475200, "output": null, "result": 0, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 26, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 7430144, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 32, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 7491584, "output": null, "result": 0, "signal": 0, "cpu_time": 29, "exit_code": 0, "real_time": 37, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python2	f	{"time_cost": 309, "memory_cost": 7639040}	2020311689	116.120.200.125
8993ef984dc61fc9fd2b1da27696ddc0	2	12	2021-01-05 00:57:46.973208+00	104	#include <iostream>\n\nusing namespace std;\n\nint main() {\n    bool up = true;\n    bool down = true;\n    bool flat = true;\n    int arr[4];\n    \n    for (size_t i = 0; i < 4; i++)\n    {\n        cin >> arr[i];\n    }\n\n    for (size_t i = 0; i < 3; i++)\n    {\n        if (arr[i] <= arr[i + 1])\n            down = false;\n\n        if (arr[i] >= arr[i + 1])\n            up = false;\n\n        if (arr[i] != arr[i + 1])\n            flat = false;\n    }\n\n    if (up) cout << "Uphill" << endl;\n    else if (down) cout << "Downhill" << endl;\n    else if (flat) cout << "Flat Land" << endl;\n    else cout << "Unknown" << endl;\n\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3534848}	2016313857	112.146.209.179
8e8286799150a17885035b9fb38945a6	2	12	2021-01-04 12:43:53.09085+00	11	#include <stdio.h>\nint a, b, c, d;\nint main(void)\n{\n\tscanf("%d %d %d %d",&a,&b,&c,&d);\n  \tif(a==b&&b==c&&c==d)\n      printf("Flat land");\n  \telse if(a<b&&b<c&&c<d)\n      printf("Uphill");\n  \telse if(a>b&&b>c&&c>d)\n      printf("Downhill");\n  \telse\n      printf("Unknown");\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1646592, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "f5e76680e88dde7b443ad4dbc8740072"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1585152, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1699840}	2017311005	211.36.140.36
44f6f935e77bc48adf64a7ca7277b9e4	2	14	2021-01-04 13:47:20.515404+00	111	N = int(input())\n\nlst = [[int(input()),1], [int(input()),1]]\n\nans = 0\n\ndef long(n):\n    global lst\n    global ans\n    if n == lst[-1][0]:\n        lst[-1][1] += 1\n    elif n == lst[0][0]:\n        lst[0][1] += 1\n    else:\n        temp = lst[0][1]\n        lst.pop(0)\n        lst[0][1] = 1\n        lst.append([n,1])\n        if temp > ans:\n            ans = temp\n\nfor i in range(N-2):\n    long(int(input()))\nif lst[0][1] > ans:\n    ans = lst[0][1]\nif lst[1][1] > ans:\n    ans = lst[1][1]\n\nprint(ans)	-1	{"err": null, "data": [{"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9109504, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 13, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 14, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 19, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8978432, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "11", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9056256, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 18, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9064448, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "16", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "17", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9117696, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 19, "test_case": "18", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 9003008, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "19", "output_md5": "67c6a1e7ce56d3d6fa748ab6d9af3fd7"}, {"error": 0, "memory": 9113600, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "20", "output_md5": "a684eceee76fc522773286a895bc8436"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "21", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "22", "output_md5": "a5bfc9e07964f8dddeb95fc584cd965d"}]}	Python3	f	{"time_cost": 18, "memory_cost": 9117696}	2015313992	175.192.247.176
d2fe27ae1bc8bf45e9712712e08b3048	2	12	2021-01-04 12:44:10.609742+00	110	#include <stdio.h>\n\nint main(void)\n{\n\tint i;\n\tint input[4];\n\tint val[3];\n\n\tfor (i = 0; i < 4; i++)\n\t\tscanf("%d", &input[i]);\n\tfor (i = 1; i < 4; i++)\n\t\tval[i - 1] = input[i] - input[i - 1];\n\tif (val[0] == 0 && val[1] == 0 && val[2] == 0)\n\t\tprintf("Flat Land");\n\telse if (val[0] > 0 && val[1] > 0 && val[2] > 0)\n\t\tprintf("Uphill");\n\telse if (val[0] < 0 && val[1] < 0 && val[2] < 0)\n\t\tprintf("Downhill");\n\telse\n\t\tprintf("Unknown");\n}	0	{"err": null, "data": [{"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1699840}	2018311939	58.29.80.140
4b3ccf8adb0d2d48e239871f268301ab	2	16	2021-01-04 15:40:25.250009+00	111	N, M = list(map(int,input().split(' ')))\ntails = []\ncost = 0\nck = False\n\n\nfor _ in range(N):\n    tails.append(int(input()))\n\ntails.sort(reverse=True)\n\nfor i in tails:\n    temp = i\n    while i**2 > M:\n        i-=1\n    cost += (temp-i)**2\n    M -= i**2\n    if M == 0:\n        ck = True\n        break\nif ck:\n    print(cost)\nelse:\n    print(-1)	-1	{"err": null, "data": [{"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "2", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "024677efb8e4aee2eaeef17b54695bbe"}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 8933376, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 20, "test_case": "6", "output_md5": "34173cb38f07f89ddbebc2ac9128303f"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "1f0e3dad99908345f7439f8ffabdffc4"}, {"error": 0, "memory": 8982528, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 21, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "9778d5d219c5080b9a6a17bef029331c"}, {"error": 0, "memory": 8937472, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "10", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "11", "output_md5": "7684e5225ab986f6b32ed950eec5621d"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 21, "test_case": "12", "output_md5": "79121bb953a3bd47c076f20234bafd2e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9027584}	2015313992	175.192.247.176
398cce5d626b23b7fdefd07d156f83f6	2	12	2021-01-04 12:45:55.773776+00	107	a = int(input("첫번째 지점의 높이"))\nb = int(input("두번째 지점의 높이"))\nc = int(input("세번째 지점의 높이"))\nd = int(input("네번째 지점의 높이"))\n  \nif (a<b<c<d):\n    print("Uphill")\nelif (a>b>c>d):\n    print("Downhill")\nelif (a==b , b==c, c==d):\n    print("Flat Land")\nelse:\n    print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 8925184, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}, {"error": 0, "memory": 8990720, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "2", "output_md5": "f6ce99eb8d1c83883a845e8df043ab5e"}, {"error": 0, "memory": 8966144, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 19, "test_case": "3", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "21a457547ab59828fad66926b2a04e8e"}, {"error": 0, "memory": 9056256, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 19, "test_case": "5", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}]}	Python3	f	{"time_cost": 13, "memory_cost": 9056256}	2020311650	1.251.170.216
427d8be2e75f53689a5becf934d1597f	2	12	2021-01-04 12:46:11.063631+00	107	a = int(input("첫번째 지점의 높이"))\nb = int(input("두번째 지점의 높이"))\nc = int(input("세번째 지점의 높이"))\nd = int(input("네번째 지점의 높이"))\n  \nif (a<b<c<d):\n   print("Uphill")\nelif (a>b>c>d):\n   print("Downhill")\nelif (a==b , b==c, c==d):\n   print("Flat Land")\nelse:\n   print("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "f6ce99eb8d1c83883a845e8df043ab5e"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}, {"error": 0, "memory": 9003008, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "21a457547ab59828fad66926b2a04e8e"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "718cdd3891d9e38fccffa7cea62ae067"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9027584}	2020311650	1.251.170.216
ac50ad3157ebc4b0e17a50fe356ace40	2	12	2021-01-04 13:49:13.150954+00	113	#include <iostream>\n\nusing namespace std;\n\nint main()\n{\nint A[10];\n  int same=0,up=0,down=0;\n\tfor (int i = 0; i < 4; i++)\n\t{\n      cin >> A[i];\n\t}\n\tfor (int i = 0; i < 3; i++)\n\t{\n     if(A[i] == A[i+1]) same++;\n     if(A[i] < A[i+1]) up++;\n     if(A[i] > A[i+1]) down++; \n\t}\n\t\n  \n\tif (up == 3) cout << "Uphill";\n\telse if (down == 3) cout << "Downhill";\n\telse if (same == 3) cout << "Flat Land";\n\telse cout << "Unknown";\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3416064, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3530752}	2016312810	218.209.217.214
9344dfb4d5039061948ca302846661f3	2	13	2021-01-05 01:05:41.307648+00	104	#include <iostream>\n\nusing namespace std;\n\nint main() {\n    const char reversable[8] = "HINOSXZ";\n    char str[40];\n    cin >> str;\n\n    bool flag = false;\n    for (int i = 0; str[i] != 0; i++) {\n        flag = false;\n\n        for (int j = 0; j < 7; j++) {\n            if (str[i] == reversable[j]) {\n                flag = true;\n                break;\n            }\n        }\n\n        if (!flag) {\n            cout << "NO" << endl;\n            return 0;\n        }\n    }\n    cout << "YES" << endl;\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3416064, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3424256, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3354624, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3538944}	2016313857	112.146.209.179
975b8ebd85df4a095cdf338316548ab9	2	15	2021-01-05 01:37:58.22192+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nconst int SIZE = 10001;\n\nint m[SIZE];\nbool vis[SIZE] = { false, };\nvector<int> v[SIZE];\n\nint val = 0;\nvoid dfs(int now) {\n\tval += m[now];\n\tvis[now] = true;\n\n\tfor (int next : v[now]) {\n\t\tif (!vis[next]) dfs(next);\n\t}\n}\n\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\tfreopen("input.txt", "r", stdin);\n\n\tint N, M; cin >> N >> M;\n\tfor (int i = 0; i < N; i++) cin >> m[i];\n\twhile (M--) {\n\t\tint x, y; cin >> x >> y;\n\t\tv[x].push_back(y);\n\t\tv[y].push_back(x);\n\t}\n\n\tfor (int i = 0; i < N; i++) {\n\t\tif (!vis[i]) {\n\t\t\tval = 0;\n\t\t\tdfs(i);\n\n\t\t\tif (val) {\n\t\t\t\tcout << "IMPOSSIBLE"; return 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tcout << "POSSIBLE";\n\treturn 0;\n}	4	{"err": null, "data": [{"error": 0, "memory": 3805184, "output": null, "result": 4, "signal": 11, "cpu_time": 1587, "exit_code": 0, "real_time": 1659, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 3866624, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1998, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 3784704, "output": null, "result": 4, "signal": 11, "cpu_time": 2, "exit_code": 0, "real_time": 74, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3805184, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1997, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3772416, "output": null, "result": 4, "signal": 11, "cpu_time": 0, "exit_code": 0, "real_time": 71, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 3805184, "output": null, "result": 4, "signal": 11, "cpu_time": 0, "exit_code": 0, "real_time": 69, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3817472, "output": null, "result": 4, "signal": 11, "cpu_time": 0, "exit_code": 0, "real_time": 75, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 3821568, "output": null, "result": 4, "signal": 11, "cpu_time": 0, "exit_code": 0, "real_time": 70, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3817472, "output": null, "result": 1, "signal": 9, "cpu_time": 1991, "exit_code": 0, "real_time": 1996, "test_case": "9", "output_md5": null}]}	C++	f	{"time_cost": 1992, "memory_cost": 3866624}	2020313266	124.53.59.135
17b0b3aa11db522598aac39fe522b3d3	2	14	2021-01-04 15:50:52.049885+00	115	N = int(input())\npeople = []\nfor i in range(N) :\n    num = int(input())\n    people.append(num)\ns1 = set(people)\nleng_list = []\nfor i in s1 :\n    check_list = []\n    cnt_list = []\n    cnt = 0\n    for j in people :\n        if j != i :\n            check_list.append(j)\n    for k in range(0, len(check_list)) :\n        if check_list[k-1] == check_list[k] :\n            cnt += 1\n            cnt_list.append(cnt)\n        else:\n            cnt = 0\n    cnt_list.sort(reverse = True)\n    final = cnt_list[0] + 1\n    leng_list.append(final)\nleng_list.sort(reverse = True)\nprint(leng_list[0])	4	{"err": null, "data": [{"error": 0, "memory": 7462912, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7475200, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 14, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7315456, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7393280, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7413760, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7507968, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7446528, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 10, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7655424, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 7438336, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7491584, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 21, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 7503872, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 24, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7520256, "output": null, "result": 0, "signal": 0, "cpu_time": 32, "exit_code": 0, "real_time": 36, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7475200, "output": null, "result": 0, "signal": 0, "cpu_time": 104, "exit_code": 0, "real_time": 108, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 7528448, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 19, "test_case": "14", "output_md5": null}, {"error": 0, "memory": 7491584, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "15", "output_md5": "2bb232c0b13c774965ef8558f0fbd615"}, {"error": 0, "memory": 7557120, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 7364608, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 34, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 7438336, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 7553024, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 27, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 7471104, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 27, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 7548928, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 30, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 7614464, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 27, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python2	f	{"time_cost": 104, "memory_cost": 7655424}	2020311689	116.120.200.125
2968763893496e56b047ce9bac46e9a4	2	14	2021-01-05 01:27:42.330191+00	122	s = []\n\nfor i in range(int(input())):\n    s.append(int(input()))\n\na = set(s)\n\nans = 0\nfor i in a:\n    l = 1\n    prev = -1\n\n    for j in s:\n        if i == j:\n            continue\n        if prev != j:\n            ans = max(ans, l)\n            l = 1\n        else:\n            l += 1\n        prev = j\n    ans = max(ans, l)\n\nprint(ans)	0	{"err": null, "data": [{"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 281, "exit_code": 0, "real_time": 286, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 24, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8970240, "output": null, "result": 0, "signal": 0, "cpu_time": 30, "exit_code": 0, "real_time": 31, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9068544, "output": null, "result": 0, "signal": 0, "cpu_time": 42, "exit_code": 0, "real_time": 43, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 134, "exit_code": 0, "real_time": 143, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 193, "exit_code": 0, "real_time": 198, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 47, "exit_code": 0, "real_time": 51, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 18, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 9117696, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 27, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 29, "exit_code": 0, "real_time": 29, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 22, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 30, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 281, "memory_cost": 9117696}	2020313266	124.53.59.135
345f8484e48e765daaca58627be2cabc	2	12	2021-01-05 01:30:23.742705+00	87	height = []\nfor _ in range(4):\n    height.append(int(input()))\n\na = 0\nfor i in range(3):\n    if height[i+1] > height[i]: \n        a += 1\n    elif height[i+1] < height[i]:\n        a -= 1\n\nif a == 3:\n    result = 'Uphill'\nelif a == -3:\n    result = 'Downhill'\nelif a == 0:\n    result = 'Flat Land'\nelse:\n    result = 'Unkown'\n\nprint(result)	-1	{"err": null, "data": [{"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8839168, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "3", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8859648, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "5", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}]}	Python3	f	{"time_cost": 18, "memory_cost": 9027584}	2020314086	14.39.62.140
fdd53b85c315a5e305731b5bcc6f090a	2	12	2021-01-05 01:34:44.130989+00	87	height = []\nfor _ in range(4):\n    height.append(int(input()))\n\na = 0\nfor i in range(3):\n    if height[i+1] > height[i]: \n        a += 1\n    elif height[i+1] < height[i]:\n        a -= 1\n\nif a == 3:\n    result = 'Uphill'\nelif a == -3:\n    result = 'Downhill'\nelif a == 0:\n    result = 'Flat Land'\nelse:\n    result = 'Unknown'\n\nprint(result)	-1	{"err": null, "data": [{"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9060352, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9060352, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 13, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9060352}	2020314086	14.39.62.140
a896378c7657a0eef0a1f29111c59528	2	15	2021-01-05 01:38:07.172457+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nconst int SIZE = 10001;\n\nint m[SIZE];\nbool vis[SIZE] = { false, };\nvector<int> v[SIZE];\n\nint val = 0;\nvoid dfs(int now) {\n\tval += m[now];\n\tvis[now] = true;\n\n\tfor (int next : v[now]) {\n\t\tif (!vis[next]) dfs(next);\n\t}\n}\n\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tint N, M; cin >> N >> M;\n\tfor (int i = 0; i < N; i++) cin >> m[i];\n\twhile (M--) {\n\t\tint x, y; cin >> x >> y;\n\t\tv[x].push_back(y);\n\t\tv[y].push_back(x);\n\t}\n\n\tfor (int i = 0; i < N; i++) {\n\t\tif (!vis[i]) {\n\t\t\tval = 0;\n\t\t\tdfs(i);\n\n\t\t\tif (val) {\n\t\t\t\tcout << "IMPOSSIBLE"; return 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tcout << "POSSIBLE";\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 4157440, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4194304, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 10, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4169728, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 6, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4399104, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3944448, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3981312, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4202496, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 8, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3940352, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4169728, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 8, "memory_cost": 4399104}	2020313266	124.53.59.135
1216d20afa6a5c58fded2070ff8b2cc7	2	15	2021-01-05 09:26:51.046041+00	103	m,n=input("부원 수를 입력하세요:").split(' ')\nm=int(m)\nn=int(n)\n\nc=[]\ni=1\nwhile True:\n    if i<=m:\n        d=int(input('금액을 입력하세요:'))\n        c.append(d)\n        i+=1\n    else:\n        break\n    \nk=1\nabso=0\nx=[]\nj=1\nwhile j<=m:\n    x.append(0)\n    j+=1\n\nwhile True:\n    if k<=n:\n        a,b=input("친분 관계를 입력하세요:").split(' ')\n        a=int(a)\n        b=int(b)\n    \n        k+=1\n        if c[a]<=c[b] and c[b]>=0 :\n            x[a]=abs(c[a])-abs(abs(c[a])-abs(c[b]))\n            x[b]=abs(c[b])-abs(abs(c[a])-abs(c[b]))\n        if c[a]<=c[b] and c[b]<0:\n            x[a]=abs(c[a])-abs(abs(c[a])-abs(c[b]))\n            x[b]=-abs(c[b])+abs(abs(c[a])-abs(c[b]))\n    else:\n        break\nprint(x)\ny=0\nwhile y<=m:\n    if x[y]<0:\n        print("IMPOSSIBLE")\n        break\n    y+=1\n    if y==m:\n        print("POSSIBLE")\n        break	-1	{"err": null, "data": [{"error": 0, "memory": 9244672, "output": null, "result": -1, "signal": 0, "cpu_time": 69, "exit_code": 0, "real_time": 127, "test_case": "1", "output_md5": "74498a4e1d9bac62163c67c48cd054c0"}, {"error": 0, "memory": 9199616, "output": null, "result": -1, "signal": 0, "cpu_time": 94, "exit_code": 0, "real_time": 148, "test_case": "2", "output_md5": "f9180570225b1fbb2e210276ef6420c8"}, {"error": 0, "memory": 9228288, "output": null, "result": -1, "signal": 0, "cpu_time": 40, "exit_code": 0, "real_time": 86, "test_case": "3", "output_md5": "845c10bc8b6741e010d71ad97f21e682"}, {"error": 0, "memory": 9125888, "output": null, "result": -1, "signal": 0, "cpu_time": 108, "exit_code": 0, "real_time": 190, "test_case": "4", "output_md5": "355b65f954b8717608881b6251e005f6"}, {"error": 0, "memory": 9203712, "output": null, "result": -1, "signal": 0, "cpu_time": 32, "exit_code": 0, "real_time": 74, "test_case": "5", "output_md5": "01b7e2aa408b91629aaa6431c203c457"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 45, "exit_code": 0, "real_time": 71, "test_case": "6", "output_md5": "54b17da7fc0a211006d362509928c049"}, {"error": 0, "memory": 9224192, "output": null, "result": -1, "signal": 0, "cpu_time": 87, "exit_code": 0, "real_time": 120, "test_case": "7", "output_md5": "63c7b5bbdfcfc6074381ceaf1f50b0be"}, {"error": 0, "memory": 9224192, "output": null, "result": -1, "signal": 0, "cpu_time": 29, "exit_code": 0, "real_time": 60, "test_case": "8", "output_md5": "a410696e7c5ce22f321f6ff494c0b146"}, {"error": 0, "memory": 9666560, "output": null, "result": -1, "signal": 0, "cpu_time": 64, "exit_code": 0, "real_time": 124, "test_case": "9", "output_md5": "0c81306cae6c8bb1a19b338ae5af7792"}]}	Python3	f	{"time_cost": 108, "memory_cost": 9666560}	2017314205	175.117.35.4
f949496bc1e4be8f79d36f732c351600	2	12	2021-01-05 11:43:49.440629+00	139	list = []\nfor i in range(4):\n    n = input()\n    list.append(n)\n\nif(int(list[0]) < int(list[1]) and int(list[1]) < int(list[2]) and int(list[2]) < int(list[3])):\n    print("Uphill")\nelif(int(list[0]) > int(list[1]) and int(list[1]) > int(list[2]) and int(list[2]) > int(list[3])):\n    print("Downhill")\nelif(int(list[0]) == int(list[1]) and int(list[1]) == int(list[2]) and int(list[2]) == int(list[3])):\n    print("Flat Land")\nelse:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 9101312, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9060352, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9056256, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 19, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9101312}	2015312707	115.145.170.168
648b97ba4a478deb8947b8c2694a7f5e	2	16	2021-01-05 12:31:13.353297+00	12	#include <iostream>\n#include <algorithm>\nusing namespace std;\nint N, M;\nlong long maxi = 989898987654321;\nint ty[11];\nint present = 0;\nint v[11];\nint max_num = 0;\nbool go(int idx, int remain, long long price)\n{\n    //cout << remain << " " << idx << endl;\n    if (remain == M)\n    {\n        maxi = min(maxi, price);\n        return false;\n    }\n    if (remain < M)\n        return false;\n    if (idx == N)\n        return true;\n    go(idx + 1, present, price);\n    for (int i = 1; i < M; i++)\n    {\n        if (ty[idx] - i == 0)\n            break;\n        go(idx + 1, remain - (ty[idx] * ty[idx]) + ((ty[idx] - i) * (ty[idx] - i)), price + (ty[idx] - i) * (ty[idx] - i));\n    }\n    return true;\n}\nbool find_v(int idx, int remain, int before)\n{\n    if (remain == M && idx == N)\n        return true;\n    if (remain > M || idx == N)\n        return false;\n    for (int i = before; i <= max_num; i++)\n    {\n        v[idx] = i;\n        if (find_v(idx + 1, remain + i * i, i))\n        {\n            return true;\n        }\n        v[idx] = 0;\n    }\n    return false;\n}\nvoid check()\n{\n    long long ans = 0;\n    for (int i = 0; i < N; i++)\n    {\n        if (ty[i] - v[i] < 0)\n            return;\n        ans += (ty[i] - v[i]) * (ty[i] - v[i]);\n    }\n    maxi = min(ans, maxi);\n}\nint main()\n{\n    cin >> N >> M;\n    for (int i = 0; i < N; i++)\n        cin >> ty[i], present += ty[i] * ty[i], max_num = max(max_num, ty[i]);\n    find_v(0, 0, 1);\n    do\n    {\n        check();\n    } while (next_permutation(&v[0], &v[N]));\n    if (maxi == 989898987654321)\n        cout << -1 << endl;\n    else\n        cout << maxi << endl;\n\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3526656, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "51e6d6e679953c6311757004d8cbbba9"}, {"error": 0, "memory": 3538944, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "efba0d602748d6f5066384a22b186e5b"}, {"error": 0, "memory": 3510272, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3514368, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "fef98f01e3e52383bec61a7136d4ecb9"}, {"error": 0, "memory": 3428352, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3358720, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "182be0c5cdcd5072bb1864cdee4d3d6e"}, {"error": 0, "memory": 3416064, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "02e74f10e0327ad868d138f2b4fdd6f0"}, {"error": 0, "memory": 3411968, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "ec8956637a99787bd197eacd77acce5e"}, {"error": 0, "memory": 3534848, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3538944, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "f5c80b20fdee4e645ff315a56f12a716"}, {"error": 0, "memory": 3371008, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "12", "output_md5": "239f914f30ea3c948fce2ea07a9efb33"}]}	C++	f	{"time_cost": 2, "memory_cost": 3538944}	2016311327	121.136.228.184
cf2fb04e1376cd12614e4d1cc033b85e	2	12	2021-01-05 14:13:46.769449+00	142	first = int(input())\nsecond = int(input())\nthird = int(input())\nfourth = int(input())\n\nif first == second:\n  if second == third:\n    if third == fourth:\n      print("Flat Land")\n    else:\n      print("Unknown")\n  else:\n    print("Unknown")\nelif first < second:\n  if second < third:\n    if third < fourth:\n      print("Uphill")\n    else:\n      print("Unknown")\n  else:\n    print("Unknown")\nelif first > second:\n  if second > third:\n    if third > fourth:\n      print("Downhill")\n    else:\n      print("Unknown")\n  else:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 7139328, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7397376, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 10, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 7278592, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7442432, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 7307264, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python2	f	{"time_cost": 14, "memory_cost": 7442432}	2020311733	1.225.26.118
cd8d9190aadc43553f2048a9bea42a51	2	12	2021-01-05 01:39:48.478982+00	87	height = []\nfor _ in range(4):\n    height.append(int(input()))\n\nif height[0]<height[1] and height[1]<height[2] \\\n    and height[2]<height[3]:\n        result = "Uphill"\nelif height[0]>height[1] and height[1]>height[2] \\\n    and height[2]>height[3]:\n        result = "Downhill"\nelif height[0]==height[1] and height[1]==height[2] \\\n    and height[2]==height[3]:\n        result = "Flat Land"\nelse:\n        result = "Unknown"\n        \nprint(result)	0	{"err": null, "data": [{"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9117696, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8880128, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9117696}	2020314086	14.39.62.140
90a148fd9947bcb141a1e8e565ed509b	2	12	2021-01-05 09:29:25.102185+00	90	num = 4\na = []\nfor i in range(num):\n    a.append(int(input()))\n\nup = sorted(a)\ndown = sorted(a, reverse=True)\n\n\nif len(set(a))==1:\n    print('Flat Land')\n\nelif a == up:\n\n    print('Uphill')\n\nelif a == down:\n    print('Downhill')\n\nelse:\n    print('Unknown')	-1	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9089024, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8880128, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9089024}	2014310464	1.241.19.62
e5541d36445b538270d4468f6e9f07ad	2	12	2021-01-05 12:57:58.811919+00	79	#include<stdio.h>\n\nint main(){\n\tint h1, h2, h3, h4;\n  \tscanf("%d %d %d %d", &h1, &h2, &h3, &h4);\n  if(h1<h2 && h2<h3 && h3<h4){\n  \tprintf("Uphill\\n");\n  }\n  else if(h1>h2 && h2>h3 && h3>h4){\n  \tprintf("Downhill\\n");\n  }\n  else if(h1==h2 && h2==h3 && h3==h4){\n  \tprintf("Flat Land\\n");\n  }\n  else printf("Unknown\\n");\n  \n  return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1695744, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1667072, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1695744}	2017312222	211.245.221.19
59c54a21d06ab007b0402f509855f277	2	12	2021-01-05 13:27:36.676571+00	141	a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nif a<b & b<c & c<d :\n    print("Uphill")\nelif a>b & b>c & c>d :\n    print("Downhill")\nelif a==b & b==c & c==d :\n    print("Flat Land")\nelse :\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 7360512, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 9, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 7344128, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 8, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 7356416, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 7458816, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 10, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 7380992, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python2	f	{"time_cost": 12, "memory_cost": 7458816}	2018312588	125.130.66.239
1933891cfd9fc0d3e4f8811e4faf10c5	2	14	2021-01-05 01:45:06.89327+00	72	#include<iostream>\n#include<algorithm>\n#include<set>\nusing namespace std;\nint N, arr[1001];\nset<int> s;\nint main(){\n    cin >> N;\n    for(int i=1; i<=N; i++) {\n        cin >> arr[i];\n        s.insert(arr[i]);\n    }\n    set<int>::iterator iter;\n    int res = 0;\n    for(iter=s.begin(); iter!=s.end(); iter++){\n        int cnt = 0, before = -1;\n        for(int i=1; i<=N; i++){\n            if(arr[i] == *iter) continue;\n            if(before == -1) {\n                before = arr[i];\n                cnt++;\n                continue;\n            } \n            if(before != arr[i]) {\n                cnt = 1;\n                before = arr[i];\n            } else {\n                cnt++;\n            }\n            res = max(res, cnt);\n        }\n    }\n    cout << res;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 6, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3362816, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3375104, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3436544, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3416064, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3420160, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 4, "memory_cost": 3571712}	9967han	222.112.181.211
1eab08ea2f6a0d40c84f3123ae955ab3	2	15	2021-01-05 09:29:27.123011+00	103	m,n=input("부원 수를 입력하세요:").split(' ')\nm=int(m)\nn=int(n)\n\nc=[]\ni=1\nwhile True:\n    if i<=m:\n        d=int(input('금액을 입력하세요:'))\n        c.append(d)\n        i+=1\n    else:\n        break\n    \nk=1\nabso=0\nx=[]\nj=1\nwhile j<=m:\n    x.append(0)\n    j+=1\n\nwhile True:\n    if k<=n:\n        a,b=input("친분 관계를 입력하세요:").split(' ')\n        a=int(a)\n        b=int(b)\n    \n        k+=1\n        if c[a]<=c[b] and c[b]>=0 :\n            x[a]=abs(c[a])-abs(abs(c[a])-abs(c[b]))\n            x[b]=abs(c[b])-abs(abs(c[a])-abs(c[b]))\n        if c[a]<=c[b] and c[b]<0:\n            x[a]=abs(c[a])-abs(abs(c[a])-abs(c[b]))\n            x[b]=-abs(c[b])+abs(abs(c[a])-abs(c[b]))\n    else:\n        break\n\ny=0\nwhile y<=m:\n    if x[y]<0:\n        print("IMPOSSIBLE")\n        break\n    y+=1\n    if y==m:\n        print("POSSIBLE")\n        break	-1	{"err": null, "data": [{"error": 0, "memory": 9261056, "output": null, "result": -1, "signal": 0, "cpu_time": 76, "exit_code": 0, "real_time": 125, "test_case": "1", "output_md5": "08c645920b70b200325b9f1c0dbd5f83"}, {"error": 0, "memory": 8978432, "output": null, "result": -1, "signal": 0, "cpu_time": 91, "exit_code": 0, "real_time": 148, "test_case": "2", "output_md5": "246c0d569be7fe9d211caf4568275ae6"}, {"error": 0, "memory": 9093120, "output": null, "result": -1, "signal": 0, "cpu_time": 44, "exit_code": 0, "real_time": 85, "test_case": "3", "output_md5": "2a49d5b717909a3e40adb090c5484262"}, {"error": 0, "memory": 9117696, "output": null, "result": -1, "signal": 0, "cpu_time": 94, "exit_code": 0, "real_time": 185, "test_case": "4", "output_md5": "a3a8d945ede6f0e124813b58ddab80a9"}, {"error": 0, "memory": 9101312, "output": null, "result": -1, "signal": 0, "cpu_time": 34, "exit_code": 0, "real_time": 74, "test_case": "5", "output_md5": "7b3a4b4710dae279afd41dd23b8efbee"}, {"error": 0, "memory": 9216000, "output": null, "result": -1, "signal": 0, "cpu_time": 41, "exit_code": 0, "real_time": 69, "test_case": "6", "output_md5": "93700d1eb81af688ad5277928d826a79"}, {"error": 0, "memory": 9281536, "output": null, "result": -1, "signal": 0, "cpu_time": 83, "exit_code": 0, "real_time": 120, "test_case": "7", "output_md5": "690a59bb625ec8f74b2029bbe4326311"}, {"error": 0, "memory": 9211904, "output": null, "result": -1, "signal": 0, "cpu_time": 35, "exit_code": 0, "real_time": 63, "test_case": "8", "output_md5": "d147782a99ae5b3772eddb2635464933"}, {"error": 0, "memory": 9588736, "output": null, "result": -1, "signal": 0, "cpu_time": 70, "exit_code": 0, "real_time": 118, "test_case": "9", "output_md5": "e8b46d1268b3c160a78b9ff58c8fccb6"}]}	Python3	f	{"time_cost": 94, "memory_cost": 9588736}	2017314205	175.117.35.4
279bbcce6940e0dc77f013d54917d4d5	2	14	2021-01-05 01:45:11.176949+00	72	#include<iostream>\n#include<algorithm>\n#include<set>\nusing namespace std;\nint N, arr[1001];\nset<int> s;\nint main(){\n    cin >> N;\n    for(int i=1; i<=N; i++) {\n        cin >> arr[i];\n        s.insert(arr[i]);\n    }\n    set<int>::iterator iter;\n    int res = 0;\n    for(iter=s.begin(); iter!=s.end(); iter++){\n        int cnt = 0, before = -1;\n        for(int i=1; i<=N; i++){\n            if(arr[i] == *iter) continue;\n            if(before == -1) {\n                before = arr[i];\n                cnt++;\n                continue;\n            } \n            if(before != arr[i]) {\n                cnt = 1;\n                before = arr[i];\n            } else {\n                cnt++;\n            }\n            res = max(res, cnt);\n        }\n    }\n    cout << res;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3567616, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3371008, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3440640, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3362816, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3371008, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 4, "memory_cost": 3567616}	9967han	222.112.181.211
b29fdebad09af208fbf77f943e69ffca	2	16	2021-01-05 11:44:28.878286+00	12	#include <iostream>\n#include <algorithm>\n\nusing namespace std;\nint N, M;\nint maxi = 987654321;\nint ty[11];\nint present = 0;\nvoid go(int idx, int remain, int price)\n{\n    //cout << remain << " " << idx << endl;\n    if (remain == M)\n    {\n        maxi = min(maxi, price);\n        return;\n    }\n    if (remain < M)\n        return;\n    if (idx == N)\n        return;\n    go(idx + 1, present, price);\n    for (int i = 1; i < M; i++)\n    {\n        if (ty[idx] - i == 0)\n            break;\n        go(idx + 1, remain - (ty[idx] * ty[idx]) + ((ty[idx] - i) * (ty[idx] - i)), price + (ty[idx] - i) * (ty[idx] - i));\n    }\n}\nint main()\n{\n    cin >> N >> M;\n    for (int i = 0; i < N; i++)\n        cin >> ty[i], present += ty[i] * ty[i];\n    go(0, present, 0);\n    if (maxi == 987654321)\n        cout << -1 << endl;\n    else\n        cout << maxi << endl;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3510272, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "f0682320ccbbb1f1fb1e795de5e5639a"}, {"error": 0, "memory": 3100672, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3403776, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 2000, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3371008, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "4e732ced3463d06de0ca9a15b6153677"}, {"error": 0, "memory": 3366912, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3440640, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3477504, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3485696, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "4cb811134b9d39fc3104bd06ce75abad"}, {"error": 0, "memory": 3407872, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1999, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3162112, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1999, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 1998, "memory_cost": 3510272}	2016311327	121.136.228.184
4638df152457d4f3b6e75f6720b8ff8d	2	14	2021-01-05 13:38:31.505183+00	11	# pragma GCC optimize ("O3")\n# pragma GCC optimize ("Ofast")\n# pragma GCC optimize ("unroll-loops")\n#include <stdio.h>\n#include <iostream>\n#include <string.h>\n#include <algorithm>\n#include <queue>\n#include <vector>\n#include <stack>\n#include <string>\n#include <math.h>\n#include <stdlib.h>\n#include <deque>\n\n\n#ifdef _MSC_VER\n#define _CRT_SECURE_NO_WARNINGS\n#endif\n\n#define M 200002\n#define MM 1102\n#define ull unsigned long long\n#define ll long long\n#define ld long double\n\n#define foi(a) for(i=1;i<=a;i++)\n#define foj(a) for(j=1;j<=a;j++)\n#define fok(a) for(k=1;k<=a;k++)\n#define fori for(i=1;i<=n;i++)\n#define forj for(j=1;j<=m;j++)\n#define fork for(k=1;k<=l;k++)\n#define foriw for(i=1;;i++)\n\n#define scann scanf("%lld",&n)\n#define scanm scanf("%lld",&m)\n#define scant scanf("%lld",&t)\n#define scanx scanf("%lld",&x)\n#define scanc scanf("%c",&c)\n#define scanxy scanf("%lld %lld",&x,&y)\n#define scanyx scanf("%lld %lld",&y,&x)\n#define scanwe scanf("%lld %lld",&w,&e)\n#define scannm scanf("%lld %lld",&n,&m)\n#define scanmn scanf("%lld %lld",&m,&n)\n#define scannml scanf("%lld %lld %lld",&n,&m,&l)\n#define scanxyz scanf("%lld %lld %lld",&x,&y,&z)\n#define scanxyzr scanf("%lld %lld %lld %lld",&x,&y,&z,&r)\n#define scans frees; scanf("%s", &s[1]); len = strlen(&s[1]);\n#define scansn frees; scanf("%s", &s[1]); len = strlen(&s[1]); n=len;\n#define scansm frees; scanf("%s", &s[1]); len = strlen(&s[1]); m=len;\n#define scans1 scanf("%s", &s1[1]); len1 = strlen(&s1[1]);\n#define scans2 scanf("%s", &s2[1]); len2 = strlen(&s2[1]);\n#define scana freea; fori scanf("%lld",&a[i]);\n#define scanna scann; fori scanf("%lld",&a[i]);\n#define scana1d fori scanf("%1d",&a[i]);\n#define scanb1d fori scanf("%1d",&b[i]);\n#define scanb fori scanf("%d",&b[i]);\n#define scanaa fori for(ll j=1;j<=m;j++) scanf("%lld",&aa[i][j]);\n#define scanbb fori for(ll j=1;j<=m;j++) scanf("%lld",&bb[i][j]);\n#define scanstr getline(cin,str); slen=str.length();for(int i=slen;i>=1;i--) str[i]=str[i-1]; str[0]=0;\n\n\n\n#define printsum printf("%lld",sum);\n#define printcase printf("Case %lld: ",++casenum);\n#define printcases printf("Case #%lld: ",++casenum);\n#define prints printf("%s",&s[1]);\n#define printc printf("%c",c);\n#define printmax printf("%lld",maxi);\n#define printa fori {printf("%lld ",a[i]); }printf("\\n");\n#define printb fori {printf("%lld ",b[i]); }printf("\\n");\n#define printaa fori {for(ll j=1;j<=m;j++) {printf("%3d ",aa[i][j]);} printf("\\n");}printf("\\n");\n#define printbb fori {for(ll j=1;j<=m;j++) {printf("%3d ",bb[i][j]);} printf("\\n");}printf("\\n");\n\n#define frees for(ll i=0;i<=len+n;i++) s[i]=0;\n#define freea for(ll i=0;i<=n;i++) a[i]=0;\n#define cleana for(ll i=0;i<=n;i++) a[i]=0;\n#define cleanb for(ll i=0;i<=n;i++) b[i]=0;\n#define sorta sort(a+1,a+n+1);\n#define sortb sort(b+1,b+n+1);\n#define suma sum=0; fori sum+=a[i];\n#define infa fori a[i]=INF;\n#define reversea fori tempa[i]=a[n+1-i]; fori a[i]=tempa[i];\n#define findmax maxi=a[1]; fori if(a[i]>maxi) maxi=a[i];\n#define findmaxn maxi=a[1]; fori if(a[i]>maxi) {maxi=a[i]; num=i;}\n#define findmin mini=a[1]; fori if(a[i]<mini) mini=a[i];\n#define issmall(a)      ((a>='a')&&(a<='z'))\n#define isbig(a)      ((a>='A')&&(a<='Z'))\n\n#define lens len = strlen(s);\n#define test printf("TEST!");\n#define wt while(t--)\n#define w1 while(1)\n#define INF 0x7f7f7f7f\n#define br break\n#define braek break\n#define bk break\n#define nbreak if(n==0) break;\n#define boundcheck(tx,ty) if(tx>=1&&ty>=1&&tx<=n&&ty<=m)\n#define strint fori a[i] = s[i] - '0';\n\n#define X first\n#define Y second\n#define fo(i,a,b) for(i = a; i <= b; i++)\n#define pb push_back\n#define mp make_pair\n#define vsort(v) sort(v.begin(),v.end());\n#define sc(a) cin >> a\n#define sc1(a) cin >> a\n#define sc2(a,b) cin >> a >> b\n#define sc3(a,b,c) cin >> a >> b >> c\n#define sc4(a,b,c,d) cin >> a >> b >> c >> d\n#define sc5(a,b,c,d,e) cin >> a >> b >> c >> d >> e\n#define sc6(a,b,c,d,e,f) cin >> a >> b >> c >> d >> e >> f\n\n#define pr(a) cout << (a) \n#define prl cout << '\\n'\n#define pr1(a) cout << (a) << ' '\n#define pr2(a,b) cout << (a) << ' ' << (b) << ' '\n#define pr3(a,b,c) cout << (a) << ' ' << (b) << ' '<< (c) << ' '\n#define pr4(a,b,c,d) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '\n#define pr5(a,b,c,d,e) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' '\n#define pr6(a,b,c,d,e,f) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' ' << (f) << ' '\n#define pr0l cout << '\\n';\n#define pr1l(a) cout << (a) << '\\n'\n#define pr2l(a,b) cout << (a) << ' ' << (b) << '\\n'\n#define pr3l(a,b,c) cout << (a) << ' ' << (b) << ' '<< (c) << '\\n'\n#define pr4l(a,b,c,d) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << '\\n'\n#define pr5l(a,b,c,d,e) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << '\\n'\n#define pr6l(a,b,c,d,e,f) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' ' << (f) << '\\n'\n\n#define prcnt pr(cnt) \n#define prno pr("no") \n#define pryes pr("yes") \n#define prmaxi pr(maxi) \n#define prmax pr(maxi) \n#define prnum pr(num) \n#define prsum printsum\n#define prstr for(ll wq=1;wq<=slen;wq++) pr(str[wq]);\n\nusing namespace std;\nll i, j, ii, jj, n, zz, yyy, xxx, bre, cnt, ans, slen, casenum, nn, hab, count, t, now, one, two, yy, m, yes, cntt, x1, x2, x3, Y1, y2, y3, temp, i1, i2, J1, j2, i3, j3, len1, len2, low, mid, left, right, high, ok, tx, ty, k, start, num, xx, qq, w, e, no, r, sum, x, y, z, l, len, mini = INF, maxi = -INF, x11, x22, x33, y11, y22, y33;\nll dx[5] = { 0,-1,0,1,0 };\nll dy[5] = { 0,0,-1,0,1 };\nll ddx[9] = { 0,-1,-1,-1,0,0,1,1,1 };\nll ddy[9] = { 0,-1,0,1,-1,1,-1,0,1 };\nld ld1, ld2, ld3, ld4, ld5, ld6, ld7;\nll a[M], a1[M], a2[M], a3[M], a4[M], a5[M], bb[MM][MM], habtree[M], mintree[M], maxtree[M];\nll b[M], dp[10][M];\nll d[M], dist[M], aa[MM][MM], d1[M], d2[M], tempa[M];\nbool check[M], visit[M], treecheck[M];\nchar s1[M], s2[M], ss[MM][MM];\nchar s[M];\nchar c1, c2, c, c3, c4;\nld ldmax, ldmin, ldmax1, ldmax2, ldmin1, ldmin2, ldd[M];\n\nstring str, str1;\null u1, u2, u3, u4;\nqueue<int> q;\nqueue<int> qx, qy;\npriority_queue<int> pq;\nstack<int> st;\npair<int, int> p[M];\ndeque<int> dq;\n\nbool boo[10000001];\n\n\nll zegob(ll x, ll y)\n{\n\tll k = 1;\n\tfor (int i = 1; i <= y; i++)\n\t\tk *= x;\n\treturn k;\n}\n\nbool da(char c)\n{\n\tif (c >= 'A' && c <= 'Z')\n\t\treturn true;\n\treturn false;\n}\nbool so(char c)\n{\n\tif (c >= 'a' && c <= 'z')\n\t\treturn true;\n\treturn false;\n}\n\nbool vowel(char c)\n{\n\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\treturn true;\n\treturn false;\n}\n\nint find(int x)\n{\n\tif (d[x] == x)\n\t\treturn x;\n\treturn find(d[x]);\n}\n\nvoid un(int x, int y)\n{\n\tint q = find(x);\n\tint w = find(y);\n\tif (q < w)\n\t\td[w] = q;\n\telse\n\t\td[q] = w;\n}\n\nbool bound(int x, int y)\n{\n\tif (x > 0 && y > 0 && x <= n && y <= m)\n\t\treturn true;\n\treturn false;\n}\n\nbool same(int x, int y)\n{\n\treturn (find(x) == find(y));\n}\n\nll gcd(ll x, ll y)\n{\n\tif (x < y)\n\t\tswap(x, y);\n\tif (y == 0)\n\t\treturn x;\n\treturn gcd(y, x % y);\n}\n\nll bigger(ll x, ll y)\n{\n\tif (x > y)\n\t\treturn x;\n\treturn y;\n}\n\nll smaller(ll x, ll y)\n{\n\tif (x < y)\n\t\treturn x;\n\treturn y;\n}\n\nbool descend(const pair<int, int> & a, const pair<int, int> & b)\n{\n\t//If the first number is same\n\tif (a.first == b.first)\n\t\treturn a.second > b.second; //The second number in Descending order\n\treturn a.first > b.first; //The first number of bigger numbers to move forward -> Descending order\n}\n\nbool ascend(const pair<int, int> & a, const pair<int, int> & b)\n{\n\t//If the first number is same\n\tif (a.first == b.first)\n\t\treturn a.second < b.second; //The second number in Descending order\n\treturn a.first > b.first; //The first number of bigger numbers to move forward -> Descending order\n}\n\nll find_max(long long* a, ll n)\n{\n\tfindmax;\n\treturn maxi;\n}\n\n\nvoid clean(long long* a, int n)\n{\n\tfori\n\t\ta[i] = 0;\n}\n\nll zari(ll n)\n{\n\tk = 10;\n\tforiw\n\t{\n\t\tif (k > n)\n\t\t\treturn i;\n\t\tk *= 10;\n\t}\n}\n\n\nbool zzz(int x, int y, int z)\n{\n\tif (x == 0 && y == 0 && z == 0)\n\t\treturn true;\n\treturn false;\n}\n\nll biggest(int x, int y, int z)\n{\n\tll a[4];\n\ta[1] = x;\n\ta[2] = y;\n\ta[3] = z;\n\tsort(a + 1, a + 4);\n\treturn a[3];\n}\nll smallest(int x, int y, int z)\n{\n\tll a[4];\n\ta[1] = x;\n\ta[2] = y;\n\ta[3] = z;\n\tsort(a + 1, a + 4);\n\treturn a[1];\n}\n\nll maketree_min(int left, int right, int node)\n{\n\tif (left == right)\n\t\treturn mintree[node] = a[left];\n\telse\n\t{\n\t\tint mid = (left + right) / 2;\n\t\tmintree[node] = smaller(maketree_min(left, mid, node * 2), maketree_min(mid + 1, right, node * 2 + 1)); //작은거\n\t\treturn mintree[node];\n\t}\n}\n\nll query_min(int node, int left, int right, int start, int end)\n{\n\tif (right < start || end < left)\n\t\treturn 9876543210; // 겹치지 않는 경우(영향이 없는 값을 반환)\n\tif (start <= left && right <= end) return mintree[node]; // 모두 겹치는 경우\n\tint mid = (left + right) / 2; // 일부만 겹치는 경우\n\treturn smaller(query_min(node * 2, left, mid, start, end), query_min(node * 2 + 1, mid + 1, right, start, end));\n}\n\nll maketree_max(int left, int right, int node)\n{\n\tif (left == right)\n\t\treturn maxtree[node] = a[left];\n\telse\n\t{\n\t\tint mid = (left + right) / 2;\n\t\tmaxtree[node] = bigger(maketree_max(left, mid, node * 2), maketree_max(mid + 1, right, node * 2 + 1)); //작은거\n\t\treturn maxtree[node];\n\t}\n}\n\nll query_max(int node, int left, int right, int start, int end)\n{\n\tif (right < start || end < left)\n\t\treturn -1; // 겹치지 않는 경우(영향이 없는 값을 반환)\n\tif (start <= left && right <= end) return maxtree[node]; // 모두 겹치는 경우\n\tint mid = (left + right) / 2; // 일부만 겹치는 경우\n\treturn bigger(query_max(node * 2, left, mid, start, end), query_max(node * 2 + 1, mid + 1, right, start, end));\n}\n\nll maketree_hab(ll left, ll right, ll node)\n{\n\ttreecheck[node] = 1;\n\tif (left == right)\n\t{\n\t\td[left] = node;\n\t\thabtree[left] = a[left];\n\t\treturn habtree[node];\n\t}\n\telse\n\t{\n\t\tll mid = (left + right) / 2;\n\t\thabtree[node] = (maketree_hab(left, mid, node * 2) + maketree_hab(mid + 1, right, node * 2 + 1) % 1000000007) % 1000000007;\n\t\treturn habtree[node];\n\t}\n}\n\nll query_hab(ll node, ll left, ll right, ll start, ll end)\n{\n\tif (right < start || end < left)\n\t\treturn 0; // 겹치지 않는 경우(영향이 없는 값을 반환)\n\tif (start <= left && right <= end)\n\t\treturn habtree[node]; // 모두 겹치는 경우\n\tll mid = (left + right) / 2; // 일부만 겹치는 경우\n\treturn (query_hab(node * 2, left, mid, start, end)) + (query_hab(node * 2 + 1, mid + 1, right, start, end));\n}\n\n\nvoid update(ll node, ll left, ll right, ll idx)\n{\n\tif (idx<left || idx>right)\n\t\treturn;\n\tif (left == right)\n\t{\n\t\thabtree[node] = 1;\n\t\treturn;\n\t}\n\tll mid = (left + right) / 2;\n\tupdate(node * 2, left, mid, idx);\n\tupdate(node * 2 + 1, mid + 1, right, idx);\n\thabtree[node] = habtree[node * 2] + habtree[node * 2 + 1];\n}\n\nll fact(ll n)\n{\n\tk = 1;\n\tfori\n\t\tk *= i;\n\treturn k;\n}\n\nlong long dfs(long long now, long long visit)\n{\n\tpr2l(now, visit);\n\tif (visit == ((1 << n) - 1))\n\t{\n\t\tdp[now][visit] = ((aa[now][1] == 0) ? INF : aa[now][1]);\n\t\treturn dp[now][visit];\n\t}\n\tif (dp[now][visit] != INF)\n\t\treturn dp[now][visit];\n\tmini = INF;\n\tfor (long long i = 1; i <= n; i++)\n\t{\n\n\t\tif ((visit & (1 << (i - 1))) == 0 && aa[now][i] > 0)\n\t\t{\n\t\t\tdp[now][visit] = smaller(mini, aa[now][i] + dfs(i, (visit | (1 << (i - 1)))));\n\t\t\treturn dp[now][visit];\n\t\t}\n\t}\n}\n\n\n\nvoid re(int x, int lev)\n{\n\ta[lev] = x;\n\tif (lev == m)\n\t{\n\t\tfor (int i = 1; i <= m; i++)\n\t\t\tprintf("%d ", b[a[i]]);\n\t\tprintf("\\n");\n\t\treturn;\n\t}\n\tfori\n\t{\n\t\tif (i != x)\n\t\t{\n\t\t\tcheck[i] = 1;\n\t\t\tre(i, lev + 1);\n\t\t\tcheck[i] = 0;\n\t\t}\n\t}\n}\n\nll reverse(ll x)\n{\n\tll sum = 0;\n\tll t = x;\n\tll z = zari(x);\n\tfoi(z)\n\t{\n\t\tsum += (t % 10) * zegob(10, z - i);\n\t\tt /= 10;\n\t}\n\treturn sum;\n}\n\nll ar[20][20][4];\nvoid f(int w)\n{\n\n}\n\n\nint main(void)\n{\n\tscann;\n\tscana;\n\tfori\n\t\tb[i] = a[i];\n\tsorta;\n\tfori\n\t{\n\t\tif (a[i] != a[i - 1])\n\t\t{\n\t\t\tx = a[i];\n\t\t\tm = n;\n\t\t\ty = 0;\n\t\t\tcnt = 0;\n\t\t\tforj\n\t\t\t{\n\t\t\t\tif (b[j] == x)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (y == b[j])\n\t\t\t\t\tcnt++;\n\t\t\t\telse\n\t\t\t\t\tcnt = 1;\n\t\t\t\ty = b[j];\n\t\t\t\tif (cnt > maxi)\n\t\t\t\t\tmaxi = cnt;\n\t\t\t}\n\t\t}\n\t}\n\tpr(maxi);\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/595210aee09f4d50b1432ab821d6dc82/main.c:5:10: fatal error: iostream: No such file or directory\\n #include <iostream>\\n          ^~~~~~~~~~\\ncompilation terminated."}	2017311005	211.36.140.32
816b8d95f5f01067312b1cc13d0f00d9	2	13	2021-01-05 01:47:42.800652+00	25	h = input()\n\nList = ['H','I','N','O','S','X','Z']\nBol= 1\nfor i in h:\n    if i not in List:\n        print('NO')\n        Bol = 0\nif Bol ==1:          \n    print("YES")	-1	{"err": null, "data": [{"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8892416, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8871936, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "e3c77af9369c89b4a80d772fdda5f05f"}, {"error": 0, "memory": 8777728, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "9d762d3b96b04534bd794cb8e15960f8"}, {"error": 0, "memory": 8896512, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 19, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8781824, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8896512, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "8", "output_md5": "646da0df850e1bf42ee11fcce0fa17ac"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 19, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8957952}	2020313223	221.143.30.115
81cc15e6ce96fbcc5a489173f13fc253	2	15	2021-01-05 15:44:10.609242+00	141	memberNum, connectNum = map(int, input().split())\nmoney = []\nmemberConnect = []\nresult = True\n\nfor i in range(memberNum) :\n    num = int(input())\n    money.append(num)\n    memberConnect.append(i)\n\nfor i in range(connectNum) :\n    a, b = map(int, input().split())\n    money[memberConnect[a]] += money[memberConnect[b]]\n    money[memberConnect[b]] = 0\n    memberConnect[b] = memberConnect[a]\n\nfor i in money :\n    if i != 0 :\n        result = False\n\nprint(money)\n\nif result :\n    print("POSSIBLE")\nelse :\n    print("IMPOSSIBLE")	-1	{"err": null, "data": [{"error": 0, "memory": 9457664, "output": null, "result": -1, "signal": 0, "cpu_time": 71, "exit_code": 0, "real_time": 80, "test_case": "1", "output_md5": "e16b1cf8e8d93b428d5760238af3eb05"}, {"error": 0, "memory": 9244672, "output": null, "result": -1, "signal": 0, "cpu_time": 40, "exit_code": 0, "real_time": 57, "test_case": "2", "output_md5": "c54c159003ba3141eb79f4c6a90d09a5"}, {"error": 0, "memory": 9203712, "output": null, "result": -1, "signal": 0, "cpu_time": 52, "exit_code": 0, "real_time": 57, "test_case": "3", "output_md5": "b5ca601bc0337f6460055c0ea06bf108"}, {"error": 0, "memory": 9134080, "output": null, "result": -1, "signal": 0, "cpu_time": 62, "exit_code": 0, "real_time": 75, "test_case": "4", "output_md5": "8092691c9e2a25467e84e02e1933b883"}, {"error": 0, "memory": 9388032, "output": null, "result": -1, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 51, "test_case": "5", "output_md5": "2e5cd1da0d80440f5e1e0e9ded2a5240"}, {"error": 0, "memory": 9129984, "output": null, "result": -1, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 50, "test_case": "6", "output_md5": "f2ed7d8afe28a4afed4aa33a9cbea3e7"}, {"error": 0, "memory": 9306112, "output": null, "result": -1, "signal": 0, "cpu_time": 50, "exit_code": 0, "real_time": 66, "test_case": "7", "output_md5": "bdf58a6aea3a6de772a23840d7e4e182"}, {"error": 0, "memory": 9293824, "output": null, "result": -1, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 38, "test_case": "8", "output_md5": "fca2b4777f28621ebcc9126789a6626f"}, {"error": 0, "memory": 9601024, "output": null, "result": -1, "signal": 0, "cpu_time": 51, "exit_code": 0, "real_time": 52, "test_case": "9", "output_md5": "56f6d63db114d7b2f6926593f524b201"}]}	Python3	f	{"time_cost": 71, "memory_cost": 9601024}	2018312588	125.130.66.239
294d010d6af7925b366a21f7e83a07a3	2	15	2021-01-05 09:31:27.324863+00	103	m,n=input("부원 수를 입력하세요:").split(' ')\nm=int(m)\nn=int(n)\n\nc=[]\ni=1\nwhile True:\n    if i<=m:\n        d=int(input('금액을 입력하세요:'))\n        c.append(d)\n        i+=1\n    else:\n        break\n    \nk=1\nabso=0\nx=[]\nj=1\nwhile j<=m:\n    x.append(0)\n    j+=1\n\nwhile True:\n    if k<=n:\n        a,b=input("친분 관계를 입력하세요:").split(' ')\n        a=int(a)\n        b=int(b)\n    \n        k+=1\n        if c[a]<=c[b] and c[b]>=0 :\n            x[a]+=abs(c[a])-abs(abs(c[a])-abs(c[b]))\n            x[b]+=abs(c[b])-abs(abs(c[a])-abs(c[b]))\n        if c[a]<=c[b] and c[b]<0:\n            x[a]+=abs(c[a])-abs(abs(c[a])-abs(c[b]))\n            x[b]+=-abs(c[b])+abs(abs(c[a])-abs(c[b]))\n    else:\n        break\nprint(x)\n\ny=0\nwhile y<=m:\n    if x[y]<0:\n        print("IMPOSSIBLE")\n        break\n    y+=1\n    if y==m:\n        print("POSSIBLE")\n        break	-1	{"err": null, "data": [{"error": 0, "memory": 9371648, "output": null, "result": -1, "signal": 0, "cpu_time": 87, "exit_code": 0, "real_time": 132, "test_case": "1", "output_md5": "b7adf4bdf372d18bf4c2f699463234eb"}, {"error": 0, "memory": 9244672, "output": null, "result": -1, "signal": 0, "cpu_time": 75, "exit_code": 0, "real_time": 151, "test_case": "2", "output_md5": "f3077c2c239bbf594f778d3e7acd4004"}, {"error": 0, "memory": 9347072, "output": null, "result": -1, "signal": 0, "cpu_time": 61, "exit_code": 0, "real_time": 85, "test_case": "3", "output_md5": "3952eeb024d08d3d9a26d32dfb05f908"}, {"error": 0, "memory": 9089024, "output": null, "result": -1, "signal": 0, "cpu_time": 153, "exit_code": 0, "real_time": 200, "test_case": "4", "output_md5": "f2fe4b1be50772bfadea38e393abe8cb"}, {"error": 0, "memory": 9297920, "output": null, "result": -1, "signal": 0, "cpu_time": 45, "exit_code": 0, "real_time": 71, "test_case": "5", "output_md5": "37a73bb16ac2e3c6d44415a8c3eb6694"}, {"error": 0, "memory": 9154560, "output": null, "result": -1, "signal": 0, "cpu_time": 45, "exit_code": 0, "real_time": 74, "test_case": "6", "output_md5": "e1a98f35183638b5aa3372ad76a6c709"}, {"error": 0, "memory": 9363456, "output": null, "result": -1, "signal": 0, "cpu_time": 69, "exit_code": 0, "real_time": 120, "test_case": "7", "output_md5": "14885f6eeb2a0797660d813815208e86"}, {"error": 0, "memory": 9256960, "output": null, "result": -1, "signal": 0, "cpu_time": 48, "exit_code": 0, "real_time": 61, "test_case": "8", "output_md5": "2653dd2db4bf335d445928b1bcf1b1be"}, {"error": 0, "memory": 9547776, "output": null, "result": -1, "signal": 0, "cpu_time": 68, "exit_code": 0, "real_time": 120, "test_case": "9", "output_md5": "452ec1437cb9b43b0d54a4b9f969b7be"}]}	Python3	f	{"time_cost": 153, "memory_cost": 9547776}	2017314205	175.117.35.4
a67bbf9d04662474740175cda262e02f	2	16	2021-01-05 12:33:34.58486+00	12	#include <iostream>\n#include <algorithm>\nusing namespace std;\nint N, M;\nlong long maxi = 989898987654321;\nint ty[11];\nint present = 0;\nint v[11];\nint max_num = 0;\nbool go(int idx, int remain, long long price)\n{\n    //cout << remain << " " << idx << endl;\n    if (remain == M)\n    {\n        maxi = min(maxi, price);\n        return false;\n    }\n    if (remain < M)\n        return false;\n    if (idx == N)\n        return true;\n    go(idx + 1, present, price);\n    for (int i = 1; i < M; i++)\n    {\n        if (ty[idx] - i == 0)\n            break;\n        go(idx + 1, remain - (ty[idx] * ty[idx]) + ((ty[idx] - i) * (ty[idx] - i)), price + (ty[idx] - i) * (ty[idx] - i));\n    }\n    return true;\n}\nbool find_v(int idx, int remain, int before)\n{\n    if (remain == M && idx == N)\n        return true;\n    if (remain > M || idx == N)\n        return false;\n    for (int i = before; i <= max_num; i++)\n    {\n        v[idx] = i;\n        if (find_v(idx + 1, remain + i * i, i))\n        {\n            return true;\n        }\n        v[idx] = 0;\n    }\n    return false;\n}\nvoid check()\n{\n    long long ans = 0;\n    for (int i = 0; i < N; i++)\n    {\n        if (ty[i] - v[i] <= 0)\n            return;\n        ans += (ty[i] - v[i]) * (ty[i] - v[i]);\n    }\n    maxi = min(ans, maxi);\n}\nint main()\n{\n    cin >> N >> M;\n    for (int i = 0; i < N; i++)\n        cin >> ty[i], present += ty[i] * ty[i], max_num = max(max_num, ty[i]);\n    find_v(0, 0, 1);\n    do\n    {\n        check();\n    } while (next_permutation(&v[0], &v[N]));\n    if (maxi == 989898987654321)\n        cout << -1 << endl;\n    else\n        cout << maxi << endl;\n\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3485696, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3522560, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "51e6d6e679953c6311757004d8cbbba9"}, {"error": 0, "memory": 3502080, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "efba0d602748d6f5066384a22b186e5b"}, {"error": 0, "memory": 3502080, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3547136, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "fef98f01e3e52383bec61a7136d4ecb9"}, {"error": 0, "memory": 3375104, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3420160, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3407872, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "02e74f10e0327ad868d138f2b4fdd6f0"}, {"error": 0, "memory": 3547136, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3358720, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3530752, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "11", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3493888, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "239f914f30ea3c948fce2ea07a9efb33"}]}	C++	f	{"time_cost": 2, "memory_cost": 3547136}	2016311327	121.136.228.184
4cb64329345a19d6d872c7f145d72364	2	14	2021-01-05 13:03:12.673899+00	99	#include<stdio.h>\n#include<stdlib.h>\n\ntypedef enum {false, true} bool;\n\ntypedef struct _Node \n{\n\tint data;\n\tstruct _Node* next;\n}Node;\nvoid insertitem(Node* head, int item)\n{\n\tNode* temp = (Node*)malloc(sizeof(Node));\n\tNode* cur = (Node*)malloc(sizeof(Node));\n\tcur = head;\n\ttemp->data = item;\n\ttemp->next = NULL;\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = temp;\n}\nNode* deletednode(int arr[],int len, int item)\n{\n\tNode* temp = (Node*)malloc(sizeof(Node));\n\tint startnum = 0;\n\twhile (arr[startnum] == item)\n\t\tstartnum++;\n\ttemp->next = NULL;\n\ttemp->data = arr[startnum];\n\tstartnum++;\n\tfor (int i = startnum; i < len; i++)\n\t{\n\t\tif (arr[i] != item)\n\t\t\tinsertitem(temp, arr[i]);\n\t}\n\treturn temp;\n}\nint findmaxlen(Node* head)\n{\n\tNode* cur = (Node*)malloc(sizeof(Node));\n\tcur = head;\n\tint maxlen=1;\n\tint tempmax=1;\n\twhile (cur->next != NULL)\n\t{\n\t\tif (cur->data == cur->next->data)\n\t\t\ttempmax++;\n\t\telse\n\t\t{\n\t\t\tif (tempmax > maxlen)\n\t\t\t\tmaxlen = tempmax;\n\t\t\ttempmax = 1;\n\t\t}\n\t\tcur = cur->next;\n\t}\n\tif (tempmax > maxlen)\n\t\tmaxlen = tempmax;\n\treturn maxlen;\n}\n\nint main()\n{\n\tint x;\n\tscanf("%d", &x);\n\tint* p = (int*)malloc(sizeof(int) * x);\n\tfor (int i = 0; i < x; i++)\n\t\tscanf("%d", &p[i]);\n\tint A[1000];\n\tint count = 1;\n\tA[0] = p[0];\n\tfor (int i = 1; i < x; i++)\n\t{\n\t\tint check = 0;\n\t\tfor (int j = 0; j < count; j++)\n\t\t{\n\t\t\tif (p[i] == A[j])\n\t\t\t\tcheck = 1;\n\t\t}\n\t\tif (check == 0)\n\t\t{\n\t\t\tA[count] = p[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tint maxlength = 1;\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tNode* temp = (Node*)malloc(sizeof(Node));\n\t\ttemp = deletednode(p, x, A[i]);\n\t\tint templen = findmaxlen(temp);\n\t\tif (templen > maxlength)\n\t\t\tmaxlength = templen;\n\t}\n\tprintf("%d", maxlength);\n}	0	{"err": null, "data": [{"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 33656832, "output": null, "result": 0, "signal": 0, "cpu_time": 493, "exit_code": 0, "real_time": 522, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1667072, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1687552, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1847296, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1716224, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1753088, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 1998848, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 8, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 2314240, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3194880, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 27, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 4845568, "output": null, "result": 0, "signal": 0, "cpu_time": 53, "exit_code": 0, "real_time": 53, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 15945728, "output": null, "result": 0, "signal": 0, "cpu_time": 214, "exit_code": 0, "real_time": 222, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 21987328, "output": null, "result": 0, "signal": 0, "cpu_time": 321, "exit_code": 0, "real_time": 322, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1687552, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 1761280, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 4800512, "output": null, "result": 0, "signal": 0, "cpu_time": 55, "exit_code": 0, "real_time": 55, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1953792, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 2957312, "output": null, "result": 0, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 25, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 2908160, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 25, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 2887680, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 22, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3031040, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 29, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C	f	{"time_cost": 493, "memory_cost": 33656832}	2016311522	116.126.252.101
8ebf7973d4fc55836e43be4c112df702	2	14	2021-01-05 13:38:56.176037+00	11	# pragma GCC optimize ("O3")\n# pragma GCC optimize ("Ofast")\n# pragma GCC optimize ("unroll-loops")\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#include <queue>\n#include <vector>\n#include <stack>\n#include <string>\n#include <math.h>\n#include <stdlib.h>\n#include <deque>\n\n\n#ifdef _MSC_VER\n#define _CRT_SECURE_NO_WARNINGS\n#endif\n\n#define M 200002\n#define MM 1102\n#define ull unsigned long long\n#define ll long long\n#define ld long double\n\n#define foi(a) for(i=1;i<=a;i++)\n#define foj(a) for(j=1;j<=a;j++)\n#define fok(a) for(k=1;k<=a;k++)\n#define fori for(i=1;i<=n;i++)\n#define forj for(j=1;j<=m;j++)\n#define fork for(k=1;k<=l;k++)\n#define foriw for(i=1;;i++)\n\n#define scann scanf("%lld",&n)\n#define scanm scanf("%lld",&m)\n#define scant scanf("%lld",&t)\n#define scanx scanf("%lld",&x)\n#define scanc scanf("%c",&c)\n#define scanxy scanf("%lld %lld",&x,&y)\n#define scanyx scanf("%lld %lld",&y,&x)\n#define scanwe scanf("%lld %lld",&w,&e)\n#define scannm scanf("%lld %lld",&n,&m)\n#define scanmn scanf("%lld %lld",&m,&n)\n#define scannml scanf("%lld %lld %lld",&n,&m,&l)\n#define scanxyz scanf("%lld %lld %lld",&x,&y,&z)\n#define scanxyzr scanf("%lld %lld %lld %lld",&x,&y,&z,&r)\n#define scans frees; scanf("%s", &s[1]); len = strlen(&s[1]);\n#define scansn frees; scanf("%s", &s[1]); len = strlen(&s[1]); n=len;\n#define scansm frees; scanf("%s", &s[1]); len = strlen(&s[1]); m=len;\n#define scans1 scanf("%s", &s1[1]); len1 = strlen(&s1[1]);\n#define scans2 scanf("%s", &s2[1]); len2 = strlen(&s2[1]);\n#define scana freea; fori scanf("%lld",&a[i]);\n#define scanna scann; fori scanf("%lld",&a[i]);\n#define scana1d fori scanf("%1d",&a[i]);\n#define scanb1d fori scanf("%1d",&b[i]);\n#define scanb fori scanf("%d",&b[i]);\n#define scanaa fori for(ll j=1;j<=m;j++) scanf("%lld",&aa[i][j]);\n#define scanbb fori for(ll j=1;j<=m;j++) scanf("%lld",&bb[i][j]);\n#define scanstr getline(cin,str); slen=str.length();for(int i=slen;i>=1;i--) str[i]=str[i-1]; str[0]=0;\n\n\n\n#define printsum printf("%lld",sum);\n#define printcase printf("Case %lld: ",++casenum);\n#define printcases printf("Case #%lld: ",++casenum);\n#define prints printf("%s",&s[1]);\n#define printc printf("%c",c);\n#define printmax printf("%lld",maxi);\n#define printa fori {printf("%lld ",a[i]); }printf("\\n");\n#define printb fori {printf("%lld ",b[i]); }printf("\\n");\n#define printaa fori {for(ll j=1;j<=m;j++) {printf("%3d ",aa[i][j]);} printf("\\n");}printf("\\n");\n#define printbb fori {for(ll j=1;j<=m;j++) {printf("%3d ",bb[i][j]);} printf("\\n");}printf("\\n");\n\n#define frees for(ll i=0;i<=len+n;i++) s[i]=0;\n#define freea for(ll i=0;i<=n;i++) a[i]=0;\n#define cleana for(ll i=0;i<=n;i++) a[i]=0;\n#define cleanb for(ll i=0;i<=n;i++) b[i]=0;\n#define sorta sort(a+1,a+n+1);\n#define sortb sort(b+1,b+n+1);\n#define suma sum=0; fori sum+=a[i];\n#define infa fori a[i]=INF;\n#define reversea fori tempa[i]=a[n+1-i]; fori a[i]=tempa[i];\n#define findmax maxi=a[1]; fori if(a[i]>maxi) maxi=a[i];\n#define findmaxn maxi=a[1]; fori if(a[i]>maxi) {maxi=a[i]; num=i;}\n#define findmin mini=a[1]; fori if(a[i]<mini) mini=a[i];\n#define issmall(a)      ((a>='a')&&(a<='z'))\n#define isbig(a)      ((a>='A')&&(a<='Z'))\n\n#define lens len = strlen(s);\n#define test printf("TEST!");\n#define wt while(t--)\n#define w1 while(1)\n#define INF 0x7f7f7f7f\n#define br break\n#define braek break\n#define bk break\n#define nbreak if(n==0) break;\n#define boundcheck(tx,ty) if(tx>=1&&ty>=1&&tx<=n&&ty<=m)\n#define strint fori a[i] = s[i] - '0';\n\n#define X first\n#define Y second\n#define fo(i,a,b) for(i = a; i <= b; i++)\n#define pb push_back\n#define mp make_pair\n#define vsort(v) sort(v.begin(),v.end());\n#define sc(a) cin >> a\n#define sc1(a) cin >> a\n#define sc2(a,b) cin >> a >> b\n#define sc3(a,b,c) cin >> a >> b >> c\n#define sc4(a,b,c,d) cin >> a >> b >> c >> d\n#define sc5(a,b,c,d,e) cin >> a >> b >> c >> d >> e\n#define sc6(a,b,c,d,e,f) cin >> a >> b >> c >> d >> e >> f\n\n#define pr(a) cout << (a) \n#define prl cout << '\\n'\n#define pr1(a) cout << (a) << ' '\n#define pr2(a,b) cout << (a) << ' ' << (b) << ' '\n#define pr3(a,b,c) cout << (a) << ' ' << (b) << ' '<< (c) << ' '\n#define pr4(a,b,c,d) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '\n#define pr5(a,b,c,d,e) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' '\n#define pr6(a,b,c,d,e,f) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' ' << (f) << ' '\n#define pr0l cout << '\\n';\n#define pr1l(a) cout << (a) << '\\n'\n#define pr2l(a,b) cout << (a) << ' ' << (b) << '\\n'\n#define pr3l(a,b,c) cout << (a) << ' ' << (b) << ' '<< (c) << '\\n'\n#define pr4l(a,b,c,d) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << '\\n'\n#define pr5l(a,b,c,d,e) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << '\\n'\n#define pr6l(a,b,c,d,e,f) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' ' << (f) << '\\n'\n\n#define prcnt pr(cnt) \n#define prno pr("no") \n#define pryes pr("yes") \n#define prmaxi pr(maxi) \n#define prmax pr(maxi) \n#define prnum pr(num) \n#define prsum printsum\n#define prstr for(ll wq=1;wq<=slen;wq++) pr(str[wq]);\n\nusing namespace std;\nll i, j, ii, jj, n, zz, yyy, xxx, bre, cnt, ans, slen, casenum, nn, hab, count, t, now, one, two, yy, m, yes, cntt, x1, x2, x3, Y1, y2, y3, temp, i1, i2, J1, j2, i3, j3, len1, len2, low, mid, left, right, high, ok, tx, ty, k, start, num, xx, qq, w, e, no, r, sum, x, y, z, l, len, mini = INF, maxi = -INF, x11, x22, x33, y11, y22, y33;\nll dx[5] = { 0,-1,0,1,0 };\nll dy[5] = { 0,0,-1,0,1 };\nll ddx[9] = { 0,-1,-1,-1,0,0,1,1,1 };\nll ddy[9] = { 0,-1,0,1,-1,1,-1,0,1 };\nld ld1, ld2, ld3, ld4, ld5, ld6, ld7;\nll a[M], a1[M], a2[M], a3[M], a4[M], a5[M], bb[MM][MM], habtree[M], mintree[M], maxtree[M];\nll b[M], dp[10][M];\nll d[M], dist[M], aa[MM][MM], d1[M], d2[M], tempa[M];\nbool check[M], visit[M], treecheck[M];\nchar s1[M], s2[M], ss[MM][MM];\nchar s[M];\nchar c1, c2, c, c3, c4;\nld ldmax, ldmin, ldmax1, ldmax2, ldmin1, ldmin2, ldd[M];\n\nstring str, str1;\null u1, u2, u3, u4;\nqueue<int> q;\nqueue<int> qx, qy;\npriority_queue<int> pq;\nstack<int> st;\npair<int, int> p[M];\ndeque<int> dq;\n\nbool boo[10000001];\n\n\nll zegob(ll x, ll y)\n{\n\tll k = 1;\n\tfor (int i = 1; i <= y; i++)\n\t\tk *= x;\n\treturn k;\n}\n\nbool da(char c)\n{\n\tif (c >= 'A' && c <= 'Z')\n\t\treturn true;\n\treturn false;\n}\nbool so(char c)\n{\n\tif (c >= 'a' && c <= 'z')\n\t\treturn true;\n\treturn false;\n}\n\nbool vowel(char c)\n{\n\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\treturn true;\n\treturn false;\n}\n\nint find(int x)\n{\n\tif (d[x] == x)\n\t\treturn x;\n\treturn find(d[x]);\n}\n\nvoid un(int x, int y)\n{\n\tint q = find(x);\n\tint w = find(y);\n\tif (q < w)\n\t\td[w] = q;\n\telse\n\t\td[q] = w;\n}\n\nbool bound(int x, int y)\n{\n\tif (x > 0 && y > 0 && x <= n && y <= m)\n\t\treturn true;\n\treturn false;\n}\n\nbool same(int x, int y)\n{\n\treturn (find(x) == find(y));\n}\n\nll gcd(ll x, ll y)\n{\n\tif (x < y)\n\t\tswap(x, y);\n\tif (y == 0)\n\t\treturn x;\n\treturn gcd(y, x % y);\n}\n\nll bigger(ll x, ll y)\n{\n\tif (x > y)\n\t\treturn x;\n\treturn y;\n}\n\nll smaller(ll x, ll y)\n{\n\tif (x < y)\n\t\treturn x;\n\treturn y;\n}\n\nbool descend(const pair<int, int> & a, const pair<int, int> & b)\n{\n\t//If the first number is same\n\tif (a.first == b.first)\n\t\treturn a.second > b.second; //The second number in Descending order\n\treturn a.first > b.first; //The first number of bigger numbers to move forward -> Descending order\n}\n\nbool ascend(const pair<int, int> & a, const pair<int, int> & b)\n{\n\t//If the first number is same\n\tif (a.first == b.first)\n\t\treturn a.second < b.second; //The second number in Descending order\n\treturn a.first > b.first; //The first number of bigger numbers to move forward -> Descending order\n}\n\nll find_max(long long* a, ll n)\n{\n\tfindmax;\n\treturn maxi;\n}\n\n\nvoid clean(long long* a, int n)\n{\n\tfori\n\t\ta[i] = 0;\n}\n\nll zari(ll n)\n{\n\tk = 10;\n\tforiw\n\t{\n\t\tif (k > n)\n\t\t\treturn i;\n\t\tk *= 10;\n\t}\n}\n\n\nbool zzz(int x, int y, int z)\n{\n\tif (x == 0 && y == 0 && z == 0)\n\t\treturn true;\n\treturn false;\n}\n\nll biggest(int x, int y, int z)\n{\n\tll a[4];\n\ta[1] = x;\n\ta[2] = y;\n\ta[3] = z;\n\tsort(a + 1, a + 4);\n\treturn a[3];\n}\nll smallest(int x, int y, int z)\n{\n\tll a[4];\n\ta[1] = x;\n\ta[2] = y;\n\ta[3] = z;\n\tsort(a + 1, a + 4);\n\treturn a[1];\n}\n\nll maketree_min(int left, int right, int node)\n{\n\tif (left == right)\n\t\treturn mintree[node] = a[left];\n\telse\n\t{\n\t\tint mid = (left + right) / 2;\n\t\tmintree[node] = smaller(maketree_min(left, mid, node * 2), maketree_min(mid + 1, right, node * 2 + 1)); //작은거\n\t\treturn mintree[node];\n\t}\n}\n\nll query_min(int node, int left, int right, int start, int end)\n{\n\tif (right < start || end < left)\n\t\treturn 9876543210; // 겹치지 않는 경우(영향이 없는 값을 반환)\n\tif (start <= left && right <= end) return mintree[node]; // 모두 겹치는 경우\n\tint mid = (left + right) / 2; // 일부만 겹치는 경우\n\treturn smaller(query_min(node * 2, left, mid, start, end), query_min(node * 2 + 1, mid + 1, right, start, end));\n}\n\nll maketree_max(int left, int right, int node)\n{\n\tif (left == right)\n\t\treturn maxtree[node] = a[left];\n\telse\n\t{\n\t\tint mid = (left + right) / 2;\n\t\tmaxtree[node] = bigger(maketree_max(left, mid, node * 2), maketree_max(mid + 1, right, node * 2 + 1)); //작은거\n\t\treturn maxtree[node];\n\t}\n}\n\nll query_max(int node, int left, int right, int start, int end)\n{\n\tif (right < start || end < left)\n\t\treturn -1; // 겹치지 않는 경우(영향이 없는 값을 반환)\n\tif (start <= left && right <= end) return maxtree[node]; // 모두 겹치는 경우\n\tint mid = (left + right) / 2; // 일부만 겹치는 경우\n\treturn bigger(query_max(node * 2, left, mid, start, end), query_max(node * 2 + 1, mid + 1, right, start, end));\n}\n\nll maketree_hab(ll left, ll right, ll node)\n{\n\ttreecheck[node] = 1;\n\tif (left == right)\n\t{\n\t\td[left] = node;\n\t\thabtree[left] = a[left];\n\t\treturn habtree[node];\n\t}\n\telse\n\t{\n\t\tll mid = (left + right) / 2;\n\t\thabtree[node] = (maketree_hab(left, mid, node * 2) + maketree_hab(mid + 1, right, node * 2 + 1) % 1000000007) % 1000000007;\n\t\treturn habtree[node];\n\t}\n}\n\nll query_hab(ll node, ll left, ll right, ll start, ll end)\n{\n\tif (right < start || end < left)\n\t\treturn 0; // 겹치지 않는 경우(영향이 없는 값을 반환)\n\tif (start <= left && right <= end)\n\t\treturn habtree[node]; // 모두 겹치는 경우\n\tll mid = (left + right) / 2; // 일부만 겹치는 경우\n\treturn (query_hab(node * 2, left, mid, start, end)) + (query_hab(node * 2 + 1, mid + 1, right, start, end));\n}\n\n\nvoid update(ll node, ll left, ll right, ll idx)\n{\n\tif (idx<left || idx>right)\n\t\treturn;\n\tif (left == right)\n\t{\n\t\thabtree[node] = 1;\n\t\treturn;\n\t}\n\tll mid = (left + right) / 2;\n\tupdate(node * 2, left, mid, idx);\n\tupdate(node * 2 + 1, mid + 1, right, idx);\n\thabtree[node] = habtree[node * 2] + habtree[node * 2 + 1];\n}\n\nll fact(ll n)\n{\n\tk = 1;\n\tfori\n\t\tk *= i;\n\treturn k;\n}\n\nlong long dfs(long long now, long long visit)\n{\n\tpr2l(now, visit);\n\tif (visit == ((1 << n) - 1))\n\t{\n\t\tdp[now][visit] = ((aa[now][1] == 0) ? INF : aa[now][1]);\n\t\treturn dp[now][visit];\n\t}\n\tif (dp[now][visit] != INF)\n\t\treturn dp[now][visit];\n\tmini = INF;\n\tfor (long long i = 1; i <= n; i++)\n\t{\n\n\t\tif ((visit & (1 << (i - 1))) == 0 && aa[now][i] > 0)\n\t\t{\n\t\t\tdp[now][visit] = smaller(mini, aa[now][i] + dfs(i, (visit | (1 << (i - 1)))));\n\t\t\treturn dp[now][visit];\n\t\t}\n\t}\n}\n\n\n\nvoid re(int x, int lev)\n{\n\ta[lev] = x;\n\tif (lev == m)\n\t{\n\t\tfor (int i = 1; i <= m; i++)\n\t\t\tprintf("%d ", b[a[i]]);\n\t\tprintf("\\n");\n\t\treturn;\n\t}\n\tfori\n\t{\n\t\tif (i != x)\n\t\t{\n\t\t\tcheck[i] = 1;\n\t\t\tre(i, lev + 1);\n\t\t\tcheck[i] = 0;\n\t\t}\n\t}\n}\n\nll reverse(ll x)\n{\n\tll sum = 0;\n\tll t = x;\n\tll z = zari(x);\n\tfoi(z)\n\t{\n\t\tsum += (t % 10) * zegob(10, z - i);\n\t\tt /= 10;\n\t}\n\treturn sum;\n}\n\nll ar[20][20][4];\nvoid f(int w)\n{\n\n}\n\n\nint main(void)\n{\n\tscann;\n\tscana;\n\tfori\n\t\tb[i] = a[i];\n\tsorta;\n\tfori\n\t{\n\t\tif (a[i] != a[i - 1])\n\t\t{\n\t\t\tx = a[i];\n\t\t\tm = n;\n\t\t\ty = 0;\n\t\t\tcnt = 0;\n\t\t\tforj\n\t\t\t{\n\t\t\t\tif (b[j] == x)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (y == b[j])\n\t\t\t\t\tcnt++;\n\t\t\t\telse\n\t\t\t\t\tcnt = 1;\n\t\t\t\ty = b[j];\n\t\t\t\tif (cnt > maxi)\n\t\t\t\t\tmaxi = cnt;\n\t\t\t}\n\t\t}\n\t}\n\tpr(maxi);\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/d997c7c5861147078b2f182218e9777d/main.c:6:10: fatal error: algorithm: No such file or directory\\n #include <algorithm>\\n          ^~~~~~~~~~~\\ncompilation terminated."}	2017311005	211.36.140.32
19c0e4ee53fa0f3b13be79f95a6e6071	2	12	2021-01-05 01:59:10.57298+00	25	List = []\nfor i in range(4):\n   k = int(input())\n   List.append(k)\n    \na = List[0]\nb = List[1]\nc = List[2]\nd = List[3]\n\nif a<b<c<d:\n  print('Uphill')\nelif a>b>c>d:\n  print('Downhill')\nelif a==b==c==d:\n  print('Flat Land')\nelse:\n  print('Unknown')	0	{"err": null, "data": [{"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8978432, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9043968}	2020313223	221.143.30.115
e8ed0a95490dca49132e0849c5938242	2	12	2021-01-05 09:33:01.767822+00	90	num = 4\na = []\nfor i in range(num):\n    a.append(int(input()))\n\nup = sorted(a)\ndown = sorted(a, reverse=True)\n\n\nif len(set(a))==1:\n    print('Flat Land')\n\nelif len(set(a)) != 1:\n    print('Unknown')\n\nelif a == up:\n\n    print('Uphill')\n\nelif a == down:\n    print('Downhill')\n\nelse:\n    print('Unknown')	-1	{"err": null, "data": [{"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9060352, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9105408}	2014310464	1.241.19.62
a9c0cafa899ed373aa11a7d5b5f85470	2	16	2021-01-05 11:46:05.891437+00	12	#include <iostream>\n#include <algorithm>\n\nusing namespace std;\nint N, M;\nlong long maxi = 989898987654321;\nint ty[11];\nint present = 0;\nvoid go(int idx, int remain, long long price)\n{\n    //cout << remain << " " << idx << endl;\n    if (remain == M)\n    {\n        maxi = min(maxi, price);\n        return;\n    }\n    if (remain < M)\n        return;\n    if (idx == N)\n        return;\n    go(idx + 1, present, price);\n    for (int i = 1; i < M; i++)\n    {\n        if (ty[idx] - i == 0)\n            break;\n        go(idx + 1, remain - (ty[idx] * ty[idx]) + ((ty[idx] - i) * (ty[idx] - i)), price + (ty[idx] - i) * (ty[idx] - i));\n    }\n}\nint main()\n{\n    cin >> N >> M;\n    for (int i = 0; i < N; i++)\n        cin >> ty[i], present += ty[i] * ty[i];\n    go(0, present, 0);\n    if (maxi == 989898987654321)\n        cout << -1 << endl;\n    else\n        cout << maxi << endl;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3518464, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "f0682320ccbbb1f1fb1e795de5e5639a"}, {"error": 0, "memory": 3211264, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 1999, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3104768, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "4e732ced3463d06de0ca9a15b6153677"}, {"error": 0, "memory": 3416064, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3362816, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3485696, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3375104, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "4cb811134b9d39fc3104bd06ce75abad"}, {"error": 0, "memory": 3301376, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1998, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3403776, "output": null, "result": 1, "signal": 9, "cpu_time": 1993, "exit_code": 0, "real_time": 1997, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 1999, "memory_cost": 3534848}	2016311327	121.136.228.184
ddac77076edaf2dd41f1a1f9173a4172	2	14	2021-01-05 13:39:36.706621+00	11	# pragma GCC optimize ("O3")\n# pragma GCC optimize ("Ofast")\n# pragma GCC optimize ("unroll-loops")\n#include <stdio.h>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <vector>\n#include <stack>\n#include <string>\n#include <math.h>\n#include <stdlib.h>\n#include <deque>\n\n\n#ifdef _MSC_VER\n#define _CRT_SECURE_NO_WARNINGS\n#endif\n\n#define M 200002\n#define MM 1102\n#define ull unsigned long long\n#define ll long long\n#define ld long double\n\n#define foi(a) for(i=1;i<=a;i++)\n#define foj(a) for(j=1;j<=a;j++)\n#define fok(a) for(k=1;k<=a;k++)\n#define fori for(i=1;i<=n;i++)\n#define forj for(j=1;j<=m;j++)\n#define fork for(k=1;k<=l;k++)\n#define foriw for(i=1;;i++)\n\n#define scann scanf("%lld",&n)\n#define scanm scanf("%lld",&m)\n#define scant scanf("%lld",&t)\n#define scanx scanf("%lld",&x)\n#define scanc scanf("%c",&c)\n#define scanxy scanf("%lld %lld",&x,&y)\n#define scanyx scanf("%lld %lld",&y,&x)\n#define scanwe scanf("%lld %lld",&w,&e)\n#define scannm scanf("%lld %lld",&n,&m)\n#define scanmn scanf("%lld %lld",&m,&n)\n#define scannml scanf("%lld %lld %lld",&n,&m,&l)\n#define scanxyz scanf("%lld %lld %lld",&x,&y,&z)\n#define scanxyzr scanf("%lld %lld %lld %lld",&x,&y,&z,&r)\n#define scans frees; scanf("%s", &s[1]); len = strlen(&s[1]);\n#define scansn frees; scanf("%s", &s[1]); len = strlen(&s[1]); n=len;\n#define scansm frees; scanf("%s", &s[1]); len = strlen(&s[1]); m=len;\n#define scans1 scanf("%s", &s1[1]); len1 = strlen(&s1[1]);\n#define scans2 scanf("%s", &s2[1]); len2 = strlen(&s2[1]);\n#define scana freea; fori scanf("%lld",&a[i]);\n#define scanna scann; fori scanf("%lld",&a[i]);\n#define scana1d fori scanf("%1d",&a[i]);\n#define scanb1d fori scanf("%1d",&b[i]);\n#define scanb fori scanf("%d",&b[i]);\n#define scanaa fori for(ll j=1;j<=m;j++) scanf("%lld",&aa[i][j]);\n#define scanbb fori for(ll j=1;j<=m;j++) scanf("%lld",&bb[i][j]);\n#define scanstr getline(cin,str); slen=str.length();for(int i=slen;i>=1;i--) str[i]=str[i-1]; str[0]=0;\n\n\n\n#define printsum printf("%lld",sum);\n#define printcase printf("Case %lld: ",++casenum);\n#define printcases printf("Case #%lld: ",++casenum);\n#define prints printf("%s",&s[1]);\n#define printc printf("%c",c);\n#define printmax printf("%lld",maxi);\n#define printa fori {printf("%lld ",a[i]); }printf("\\n");\n#define printb fori {printf("%lld ",b[i]); }printf("\\n");\n#define printaa fori {for(ll j=1;j<=m;j++) {printf("%3d ",aa[i][j]);} printf("\\n");}printf("\\n");\n#define printbb fori {for(ll j=1;j<=m;j++) {printf("%3d ",bb[i][j]);} printf("\\n");}printf("\\n");\n\n#define frees for(ll i=0;i<=len+n;i++) s[i]=0;\n#define freea for(ll i=0;i<=n;i++) a[i]=0;\n#define cleana for(ll i=0;i<=n;i++) a[i]=0;\n#define cleanb for(ll i=0;i<=n;i++) b[i]=0;\n#define sorta sort(a+1,a+n+1);\n#define sortb sort(b+1,b+n+1);\n#define suma sum=0; fori sum+=a[i];\n#define infa fori a[i]=INF;\n#define reversea fori tempa[i]=a[n+1-i]; fori a[i]=tempa[i];\n#define findmax maxi=a[1]; fori if(a[i]>maxi) maxi=a[i];\n#define findmaxn maxi=a[1]; fori if(a[i]>maxi) {maxi=a[i]; num=i;}\n#define findmin mini=a[1]; fori if(a[i]<mini) mini=a[i];\n#define issmall(a)      ((a>='a')&&(a<='z'))\n#define isbig(a)      ((a>='A')&&(a<='Z'))\n\n#define lens len = strlen(s);\n#define test printf("TEST!");\n#define wt while(t--)\n#define w1 while(1)\n#define INF 0x7f7f7f7f\n#define br break\n#define braek break\n#define bk break\n#define nbreak if(n==0) break;\n#define boundcheck(tx,ty) if(tx>=1&&ty>=1&&tx<=n&&ty<=m)\n#define strint fori a[i] = s[i] - '0';\n\n#define X first\n#define Y second\n#define fo(i,a,b) for(i = a; i <= b; i++)\n#define pb push_back\n#define mp make_pair\n#define vsort(v) sort(v.begin(),v.end());\n#define sc(a) cin >> a\n#define sc1(a) cin >> a\n#define sc2(a,b) cin >> a >> b\n#define sc3(a,b,c) cin >> a >> b >> c\n#define sc4(a,b,c,d) cin >> a >> b >> c >> d\n#define sc5(a,b,c,d,e) cin >> a >> b >> c >> d >> e\n#define sc6(a,b,c,d,e,f) cin >> a >> b >> c >> d >> e >> f\n\n#define pr(a) cout << (a) \n#define prl cout << '\\n'\n#define pr1(a) cout << (a) << ' '\n#define pr2(a,b) cout << (a) << ' ' << (b) << ' '\n#define pr3(a,b,c) cout << (a) << ' ' << (b) << ' '<< (c) << ' '\n#define pr4(a,b,c,d) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '\n#define pr5(a,b,c,d,e) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' '\n#define pr6(a,b,c,d,e,f) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' ' << (f) << ' '\n#define pr0l cout << '\\n';\n#define pr1l(a) cout << (a) << '\\n'\n#define pr2l(a,b) cout << (a) << ' ' << (b) << '\\n'\n#define pr3l(a,b,c) cout << (a) << ' ' << (b) << ' '<< (c) << '\\n'\n#define pr4l(a,b,c,d) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << '\\n'\n#define pr5l(a,b,c,d,e) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << '\\n'\n#define pr6l(a,b,c,d,e,f) cout << (a) << ' ' << (b) << ' '<< (c) << ' '<< (d) << ' '<< (e) << ' ' << (f) << '\\n'\n\n#define prcnt pr(cnt) \n#define prno pr("no") \n#define pryes pr("yes") \n#define prmaxi pr(maxi) \n#define prmax pr(maxi) \n#define prnum pr(num) \n#define prsum printsum\n#define prstr for(ll wq=1;wq<=slen;wq++) pr(str[wq]);\n\nusing namespace std;\nll i, j, ii, jj, n, zz, yyy, xxx, bre, cnt, ans, slen, casenum, nn, hab, count, t, now, one, two, yy, m, yes, cntt, x1, x2, x3, Y1, y2, y3, temp, i1, i2, J1, j2, i3, j3, len1, len2, low, mid, left, right, high, ok, tx, ty, k, start, num, xx, qq, w, e, no, r, sum, x, y, z, l, len, mini = INF, maxi = -INF, x11, x22, x33, y11, y22, y33;\nll dx[5] = { 0,-1,0,1,0 };\nll dy[5] = { 0,0,-1,0,1 };\nll ddx[9] = { 0,-1,-1,-1,0,0,1,1,1 };\nll ddy[9] = { 0,-1,0,1,-1,1,-1,0,1 };\nld ld1, ld2, ld3, ld4, ld5, ld6, ld7;\nll a[M], a1[M], a2[M], a3[M], a4[M], a5[M], bb[MM][MM], habtree[M], mintree[M], maxtree[M];\nll b[M], dp[10][M];\nll d[M], dist[M], aa[MM][MM], d1[M], d2[M], tempa[M];\nbool check[M], visit[M], treecheck[M];\nchar s1[M], s2[M], ss[MM][MM];\nchar s[M];\nchar c1, c2, c, c3, c4;\nld ldmax, ldmin, ldmax1, ldmax2, ldmin1, ldmin2, ldd[M];\n\nstring str, str1;\null u1, u2, u3, u4;\nqueue<int> q;\nqueue<int> qx, qy;\npriority_queue<int> pq;\nstack<int> st;\npair<int, int> p[M];\ndeque<int> dq;\n\nbool boo[10000001];\n\n\nll zegob(ll x, ll y)\n{\n\tll k = 1;\n\tfor (int i = 1; i <= y; i++)\n\t\tk *= x;\n\treturn k;\n}\n\nbool da(char c)\n{\n\tif (c >= 'A' && c <= 'Z')\n\t\treturn true;\n\treturn false;\n}\nbool so(char c)\n{\n\tif (c >= 'a' && c <= 'z')\n\t\treturn true;\n\treturn false;\n}\n\nbool vowel(char c)\n{\n\tif (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\t\treturn true;\n\treturn false;\n}\n\nint find(int x)\n{\n\tif (d[x] == x)\n\t\treturn x;\n\treturn find(d[x]);\n}\n\nvoid un(int x, int y)\n{\n\tint q = find(x);\n\tint w = find(y);\n\tif (q < w)\n\t\td[w] = q;\n\telse\n\t\td[q] = w;\n}\n\nbool bound(int x, int y)\n{\n\tif (x > 0 && y > 0 && x <= n && y <= m)\n\t\treturn true;\n\treturn false;\n}\n\nbool same(int x, int y)\n{\n\treturn (find(x) == find(y));\n}\n\nll gcd(ll x, ll y)\n{\n\tif (x < y)\n\t\tswap(x, y);\n\tif (y == 0)\n\t\treturn x;\n\treturn gcd(y, x % y);\n}\n\nll bigger(ll x, ll y)\n{\n\tif (x > y)\n\t\treturn x;\n\treturn y;\n}\n\nll smaller(ll x, ll y)\n{\n\tif (x < y)\n\t\treturn x;\n\treturn y;\n}\n\nbool descend(const pair<int, int> & a, const pair<int, int> & b)\n{\n\t//If the first number is same\n\tif (a.first == b.first)\n\t\treturn a.second > b.second; //The second number in Descending order\n\treturn a.first > b.first; //The first number of bigger numbers to move forward -> Descending order\n}\n\nbool ascend(const pair<int, int> & a, const pair<int, int> & b)\n{\n\t//If the first number is same\n\tif (a.first == b.first)\n\t\treturn a.second < b.second; //The second number in Descending order\n\treturn a.first > b.first; //The first number of bigger numbers to move forward -> Descending order\n}\n\nll find_max(long long* a, ll n)\n{\n\tfindmax;\n\treturn maxi;\n}\n\n\nvoid clean(long long* a, int n)\n{\n\tfori\n\t\ta[i] = 0;\n}\n\nll zari(ll n)\n{\n\tk = 10;\n\tforiw\n\t{\n\t\tif (k > n)\n\t\t\treturn i;\n\t\tk *= 10;\n\t}\n}\n\n\nbool zzz(int x, int y, int z)\n{\n\tif (x == 0 && y == 0 && z == 0)\n\t\treturn true;\n\treturn false;\n}\n\nll biggest(int x, int y, int z)\n{\n\tll a[4];\n\ta[1] = x;\n\ta[2] = y;\n\ta[3] = z;\n\tsort(a + 1, a + 4);\n\treturn a[3];\n}\nll smallest(int x, int y, int z)\n{\n\tll a[4];\n\ta[1] = x;\n\ta[2] = y;\n\ta[3] = z;\n\tsort(a + 1, a + 4);\n\treturn a[1];\n}\n\nll maketree_min(int left, int right, int node)\n{\n\tif (left == right)\n\t\treturn mintree[node] = a[left];\n\telse\n\t{\n\t\tint mid = (left + right) / 2;\n\t\tmintree[node] = smaller(maketree_min(left, mid, node * 2), maketree_min(mid + 1, right, node * 2 + 1)); //작은거\n\t\treturn mintree[node];\n\t}\n}\n\nll query_min(int node, int left, int right, int start, int end)\n{\n\tif (right < start || end < left)\n\t\treturn 9876543210; // 겹치지 않는 경우(영향이 없는 값을 반환)\n\tif (start <= left && right <= end) return mintree[node]; // 모두 겹치는 경우\n\tint mid = (left + right) / 2; // 일부만 겹치는 경우\n\treturn smaller(query_min(node * 2, left, mid, start, end), query_min(node * 2 + 1, mid + 1, right, start, end));\n}\n\nll maketree_max(int left, int right, int node)\n{\n\tif (left == right)\n\t\treturn maxtree[node] = a[left];\n\telse\n\t{\n\t\tint mid = (left + right) / 2;\n\t\tmaxtree[node] = bigger(maketree_max(left, mid, node * 2), maketree_max(mid + 1, right, node * 2 + 1)); //작은거\n\t\treturn maxtree[node];\n\t}\n}\n\nll query_max(int node, int left, int right, int start, int end)\n{\n\tif (right < start || end < left)\n\t\treturn -1; // 겹치지 않는 경우(영향이 없는 값을 반환)\n\tif (start <= left && right <= end) return maxtree[node]; // 모두 겹치는 경우\n\tint mid = (left + right) / 2; // 일부만 겹치는 경우\n\treturn bigger(query_max(node * 2, left, mid, start, end), query_max(node * 2 + 1, mid + 1, right, start, end));\n}\n\nll maketree_hab(ll left, ll right, ll node)\n{\n\ttreecheck[node] = 1;\n\tif (left == right)\n\t{\n\t\td[left] = node;\n\t\thabtree[left] = a[left];\n\t\treturn habtree[node];\n\t}\n\telse\n\t{\n\t\tll mid = (left + right) / 2;\n\t\thabtree[node] = (maketree_hab(left, mid, node * 2) + maketree_hab(mid + 1, right, node * 2 + 1) % 1000000007) % 1000000007;\n\t\treturn habtree[node];\n\t}\n}\n\nll query_hab(ll node, ll left, ll right, ll start, ll end)\n{\n\tif (right < start || end < left)\n\t\treturn 0; // 겹치지 않는 경우(영향이 없는 값을 반환)\n\tif (start <= left && right <= end)\n\t\treturn habtree[node]; // 모두 겹치는 경우\n\tll mid = (left + right) / 2; // 일부만 겹치는 경우\n\treturn (query_hab(node * 2, left, mid, start, end)) + (query_hab(node * 2 + 1, mid + 1, right, start, end));\n}\n\n\nvoid update(ll node, ll left, ll right, ll idx)\n{\n\tif (idx<left || idx>right)\n\t\treturn;\n\tif (left == right)\n\t{\n\t\thabtree[node] = 1;\n\t\treturn;\n\t}\n\tll mid = (left + right) / 2;\n\tupdate(node * 2, left, mid, idx);\n\tupdate(node * 2 + 1, mid + 1, right, idx);\n\thabtree[node] = habtree[node * 2] + habtree[node * 2 + 1];\n}\n\nll fact(ll n)\n{\n\tk = 1;\n\tfori\n\t\tk *= i;\n\treturn k;\n}\n\nlong long dfs(long long now, long long visit)\n{\n\tpr2l(now, visit);\n\tif (visit == ((1 << n) - 1))\n\t{\n\t\tdp[now][visit] = ((aa[now][1] == 0) ? INF : aa[now][1]);\n\t\treturn dp[now][visit];\n\t}\n\tif (dp[now][visit] != INF)\n\t\treturn dp[now][visit];\n\tmini = INF;\n\tfor (long long i = 1; i <= n; i++)\n\t{\n\n\t\tif ((visit & (1 << (i - 1))) == 0 && aa[now][i] > 0)\n\t\t{\n\t\t\tdp[now][visit] = smaller(mini, aa[now][i] + dfs(i, (visit | (1 << (i - 1)))));\n\t\t\treturn dp[now][visit];\n\t\t}\n\t}\n}\n\n\n\nvoid re(int x, int lev)\n{\n\ta[lev] = x;\n\tif (lev == m)\n\t{\n\t\tfor (int i = 1; i <= m; i++)\n\t\t\tprintf("%d ", b[a[i]]);\n\t\tprintf("\\n");\n\t\treturn;\n\t}\n\tfori\n\t{\n\t\tif (i != x)\n\t\t{\n\t\t\tcheck[i] = 1;\n\t\t\tre(i, lev + 1);\n\t\t\tcheck[i] = 0;\n\t\t}\n\t}\n}\n\nll reverse(ll x)\n{\n\tll sum = 0;\n\tll t = x;\n\tll z = zari(x);\n\tfoi(z)\n\t{\n\t\tsum += (t % 10) * zegob(10, z - i);\n\t\tt /= 10;\n\t}\n\treturn sum;\n}\n\nll ar[20][20][4];\nvoid f(int w)\n{\n\n}\n\n\nint main(void)\n{\n\tscann;\n\tscana;\n\tfori\n\t\tb[i] = a[i];\n\tsorta;\n\tfori\n\t{\n\t\tif (a[i] != a[i - 1])\n\t\t{\n\t\t\tx = a[i];\n\t\t\tm = n;\n\t\t\ty = 0;\n\t\t\tcnt = 0;\n\t\t\tforj\n\t\t\t{\n\t\t\t\tif (b[j] == x)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (y == b[j])\n\t\t\t\t\tcnt++;\n\t\t\t\telse\n\t\t\t\t\tcnt = 1;\n\t\t\t\ty = b[j];\n\t\t\t\tif (cnt > maxi)\n\t\t\t\t\tmaxi = cnt;\n\t\t\t}\n\t\t}\n\t}\n\tpr(maxi);\n}	0	{"err": null, "data": [{"error": 0, "memory": 3706880, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3731456, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 6, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3690496, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3756032, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3756032, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3600384, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3702784, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3567616, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3723264, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3751936, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3727360, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3735552, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3747840, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3575808, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3731456, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3743744, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 2, "memory_cost": 3756032}	2017311005	211.36.140.32
30949cf17028dc17dd8bd6efdc3738e4	2	13	2021-01-05 14:15:23.877796+00	35	#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nchar list[7]={'H','I','N','O','S','X','Z'};\nchar wordt='F';\nchar check(char test){\n  for(int i=0;i<7;i++){\n    if(list[i]==test){\n      wordt='T';\n      return 0;\n    } \n  }\n}\nint main(void)\n{\n  char *word;\n  scanf("%s",word);\n  for(int i=0;i<strlen(word);i++)\n  {\n    check(word[i]);\n    if(wordt=='T')\n      continue;\n    else\n      break;\n  }\n  if(wordt=='T')\n      printf("YES");\n  else\n      printf("NO");\n}	4	{"err": null, "data": [{"error": 0, "memory": 1486848, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 69, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 1687552, "output": null, "result": 4, "signal": 11, "cpu_time": 0, "exit_code": 0, "real_time": 76, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 1544192, "output": null, "result": 4, "signal": 11, "cpu_time": 0, "exit_code": 0, "real_time": 72, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 1536000, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 77, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 1548288, "output": null, "result": 4, "signal": 11, "cpu_time": 0, "exit_code": 0, "real_time": 74, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 1527808, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 75, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 1589248, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 75, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 1687552, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 73, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 1581056, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 78, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 1581056, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 73, "test_case": "10", "output_md5": null}]}	C	f	{"time_cost": 1, "memory_cost": 1687552}	2019313491	116.37.178.202
442f38440f34be54cac14c5fe6a3485d	2	14	2021-01-05 02:15:19.610527+00	87	n = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\n    \n\nfor i in range(n):\n    b = list(a)\n    c = []\n    for j in range(n):\n        try:\n            if b[j]==b[i]:\n                b.remove(b[j])\n        except IndexError:\n            pass\n            \n    for x in range(n):\n        cnt = 0\n        for y in range(len(b)):\n            try:\n                if b[y] == b[x]:\n                    cnt += 1\n            except IndexError:\n                pass\n        c.append(cnt)\n        \nprint(max(c))	1	{"err": null, "data": [{"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8945664, "output": null, "result": 1, "signal": 9, "cpu_time": 2000, "exit_code": 0, "real_time": 2001, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "c9f0f895fb98ab9159f51fd0297e236d"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9068544, "output": null, "result": -1, "signal": 0, "cpu_time": 114, "exit_code": 0, "real_time": 123, "test_case": "5", "output_md5": "c9f0f895fb98ab9159f51fd0297e236d"}, {"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 118, "exit_code": 0, "real_time": 118, "test_case": "6", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 120, "exit_code": 0, "real_time": 125, "test_case": "7", "output_md5": "8e296a067a37563370ded05f5a3bf3ec"}, {"error": 0, "memory": 9007104, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 8978432, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 2000, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 9011200, "output": null, "result": 1, "signal": 9, "cpu_time": 1995, "exit_code": 0, "real_time": 2000, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 8929280, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2000, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 8716288, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 2000, "test_case": "12", "output_md5": null}, {"error": 0, "memory": 9011200, "output": null, "result": 1, "signal": 9, "cpu_time": 1995, "exit_code": 0, "real_time": 2000, "test_case": "13", "output_md5": null}, {"error": 0, "memory": 9015296, "output": null, "result": 1, "signal": 9, "cpu_time": 1995, "exit_code": 0, "real_time": 2000, "test_case": "14", "output_md5": null}, {"error": 0, "memory": 9003008, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1999, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 8818688, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 2000, "test_case": "16", "output_md5": null}, {"error": 0, "memory": 8990720, "output": null, "result": 1, "signal": 9, "cpu_time": 1994, "exit_code": 0, "real_time": 2000, "test_case": "17", "output_md5": null}, {"error": 0, "memory": 8994816, "output": null, "result": 1, "signal": 9, "cpu_time": 1990, "exit_code": 0, "real_time": 2000, "test_case": "18", "output_md5": null}, {"error": 0, "memory": 9080832, "output": null, "result": 1, "signal": 9, "cpu_time": 1993, "exit_code": 0, "real_time": 1999, "test_case": "19", "output_md5": null}, {"error": 0, "memory": 8998912, "output": null, "result": 1, "signal": 9, "cpu_time": 1996, "exit_code": 0, "real_time": 2002, "test_case": "20", "output_md5": null}, {"error": 0, "memory": 9007104, "output": null, "result": 1, "signal": 9, "cpu_time": 1990, "exit_code": 0, "real_time": 2000, "test_case": "21", "output_md5": null}, {"error": 0, "memory": 8937472, "output": null, "result": 1, "signal": 9, "cpu_time": 1996, "exit_code": 0, "real_time": 2002, "test_case": "22", "output_md5": null}]}	Python3	f	{"time_cost": 2000, "memory_cost": 9080832}	2020314086	14.39.62.140
d319b8a99e120a8d195de5c6e98f809b	2	16	2021-01-05 02:17:14.96825+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nconst int SIZE = 10001;\n\nint m[SIZE];\nbool vis[SIZE] = { false, };\nvector<int> v[SIZE];\n\nint val = 0;\nvoid dfs(int now) {\n\tval += m[now];\n\tvis[now] = true;\n\n\tfor (int next : v[now]) {\n\t\tif (!vis[next]) dfs(next);\n\t}\n}\n\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tint N, M; cin >> N >> M;\n\n\tvector<vector<int>> dp[10001];\n\tvector<int> p;\n\n\tfor (int i = 0; i < N; i++) {\n\t\tint x; cin >> x;\n\t\tp.push_back(x);\n\t}\n\tsort(p.begin(), p.end());\n\n\tfor (int i = 1; i * i <= M; i++) {\n\t\tfor (int j = 1; j <= M; j++) {\n\t\t\tif (j - i * i > 0) {\n\t\t\t\tfor (auto k : dp[j - i * i]) {\n\t\t\t\t\tvector<int> v;\n\t\t\t\t\tv.push_back(i * i);\n\t\t\t\t\tv.insert(v.end(), k.begin(), k.end());\n\n\t\t\t\t\tdp[j].push_back(v);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (j - i * i == 0) {\n\t\t\t\tvector<int> v;\n\t\t\t\tv.push_back(i * i);\n\t\t\t\tdp[j].push_back(v);\n\t\t\t}\n\t\t}\n\t}\n\n\tvector<vector<int>> check;\n\n\tfor (auto j : dp[M]) {\n\t\tif (j.size() == N) {\n\t\t\tsort(j.begin(), j.end());\n\t\t\tcheck.push_back(j);\n\t\t}\n\t}\n\n\tif (check.empty()) cout << -1;\n\telse {\n\t\tint res = 987654321;\n\n\t\tfor(auto i : check){\n\t\t\tint s = 0;\n\n\t\t\tfor (int j = 0; j < i.size(); j++) {\n\t\t\t\ts += pow(p[j] - sqrt(i[j]), 2);\n\t\t\t}\n\t\t\tres = min(res, s);\n\t\t}\n\n\t\tcout << res;\n\t}\n\n\n\treturn 0;\n}	3	{"err": null, "data": [{"error": 0, "memory": 4026368, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 257490944, "output": null, "result": 3, "signal": 31, "cpu_time": 18, "exit_code": 0, "real_time": 165, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 257536000, "output": null, "result": 3, "signal": 31, "cpu_time": 20, "exit_code": 0, "real_time": 161, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 257454080, "output": null, "result": 3, "signal": 31, "cpu_time": 51, "exit_code": 0, "real_time": 196, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 257499136, "output": null, "result": 3, "signal": 31, "cpu_time": 18, "exit_code": 0, "real_time": 165, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 5120000, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 4177920, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4755456, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4386816, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 257400832, "output": null, "result": 3, "signal": 31, "cpu_time": 44, "exit_code": 0, "real_time": 196, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 257388544, "output": null, "result": 3, "signal": 31, "cpu_time": 47, "exit_code": 0, "real_time": 197, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 257495040, "output": null, "result": 3, "signal": 31, "cpu_time": 64, "exit_code": 0, "real_time": 197, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 64, "memory_cost": 257536000}	2020313266	124.53.59.135
412fa659297ceb0800ce6945538bbc55	2	13	2021-01-05 04:13:49.37157+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\n\nint main(void)\n{\n\tint k = 0;\n\tchar S[31];\n\tchar check[8] = { 'H','I','N','O','S','X','Z' };\n\tscanf("%s", S);\n\tfor (int i = 0; S[i]!=NULL; i++) {\n\t\tfor (int j = 0; j < 7; j++) {\n\t\t\tif (S[i] == check[j]) {\n\t\t\t\tk = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t\tk = 0;\n\t\t}\n\t\tif (k == 0) {\n\t\t\tprintf("NO");\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (k == 1)\n\t\tprintf("YES");\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1708032, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1597440, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1708032}	2017314427	122.43.171.120
247b18882cc43e8761b533dcd121267f	2	12	2021-01-05 04:36:46.965023+00	127	int main(void)\n{\n\tint num[4];\n\tfor (int i = 0; i < 4; i++)\n\t\tscanf("%d", &num[i]);\n\tif ((num[0] > num[1] && num[1] > num[2]) && num[2] > num[3])\n\t\tprintf("Downhill");\n\telse if ((num[0] < num[1] && num[1] < num[2]) && num[2] < num[3])\n\t\tprintf("Uphill");\n\telse if ((num[0] == num[1] && num[1] == num[2]) && num[2] == num[3])\n\t\tprintf("Flat Land");\n\telse\n\t\tprintf("Unknown");\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1695744, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1634304, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1581056, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1695744}	2017314427	122.43.171.120
2789bc07431b990e21f594130ecec660	2	13	2021-01-05 06:49:51.874014+00	73	#include <iostream>\n#include <string>\n\nusing namespace std;\n// H I N O S X Z\nstring GetOutput(string str)\n{\n    for(char ch = 'A'; ch <= 'Z'; ch++)\n    {\n        if(ch == 'H' || ch == 'I' || ch == 'N' || ch == 'O' || ch == 'S' || ch == 'X' || ch == 'Z') continue;\n\n        if(str.find(ch) != string::npos) return "NO";\n    }\n\n    return "YES";\n}\n\nint main(void)\n{\n    string str; cin >> str;\n\n    cout << GetOutput(str) << endl;\n\n  return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3579904, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3452928, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3641344}	2020312990	121.133.96.205
a142d5d9b4fc4480622ac4be8fe774d1	2	12	2021-01-05 09:35:45.020319+00	90	num = 4\na = []\nfor i in range(num):\n    a.append(int(input()))\n\nup = sorted(a)\ndown = sorted(a, reverse=True)\n\n\nif len(set(a)) == 1:\n    print('Flat Land')\n\nelse:\n    if len(set(a)) != 4:\n        print('Unknown')\n\n    elif a == up:\n\n        print('Uphill')\n\n    elif a == down:\n        print('Downhill')	0	{"err": null, "data": [{"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 12, "memory_cost": 9023488}	2014310464	1.241.19.62
67720bbc5a24662fb79dcb65e33b2f08	2	16	2021-01-05 02:22:52.753721+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nconst int SIZE = 10001;\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tint N, M; cin >> N >> M;\n\n\tvector<vector<int>> dp[10001];\n\tvector<int> p;\n\n\tfor (int i = 0; i < N; i++) {\n\t\tint x; cin >> x;\n\t\tp.push_back(x);\n\t}\n\tsort(p.begin(), p.end());\n\n\tfor (int i = 1; i * i <= M; i++) {\n\t\tfor (int j = 1; j <= M; j++) {\n\t\t\tif (j - i * i > 0) {\n\t\t\t\tfor (auto k : dp[j - i * i]) {\n\t\t\t\t\tvector<int> v;\n\t\t\t\t\tv.push_back(i * i);\n\t\t\t\t\tv.insert(v.end(), k.begin(), k.end());\n\n\t\t\t\t\tdp[j].push_back(v);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (j - i * i == 0) {\n\t\t\t\tvector<int> v;\n\t\t\t\tv.push_back(i * i);\n\t\t\t\tdp[j].push_back(v);\n\t\t\t}\n\t\t}\n\t}\n\n\tint res = 987654321;\n\tfor (auto j : dp[M]) {\n\t\tif (j.size() == N) {\n\t\t\tsort(j.begin(), j.end());\n\n\t\t\tint s = 0;\n\n\t\t\tfor (int k = 0; k < j.size(); k++) {\n\t\t\t\ts += pow(p[k] - sqrt(j[k]), 2);\n\t\t\t}\n\t\t\tres = min(res, s);\n\n\t\t}\n\t}\n\tif (res == 987654321) cout << -1;\n\telse cout << res;\n\n\treturn 0;\n}	3	{"err": null, "data": [{"error": 0, "memory": 3719168, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 257409024, "output": null, "result": 3, "signal": 31, "cpu_time": 16, "exit_code": 0, "real_time": 160, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 257622016, "output": null, "result": 3, "signal": 31, "cpu_time": 19, "exit_code": 0, "real_time": 162, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 257617920, "output": null, "result": 3, "signal": 31, "cpu_time": 55, "exit_code": 0, "real_time": 198, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 257675264, "output": null, "result": 3, "signal": 31, "cpu_time": 20, "exit_code": 0, "real_time": 163, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 4771840, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3854336, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4575232, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 4050944, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 257560576, "output": null, "result": 3, "signal": 31, "cpu_time": 61, "exit_code": 0, "real_time": 196, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 257667072, "output": null, "result": 3, "signal": 31, "cpu_time": 31, "exit_code": 0, "real_time": 198, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 257413120, "output": null, "result": 3, "signal": 31, "cpu_time": 67, "exit_code": 0, "real_time": 201, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 67, "memory_cost": 257675264}	2020313266	124.53.59.135
25d8812bd581f82d66551af594bef70a	2	12	2021-01-05 11:47:48.500217+00	138	int main(void)\n{\n   int num[4];\n   for (int i = 0; i < 4; i++)\n      scanf("%d", &num[i]);\n   if ((num[0] > num[1] && num[1] > num[2]) && num[2] > num[3])\n      printf("Downhill");\n   else if ((num[0] < num[1] && num[1] < num[2]) && num[2] < num[3])\n      printf("Uphill");\n   else if ((num[0] == num[1] && num[1] == num[2]) && num[2] == num[3])\n      printf("Flat Land");\n   else\n      printf("Unknown");\n   return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1695744, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1634304, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1695744}	2017312332	182.215.66.91
36b697027f280c525eddfac9ea26ce3e	2	16	2021-01-05 02:31:19.334149+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nconst int SIZE = 10001;\n\nint N, M, ans = 987654321;\nvector<int> v, p;\n\nvoid func(int n, int k) {\n\n\tif (n == N) {\n\t\tint sum = 0;\n\t\tfor (int i : v) sum += i;\n\n\t\tif (sum == M) {\n\t\t\tint res = 0;\n\t\t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\t\tres += pow(p[i] - sqrt(v[i]), 2);\n\t\t\t}\n\n\t\t\tans = min(res, ans);\n\t\t}\n\t\treturn;\n\t}\n\tfor (int i = k; i * i <= M; i++) {\n\t\tv.push_back(i * i);\n\t\tfunc(n + 1, i);\n\t\tv.pop_back();\n\t}\n}\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tcin >> N >> M;\n\n\tfor (int i = 0; i < N; i++) {\n\t\tint x; cin >> x;\n\t\tp.push_back(x);\n\t}\n\tsort(p.begin(), p.end());\n\n\tfunc(0, 1);\n\n\tcout << ans;\n\n\treturn 0;\n}	1	{"err": null, "data": [{"error": 0, "memory": 3567616, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 3321856, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2001, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3354624, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3543040, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "6ebe76c9fb411be97b3b0d48b791a7c9"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3555328, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 3485696, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 3219456, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1998, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3309568, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 1999, "memory_cost": 3612672}	2020313266	124.53.59.135
c9468465d9042a929f83303cf807571e	2	13	2021-01-05 13:41:21.469475+00	141	CharList = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nword = input()\nresult = 'YES'\n\nfor i in word :\n    if i not in CharList :\n        result = 'NO'\n        break\n\nprint(result)	4	{"err": null, "data": [{"error": 0, "memory": 7454720, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 14, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7323648, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 1, "real_time": 12, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7458816, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 11, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7442432, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 11, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7417856, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 11, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7397376, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 12, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7364608, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 12, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7323648, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 10, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7467008, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7421952, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 10, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 13, "memory_cost": 7467008}	2018312588	125.130.66.239
60cde9b5ba1ff2f030ac3aae00a747da	2	12	2021-01-05 02:41:23.138017+00	125	#include <stdio.h>\nint main() {\n\tint i = 3;\n\tint numAry[4];\n\tint num = 0;\n\tint count = 0;\n\tint countA = 0;\n\tint countB = 0;\n\tfor(int i = 0; i < 4; i++) {\n\t\tscanf("%d", &num);\n\t\tnumAry[i] = num;\n\t}\n\tfor(int i = 0; i < 3; i++) {\n\t\tif(numAry[i+1] > numAry[i]) {\n\t\t\tcount++;\n\t\t}\n\t\tif(numAry[i+1] < numAry[i]) {\n\t\t\tcountA++;\n\t\t}\n\t\tif(numAry[i+1] == numAry[i]) {\n\t\t\tcountB++;\n\t\t}\n\t}\n\tif(count == 3) {\n\t\tprintf("Uphill");\n\t}\n\telse if(countA == 3) {\n\t\tprintf("Downhill");\n\t}\n\telse if(countB == 3) {\n\t\tprintf("Flat Land");\n\t}\n\telse {\n\t\tprintf("Unknown");\n\t}\n}	0	{"err": null, "data": [{"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1699840}	2020312393	119.206.234.218
9d13a3f9cf8acc65bb92c3c5f72fb563	2	16	2021-01-05 03:02:09.798329+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nconst int SIZE = 10001;\n\nint N, M, ans = 987654321;\nvector<int> v, p;\n\nvoid func(int n, int k, int now) {\n\n\tif (n == N) {\n\t\tfor (int i : v) cout << i << " ";\n\t\tcout << endl;\n\n\t\tint res = 0;\n\t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\tres += pow(p[i] - v[i], 2);\n\t\t}\n\n\t\tans = min(res, ans);\n\t\treturn;\n\t}\n\tfor (int i = k; i * i <= M; i++) {\n\t\tif ((n == N - 1 && now + i * i == M) || (n < N - 1 && now + i * i < M)) {\n\t\t\tv.push_back(i);\n\t\t\tfunc(n + 1, i, now + i * i);\n\t\t\tv.pop_back();\n\t\t}\n\t}\n}\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tcin >> N >> M;\n\n\tfor (int i = 0; i < N; i++) {\n\t\tint x; cin >> x;\n\t\tp.push_back(x);\n\t}\n\tsort(p.begin(), p.end());\n\n\tfunc(0, 1, 0);\n\n\tcout << ans;\n\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3563520, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "3d35f0b4d74f998fb69c27d1f3ce9378"}, {"error": 0, "memory": 3457024, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "a5ad624c16bdc2df73bd40f82b6302d1"}, {"error": 0, "memory": 3305472, "output": null, "result": 1, "signal": 9, "cpu_time": 1944, "exit_code": 0, "real_time": 1997, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3317760, "output": null, "result": 1, "signal": 9, "cpu_time": 1924, "exit_code": 0, "real_time": 1998, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3624960, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "6ebe76c9fb411be97b3b0d48b791a7c9"}, {"error": 0, "memory": 3530752, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "25556225e416f99607f6252b8eade437"}, {"error": 0, "memory": 3510272, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "93ac7dc582b4b7c6f7529ff653a92c88"}, {"error": 0, "memory": 3461120, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "352f6a07a0b21a39134e63e80ab1c756"}, {"error": 0, "memory": 3514368, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "b7117a10b73208b18df90ad3afe6a308"}, {"error": 0, "memory": 3448832, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "41e67cd727dc76a3324bc1683bb6d2c3"}, {"error": 0, "memory": 3416064, "output": null, "result": 1, "signal": 9, "cpu_time": 1890, "exit_code": 0, "real_time": 1999, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3399680, "output": null, "result": 1, "signal": 9, "cpu_time": 1965, "exit_code": 0, "real_time": 1999, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 1965, "memory_cost": 3624960}	2020313266	124.53.59.135
f8f7cbe87fd8ee7495ef72878c032000	2	13	2021-01-05 04:18:03.88728+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\n\nint main(void)\n{\n\tint k = 0;\n\tchar S[31];\n\tchar check[8] = { 'H','I','N','O','S','X','Z' };\n\tscanf("%s", S);\n\tfor (int i = 0; S[i]!=NULL; i++) {\n\t\tfor (int j = 0; j < 7; j++) {\n\t\t\tif (S[i] == check[j]) {\n\t\t\t\tk = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t\tk = 0;\n\t\t}\n\t\tif (k == 0) {\n\t\t\tprintf("NO");\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (k == 1)\n\t\tprintf("YES");\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1662976, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1597440, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1736704}	2017314427	122.43.171.120
bccd904c4571ea9310a45f45b6ab0ce3	2	13	2021-01-05 04:31:56.093361+00	103	a=['H','I','N','O','S','X','Z']\nb=input("단어를 입력하세요:")\nn=0\nwhile True:\n    c=b[n:n+1]\n    if c in a:\n        n+=1\n        continue\n    if n==len(b):\n        print('YES')\n        break\n    else:\n        print('NO')\n        break	-1	{"err": null, "data": [{"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "6c140adab61118dddb77755a4242ca19"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "a406d8bdd753a199729262514ebce92c"}, {"error": 0, "memory": 8847360, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "3", "output_md5": "a406d8bdd753a199729262514ebce92c"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "6c140adab61118dddb77755a4242ca19"}, {"error": 0, "memory": 8916992, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "5", "output_md5": "6c140adab61118dddb77755a4242ca19"}, {"error": 0, "memory": 8900608, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "a406d8bdd753a199729262514ebce92c"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "7", "output_md5": "a406d8bdd753a199729262514ebce92c"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 16, "test_case": "8", "output_md5": "6c140adab61118dddb77755a4242ca19"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "9", "output_md5": "a406d8bdd753a199729262514ebce92c"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "10", "output_md5": "6c140adab61118dddb77755a4242ca19"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9035776}	2017314205	175.117.35.4
e3c3dc572f413244503bd9e974f5eb9f	2	15	2021-01-05 06:50:14.167833+00	103	m,n=input("부원 수를 입력하세요:").split(' ')\nm=int(m)\nn=int(n)\n\nc=[]\ni=1\nwhile True:\n    if i<=m:\n        d=int(input('금액을 입력하세요:'))\n        c.append(d)\n        i+=1\n    else:\n        break\n    \nk=1\nabso=0\nx=[]\nj=1\nwhile j<=m:\n    x.append(0)\n    j+=1\n\nwhile True:\n    if k<=n:\n        a,b=input("친분 관계를 입력하세요:").split(' ')\n        a=int(a)\n        b=int(b)\n    \n        k+=1\n        if c[a]<=c[b] :\n            x[a]-=abs(abs(c[a])-abs(c[b]))\n            x[b]+=abs(abs(c[a])-abs(c[b]))\n    else:\n        break\n\nif sum(x)==0:\n    print("POSSIBLE")\nelse:\n    print('IMPOSSIBLE')	-1	{"err": null, "data": [{"error": 0, "memory": 9076736, "output": null, "result": -1, "signal": 0, "cpu_time": 98, "exit_code": 0, "real_time": 135, "test_case": "1", "output_md5": "5ee0e53780eb7d2cf84144ee4e4ec8da"}, {"error": 0, "memory": 9080832, "output": null, "result": -1, "signal": 0, "cpu_time": 75, "exit_code": 0, "real_time": 127, "test_case": "2", "output_md5": "e6f78cdbda82aa9a9967aa4714705085"}, {"error": 0, "memory": 9228288, "output": null, "result": -1, "signal": 0, "cpu_time": 44, "exit_code": 0, "real_time": 82, "test_case": "3", "output_md5": "cae209823deb744d90ad63c01a8d57ca"}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 103, "exit_code": 0, "real_time": 187, "test_case": "4", "output_md5": "74a7417ac1a79def293f15dfddf194d3"}, {"error": 0, "memory": 9134080, "output": null, "result": -1, "signal": 0, "cpu_time": 47, "exit_code": 0, "real_time": 72, "test_case": "5", "output_md5": "1443706b06b29ca72fc4d40f46c2d692"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 56, "exit_code": 0, "real_time": 89, "test_case": "6", "output_md5": "7acd31fad5825609a9d5ab831361d165"}, {"error": 0, "memory": 9195520, "output": null, "result": -1, "signal": 0, "cpu_time": 63, "exit_code": 0, "real_time": 103, "test_case": "7", "output_md5": "56dd4200b50b45873ac1a385a787d4cc"}, {"error": 0, "memory": 9125888, "output": null, "result": -1, "signal": 0, "cpu_time": 52, "exit_code": 0, "real_time": 76, "test_case": "8", "output_md5": "2317d44e5da2a8266adcd931a25fd668"}, {"error": 0, "memory": 9523200, "output": null, "result": -1, "signal": 0, "cpu_time": 63, "exit_code": 0, "real_time": 110, "test_case": "9", "output_md5": "6c50a1bd73f8b2beb2b7f66bbcf5eded"}]}	Python3	f	{"time_cost": 103, "memory_cost": 9523200}	2017314205	175.117.35.4
25e6d0cafe44b74de9b07f22036b79d9	2	12	2021-01-05 08:11:11.080202+00	133	lista=[]\nfor i in range(4):\n  lista.append(int(input()))\n\nfor i in range(4):\n  if lista[i]!=lista[i+1]:\n    sakasa=True\n\nif sakasa==False:\n  print("Flat land")\n  \nelse:\n  if (lista.sort()==lista):\n    print("Uphill")\n \n  elif (lista.reverse()==lista):\n    print("Downhill")\n  \n  else:\n    print("Unknown")	4	{"err": null, "data": [{"error": 0, "memory": 9031680, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 18, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 9011200, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 16, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9027584, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 12, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9068544, "output": null, "result": 4, "signal": 0, "cpu_time": 17, "exit_code": 1, "real_time": 18, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 9019392, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 17, "test_case": "5", "output_md5": null}]}	Python3	f	{"time_cost": 17, "memory_cost": 9068544}	2020314792	175.116.4.40
76520790aec40fdfe52109ef711302bf	2	16	2021-01-05 03:03:35.046364+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nconst int SIZE = 10001;\n\nint N, M, ans = 987654321;\nvector<int> v, p;\n\nvoid func(int n, int k, int now) {\n\n\tif (n == N) {\n\t\tfor (int i : v) cout << i << " ";\n\t\tcout << endl;\n\n\t\tint res = 0;\n\t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\tres += pow(p[i] - v[i], 2);\n\t\t}\n\n\t\tans = min(res, ans);\n\t\treturn;\n\t}\n\tfor (int i = k; i * i <= M; i++) {\n\t\tif ((n == N - 1 && now + i * i == M) || (n < N - 1 && now + i * i < M)) {\n\t\t\tv.push_back(i);\n\t\t\tfunc(n + 1, i, now + i * i);\n\t\t\tv.pop_back();\n\t\t}\n\t}\n}\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tcin >> N >> M;\n\n\tfor (int i = 0; i < N; i++) {\n\t\tint x; cin >> x;\n\t\tp.push_back(x);\n\t}\n\tsort(p.begin(), p.end());\n\n\tfunc(0, 1, 0);\n\n\n\tif (ans == 987654321) cout << -1;\n\telse cout << ans;\n\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3526656, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "3d35f0b4d74f998fb69c27d1f3ce9378"}, {"error": 0, "memory": 3452928, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "a5ad624c16bdc2df73bd40f82b6302d1"}, {"error": 0, "memory": 3416064, "output": null, "result": 1, "signal": 9, "cpu_time": 1934, "exit_code": 0, "real_time": 1998, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3309568, "output": null, "result": 1, "signal": 9, "cpu_time": 1934, "exit_code": 0, "real_time": 1999, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3526656, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "25556225e416f99607f6252b8eade437"}, {"error": 0, "memory": 3543040, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "93ac7dc582b4b7c6f7529ff653a92c88"}, {"error": 0, "memory": 3612672, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "352f6a07a0b21a39134e63e80ab1c756"}, {"error": 0, "memory": 3461120, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "b7117a10b73208b18df90ad3afe6a308"}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "41e67cd727dc76a3324bc1683bb6d2c3"}, {"error": 0, "memory": 3416064, "output": null, "result": 1, "signal": 9, "cpu_time": 1909, "exit_code": 0, "real_time": 1999, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3407872, "output": null, "result": 1, "signal": 9, "cpu_time": 1925, "exit_code": 0, "real_time": 1997, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 1934, "memory_cost": 3612672}	2020313266	124.53.59.135
7ee5ac8b4fad9d8a0d2746399f951255	2	16	2021-01-05 03:07:23.823289+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nconst int SIZE = 10001;\n\nint N, M, ans = 987654321;\nvector<int> v, p;\n\nvoid func(int n, int k, int now) {\n\n\tif (n == N) {\n\t\tint res = 0;\n\t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\tres += pow(p[i] - v[i], 2);\n\t\t}\n\n\t\tans = min(res, ans);\n\t\treturn;\n\t}\n\tfor (int i = k; i * i <= M; i++) {\n\t\tif ((n == N - 1 && now + i * i == M) || (n < N - 1 && now + i * i < M)) {\n\t\t\tv.push_back(i);\n\t\t\tfunc(n + 1, i, now + i * i);\n\t\t\tv.pop_back();\n\t\t}\n\t}\n}\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tcin >> N >> M;\n\n\tfor (int i = 0; i < N; i++) {\n\t\tint x; cin >> x;\n\t\tp.push_back(x);\n\t}\n\tsort(p.begin(), p.end());\n\n\tfunc(0, 1, 0);\n\n\n\tif (ans == 987654321) cout << -1;\n\telse cout << ans;\n\n\treturn 0;\n}	1	{"err": null, "data": [{"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 3313664, "output": null, "result": 1, "signal": 9, "cpu_time": 2000, "exit_code": 0, "real_time": 2001, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3276800, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1997, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3534848, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 3452928, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 3198976, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 2000, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3309568, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 2000, "memory_cost": 3624960}	2020313266	124.53.59.135
282f4a1dcf37a8159e2effaa06ee7849	2	13	2021-01-05 09:39:59.299736+00	90	word = ['H', 'I', 'O', 'N', 'S', 'X', 'Z']\n\nb=[]\na = input()\nfor i in range(0, len(a)):\n    if a[i] not in word:\n        b.append(a[i])\n\nif len(b) == 0:\n    print('YES')\n\nelse:\n    print('NO')	0	{"err": null, "data": [{"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8851456, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8962048, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 16, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8986624}	2014310464	1.241.19.62
f59c563e7aff0f12492abf22b7d74fc4	2	12	2021-01-05 04:31:12.090879+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\n\nint main(void)\n{\n\tint num[4];\n\tfor (int i = 0; i < 4; i++)\n\t\tscanf("%d", &num[i]);\n\tif ((num[0] > num[1] && num[1] > num[2]) && num[2] > num[3])\n\t\tprintf("Downhill");\n\telse if ((num[0] < num[1] && num[1] < num[2]) && num[2] < num[3])\n\t\tprintf("Uphill");\n\telse if ((num[0] == num[1] && num[1] == num[2]) && num[2] == num[3])\n\t\tprintf("Flat Land");\n\telse\n\t\tprintf("Unknown");\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1740800, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1548288, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1740800}	2017314427	122.43.171.120
24cc6706b5d2f2c58f2cb11817b6309a	2	13	2021-01-05 04:35:03.494504+00	103	a=['H','I','N','O','S','X','Z']\nb=input()\nwhile True:\n    if len(b)>30:\n        b=input()\n    else:\n        break\nn=0\nwhile True:\n    c=b[n:n+1]\n    if c in a:\n        n+=1\n        continue\n    if n==len(b):\n        print('YES')\n        break\n    else:\n        print('NO')\n        break	0	{"err": null, "data": [{"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8847360, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8929280, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8912896, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8933376, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 17, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 13, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8757248, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8945664}	2017314205	175.117.35.4
72bb66616a3960fee69d1f13852e103a	2	16	2021-01-05 03:12:36.884908+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\nconst int SIZE = 10001;\n\nint N, M, ans = 987654321;\nvector<int> v, p;\n\nvoid func(int n, int k, int now) {\n\n\tif (n == N) {\n\t\tint res = 0;\n\t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\tres += pow(p[i] - v[i], 2);\n\t\t}\n\n\t\tans = min(res, ans);\n\t\treturn;\n\t}\n\tfor (int i = k; i * i <= M; i++) {\n\t\tif (now + (N - n) * i * i <= M) {\n\t\t\tv.push_back(i);\n\t\t\tfunc(n + 1, i, now + i * i);\n\t\t\tv.pop_back();\n\t\t}\n\t}\n}\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tcin >> N >> M;\n\n\tfor (int i = 0; i < N; i++) {\n\t\tint x; cin >> x;\n\t\tp.push_back(x);\n\t}\n\tsort(p.begin(), p.end());\n\n\tfunc(0, 1, 0);\n\n\n\tif (ans == 987654321) cout << -1;\n\telse cout << ans;\n\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3608576, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "c15da1f2b5e5ed6e6837a3802f0d1593"}, {"error": 0, "memory": 3366912, "output": null, "result": 1, "signal": 9, "cpu_time": 1991, "exit_code": 0, "real_time": 1997, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3272704, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2000, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "5", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3608576, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "d3d9446802a44259755d38e6d163e820"}, {"error": 0, "memory": 3563520, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "98f13708210194c475687be6106a3b84"}, {"error": 0, "memory": 3624960, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 3424256, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "7f39f8317fbdb1988ef4c628eba02591"}, {"error": 0, "memory": 3309568, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2000, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3252224, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2000, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 1999, "memory_cost": 3624960}	2020313266	124.53.59.135
77686fb3b470901c78873954adcac500	2	13	2021-01-05 04:11:11.680274+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\n\nint main(void)\n{\n\tint k = 0;\n\tchar S[31];\n\tchar check[8] = { 'H','I','N','O','S','X','Z' };\n\tprintf("대문자 문자열을 입력하세용\\n");\n\tscanf("%s", S);\n\tfor (int i = 0; S[i]!=NULL; i++) {\n\t\tfor (int j = 0; j < 7; j++) {\n\t\t\tif (S[i] == check[j]) {\n\t\t\t\tk = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t\tk = 0;\n\t\t}\n\t\tif (k == 0) {\n\t\t\tprintf("NO");\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (k == 1)\n\t\tprintf("YES");\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1622016, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "04c3075f1dd339b3170ac9993259831d"}, {"error": 0, "memory": 1646592, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "d4058594f0a0cbf09171efe51e6e876f"}, {"error": 0, "memory": 1683456, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "d4058594f0a0cbf09171efe51e6e876f"}, {"error": 0, "memory": 1671168, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "04c3075f1dd339b3170ac9993259831d"}, {"error": 0, "memory": 1585152, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "04c3075f1dd339b3170ac9993259831d"}, {"error": 0, "memory": 1708032, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "6", "output_md5": "d4058594f0a0cbf09171efe51e6e876f"}, {"error": 0, "memory": 1732608, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "d4058594f0a0cbf09171efe51e6e876f"}, {"error": 0, "memory": 1658880, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "04c3075f1dd339b3170ac9993259831d"}, {"error": 0, "memory": 1671168, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "d4058594f0a0cbf09171efe51e6e876f"}, {"error": 0, "memory": 1679360, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "04c3075f1dd339b3170ac9993259831d"}]}	C	f	{"time_cost": 1, "memory_cost": 1732608}	2017314427	122.43.171.120
b2a72a076f17458c2ced23e34fbed582	2	12	2021-01-05 04:13:46.199067+00	103	a=float(input("숫자를 입력하세요:"))\nwhile True:\n        if (a<=0) or (a>100):\n                a=float(input("숫자를 다시 입력하세요:"))\n        else:\n                break\n\nb=float(input("숫자를 입력하세요:"))\nwhile True:\n        if (b<=0) or (b>100):\n                b=float(input("숫자를 다시 입력하세요:"))\n        else:\n                break\n\nc=float(input("숫자를 입력하세요:"))\nwhile True:\n        if (c<=0) or (c>100):\n                c=float(input("숫자를 다시 입력하세요:"))\n        else:\n                break\nd=float(input("숫자를 입력하세요:"))\nwhile True:\n        if (d<=0) or (d>100):\n                d=float(input("숫자를 다시 입력하세요:"))\n        else:\n                break\n        \n\n\n\n\nif a>b:\n\tif b>c:\n\t\tif c>d:\n\t\t\tprint("downhill")\n\t\telse:\n\t\t\tprint("unkown")\n\t\t\t\n\telse:\n\t\tprint("unkown")\n\t\t\nif a<b:\n\tif b<c:\n\t\tif c<d:\n\t\t\tprint("uphill")\n\t\telse:\n\t\t\tprint("unkown")\n\t\t\t\n\telse:\n\t\tprint("unkown")\n\t\t\nif a==b:\n\tif b==c:\n\t\tif c==d:\n\t\t\tprint('Flat Land')\n\t\telse:\n\t\t\tprint("Unkown")\n\t\t\t\n\telse:\n\t\tprint("Unkown")	-1	{"err": null, "data": [{"error": 0, "memory": 8855552, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "aa52bf9763ed871b0d2a07badcd8cdf5"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 19, "test_case": "2", "output_md5": "432b7bbaed3f4683ef410015b73d30ac"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "9729018ccafcd8809c1f975c333806a2"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "4739de304d37a38a10def7896f4e0952"}, {"error": 0, "memory": 8892416, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "04213eace292f63d0dd561caf5f28394"}]}	Python3	f	{"time_cost": 19, "memory_cost": 8957952}	2017314205	175.117.35.4
4a9b9eacba234c11abb13835ab20cc09	2	13	2021-01-05 13:44:17.753048+00	141	CharList = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nword = input()\nresult = 'YES'\n\nfor i in word :\n    if i not in CharList :\n        result = 'NO'\n        break\n\nprint(result)	0	{"err": null, "data": [{"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8867840, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8867840, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8908800, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8867840, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 18, "memory_cost": 8953856}	2018312588	125.130.66.239
6f22ca8bb127e327d0e5a0b79c7f97ce	2	12	2021-01-05 04:33:22.670359+00	103	a=float(input())\nwhile True:\n        if (a<=0) or (a>100):\n                a=float(input())\n        else:\n                break\n\nb=float(input())\nwhile True:\n        if (b<=0) or (b>100):\n                b=float(input())\n        else:\n                break\n\nc=float(input())\nwhile True:\n        if (c<=0) or (c>100):\n                c=float(input())\n        else:\n                break\nd=float(input())\nwhile True:\n        if (d<=0) or (d>100):\n                d=float(input())\n        else:\n                break\n        \n\n\n\n\nif a>b:\n\tif b>c:\n\t\tif c>d:\n\t\t\tprint("downhill")\n\t\telse:\n\t\t\tprint("unkown")\n\t\t\t\n\telse:\n\t\tprint("unkown")\n\t\t\nif a<b:\n\tif b<c:\n\t\tif c<d:\n\t\t\tprint("uphill")\n\t\telse:\n\t\t\tprint("unkown")\n\t\t\t\n\telse:\n\t\tprint("unkown")\n\t\t\nif a==b:\n\tif b==c:\n\t\tif c==d:\n\t\t\tprint('Flat Land')\n\t\telse:\n\t\t\tprint("Unkown")\n\t\t\t\n\telse:\n\t\tprint("Unkown")	-1	{"err": null, "data": [{"error": 0, "memory": 8867840, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8876032, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "5e1750c4969c60b0682467a888e9b2c0"}, {"error": 0, "memory": 8859648, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}, {"error": 0, "memory": 8982528, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "b93677d8005fe649edda8bab395ecca6"}, {"error": 0, "memory": 8925184, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "aaf0abac956e57b44fd99eaeb270e72f"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8982528}	2017314205	175.117.35.4
af8e01d253b104cde2d98f3d644c523a	2	12	2021-01-05 04:35:32.204459+00	103	a=float(input())\n\nb=float(input())\n\n\nc=float(input())\n\nd=float(input())\n\n        \n\n\n\n\nif a>b:\n\tif b>c:\n\t\tif c>d:\n\t\t\tprint("downhill")\n\t\telse:\n\t\t\tprint("unkown")\n\t\t\t\n\telse:\n\t\tprint("unkown")\n\t\t\nif a<b:\n\tif b<c:\n\t\tif c<d:\n\t\t\tprint("uphill")\n\t\telse:\n\t\t\tprint("unkown")\n\t\t\t\n\telse:\n\t\tprint("unkown")\n\t\t\nif a==b:\n\tif b==c:\n\t\tif c==d:\n\t\t\tprint('Flat Land')\n\t\telse:\n\t\t\tprint("Unkown")\n\t\t\t\n\telse:\n\t\tprint("Unkown")	-1	{"err": null, "data": [{"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8949760, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "5e1750c4969c60b0682467a888e9b2c0"}, {"error": 0, "memory": 8986624, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "b93677d8005fe649edda8bab395ecca6"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "aaf0abac956e57b44fd99eaeb270e72f"}]}	Python3	f	{"time_cost": 11, "memory_cost": 9039872}	2017314205	175.117.35.4
ca4136a82ab4157f951c4022588b9f6f	2	14	2021-01-05 10:45:22.309+00	12	#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\nint n;\nbool flag[1000001];\nvector<int> v;\nint ans = 0;\nvoid check(int idx, int value, int length, int f)\n{\n    ans = max(ans, length);\n    if (idx > v.size())\n        return;\n    if (f == v[idx])\n    {\n        check(idx + 1, value, length, f);\n    }\n    else if (value == v[idx])\n        check(idx + 1, value, length + 1, f);\n    else\n        check(idx + 1, v[idx], 1, f);\n}\nint main()\n{\n    cin >> n;\n    v.resize(n);\n    for (int i = 0; i < n; i++)\n    {\n        cin >> v[i];\n    }\n    for (int i = 0; i < v.size(); i++)\n    {\n        if (flag[v[i]])\n            continue;\n        check(1, v[0], 1, v[i]);\n        flag[v[i]] = 1;\n    }\n    cout << ans << endl;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3375104, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 8, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3604480, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3665920, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 4, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3637248, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3768320, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 4399104, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 4313088, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 6, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3371008, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3596288, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3706880, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 3, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3723264, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 4, "memory_cost": 4399104}	2016311327	121.136.228.184
62ec5bc8de34ec3f048938139db6ab5b	2	12	2021-01-05 11:48:29.209321+00	138	int main(void)\n{\n   int num[4];\n   for (int a = 0; a < 4; a++)\n      scanf("%d", &num[a]);\n   if ((num[0] > num[1] && num[1] > num[2]) && num[2] > num[3])\n      printf("Downhill");\n   else if ((num[0] < num[1] && num[1] < num[2]) && num[2] < num[3])\n      printf("Uphill");\n   else if ((num[0] == num[1] && num[1] == num[2]) && num[2] == num[3])\n      printf("Flat Land");\n   else\n      printf("Unknown");\n   return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1597440, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1687552, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1687552}	2017312332	182.215.66.91
c875897a4fb7eb6c06d4c804e186f2c8	2	14	2021-01-05 14:50:53.217786+00	141	cnt = int(input()) #사람 수\ncntList = [] #같은 수의 붕어빵을 사려고 하는 사람들이 연속된 수\nnumList = [] #붕어빵 수\ncnt2 = 0 #새로운 배열의 길이\nmaxNum = 0\nlineNum = 0\ncntNum = 0\nmissNum = 0\n\nfor i in range(cnt) :\n    num = int(input())\n    if i == 0 :\n        cntList.append(1)\n        numList.append(num)\n    elif num == numList[cnt2] :\n        cntList[cnt2] += 1\n    else :\n        cntList.append(1)\n        numList.append(num)\n        if cntList[cnt2] > maxNum :\n            maxNum = cntList[cnt2]\n        cnt2 += 1    \n\nfor i in range(cnt2-1) :\n    # print(maxNum)\n    if numList[i] == numList[i+2] :\n        missNum = numList[i+1]\n        cntNum = numList[i]\n        lineNum = cntList[i] + cntList[i+2]\n        for j in range(i+3, cnt2+1) :\n            if numList[j] == cntNum :\n                lineNum += cntList[j]\n            elif numList[j] == missNum :\n                continue\n            else :\n                break\n        if lineNum > maxNum :\n            maxNum = lineNum\n\nprint(maxNum)	-1	{"err": null, "data": [{"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8933376, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8982528, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 13, "test_case": "5", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 24, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9097216, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 21, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8830976, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9129984, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8974336, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9048064, "output": null, "result": 0, "signal": 0, "cpu_time": 34, "exit_code": 0, "real_time": 34, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 15, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 20, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 13, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 8970240, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 9113600, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 17, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 34, "memory_cost": 9129984}	2018312588	125.130.66.239
6b666d727d2cf657a37dc468162ad03c	2	13	2021-01-05 14:29:33.492726+00	142	word = input()\ni = 0\nwhile i < len(word):\n  if word[i] != 'H' or 'I' or 'N' or 'O' or 'S' or 'X' or 'Z'\n    print("NO")\n    return\n  i += 1\nprint("YES")	-2	{}	Python2	f	{"score": 0, "err_info": "File \\"/judger/run/4052faffa3754cc599a746a74bcbeac5/solution.py\\", line 4\\n    if word[i] != 'H' or 'I' or 'N' or 'O' or 'S' or 'X' or 'Z'\\n                                                              ^\\nSyntaxError: invalid syntax"}	2020311733	1.225.26.118
48395bb5ffe2b8824a6f7b9c57cc9435	2	12	2021-01-05 04:36:27.865068+00	103	a=int(input())\n\nb=int(input())\n\n\nc=int(input())\n\nd=int(input())\n\n        \n\n\n\n\nif a>b:\n\tif b>c:\n\t\tif c>d:\n\t\t\tprint("downhill")\n\t\telse:\n\t\t\tprint("unkown")\n\t\t\t\n\telse:\n\t\tprint("unkown")\n\t\t\nif a<b:\n\tif b<c:\n\t\tif c<d:\n\t\t\tprint("uphill")\n\t\telse:\n\t\t\tprint("unkown")\n\t\t\t\n\telse:\n\t\tprint("unkown")\n\t\t\nif a==b:\n\tif b==c:\n\t\tif c==d:\n\t\t\tprint('Flat Land')\n\t\telse:\n\t\t\tprint("Unkown")\n\t\t\t\n\telse:\n\t\tprint("Unkown")	-1	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "5e1750c4969c60b0682467a888e9b2c0"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "b93677d8005fe649edda8bab395ecca6"}, {"error": 0, "memory": 8896512, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "aaf0abac956e57b44fd99eaeb270e72f"}]}	Python3	f	{"time_cost": 16, "memory_cost": 9027584}	2017314205	175.117.35.4
2468e86974d60bc1e58f68896a6b605c	2	12	2021-01-05 04:38:12.935316+00	103	a=int(input())\n\nb=int(input())\n\n\nc=int(input())\n\nd=int(input())\n\n\n\nif a>b:\n\tif b>c:\n\t\tif c>d:\n\t\t\tprint("Downhill")\n\t\telse:\n\t\t\tprint("Unkown")\n\t\t\t\n\telse:\n\t\tprint("Unkown")\n\t\t\nif a<b:\n\tif b<c:\n\t\tif c<d:\n\t\t\tprint("Uphill")\n\t\telse:\n\t\t\tprint("Unkown")\n\t\t\t\n\telse:\n\t\tprint("Unkown")\n\t\t\nif a==b:\n\tif b==c:\n\t\tif c==d:\n\t\t\tprint('Flat Land')\n\t\telse:\n\t\t\tprint("Unkown")\n\t\t\t\n\telse:\n\t\tprint("Unkown")	-1	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9035776}	2017314205	175.117.35.4
cc258b1304c857466835904a0f083ad1	2	12	2021-01-05 04:40:13.531875+00	103	a=input()\n\nb=input()\n\n\nc=input()\n\nd=input()\n\n\n\nif a>b:\n\tif b>c:\n\t\tif c>d:\n\t\t\tprint("Downhill")\n\t\telse:\n\t\t\tprint("Unkown")\n\t\t\t\n\telse:\n\t\tprint("Unkown")\n\t\t\nif a<b:\n\tif b<c:\n\t\tif c<d:\n\t\t\tprint("Uphill")\n\t\telse:\n\t\t\tprint("Unkown")\n\t\t\t\n\telse:\n\t\tprint("Unkown")\n\t\t\nif a==b:\n\tif b==c:\n\t\tif c==d:\n\t\t\tprint('Flat Land')\n\t\telse:\n\t\t\tprint("Unkown")\n\t\t\t\n\telse:\n\t\tprint("Unkown")	-1	{"err": null, "data": [{"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 22, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8863744, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 22, "test_case": "5", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}]}	Python3	f	{"time_cost": 22, "memory_cost": 8953856}	2017314205	175.117.35.4
3125855a676177a4e5714ef6a4484064	2	13	2021-01-05 04:45:55.332817+00	129	char = ['H', 'I', 'N', 'O', 'S', 'X', 'Z']\nword = input('')\n\n\nif all (_ in char for _ in word):\n    print ('YES')\nelse:\n    print('NO')	0	{"err": null, "data": [{"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 20, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 20, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8785920, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8736768, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 18, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8785920, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	Python3	f	{"time_cost": 18, "memory_cost": 8994816}	2020312542	1.238.234.94
bfe27e4231689ba04e1027dfc80bfdd1	2	12	2021-01-05 08:10:27.340521+00	133	lista=[]\nWhile i in range(4):\n  lista.append(int(input()))\n\nfor i in range(4):\n  if lista[i]!=lista[i+1]:\n    sakasa=True\n\nif sakasa==False:\n  print("Flat land")\n  \nelse:\n  if (lista.sort()=lista):\n    print("Uphill")\n \n  elif (lista.reverse()=lista):\n    print("Downhill")\n  \n  else:\n    print("Unknown")	-2	{}	Python3	f	{"score": 0, "err_info": "File \\"/judger/run/565c1876e3ee486683d49bb3643266ed/solution.py\\", line 2\\n    While i in range(4):\\n          ^\\nSyntaxError: invalid syntax"}	2020314792	175.116.4.40
f7621a817bd73f59cfaec53e88f33a5d	2	12	2021-01-05 04:44:35.456392+00	103	a=float(input())\nwhile True:\n        if (a<=0) or (a>100):\n                a=float(input())\n        else:\n                break\n\nb=float(input())\nwhile True:\n        if (b<=0) or (b>100):\n                b=float(input())\n        else:\n                break\n\nc=float(input())\nwhile True:\n        if (c<=0) or (c>100):\n                c=float(input())\n        else:\n                break\nd=float(input())\nwhile True:\n        if (d<=0) or (d>100):\n                d=float(input())\n        else:\n                break\n        \n\n\n\n\nif a>b:\n\tif b>c:\n\t\tif c>d:\n\t\t\tprint("downhill")\n\t\telse:\n\t\t\tprint("unnkown")\n\t\t\t\n\telse:\n\t\tprint("unknown")\n\t\t\nif a<b:\n\tif b<c:\n\t\tif c<d:\n\t\t\tprint("uphill")\n\t\telse:\n\t\t\tprint("unknown")\n\t\t\t\n\telse:\n\t\tprint("unknown")\n\t\t\nif a==b:\n\tif b==c:\n\t\tif c==d:\n\t\t\tprint('Flat Land')\n\t\telse:\n\t\t\tprint("Unknown")\n\t\t\t\n\telse:\n\t\tprint("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 8904704, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "5e1750c4969c60b0682467a888e9b2c0"}, {"error": 0, "memory": 8916992, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "b93677d8005fe649edda8bab395ecca6"}, {"error": 0, "memory": 8900608, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "6ca2091c1066f77f467bd17973687100"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8945664}	2017314205	175.117.35.4
fca3389b7ee30fe822021020ea0e1569	2	13	2021-01-05 15:49:25.401329+00	145	#include <stdio.h>\n\nchar str[100];\nint isOkay[256];\n\nint main(void) {\n  int ret = 1;\n  scanf("%s", str);\n  isOkay['H'] = isOkay['I'] = isOkay['N'] = isOkay['O'] = isOkay['S'] = isOkay['X'] = isOkay['Z'] = 1;\n  \n  for (int i = 0; str[i] != '\\0'; ++i) {\n    if (!str[i]) {\n      ret = 0;\n      break;\n    }\n  }\n  \n  if (ret) {\n    printf("YES");\n  } else {\n    printf("NO");\n  }\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1609728, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1585152, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1597440, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1683456, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1712128, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "10", "output_md5": "7469a286259799e5b37e5db9296f00b3"}]}	C	f	{"time_cost": 1, "memory_cost": 1712128}	2015314758	211.208.96.4
e9607582ec2a883880dbeb3328d1ba4a	2	12	2021-01-05 04:45:48.887748+00	103	a=float(input())\nwhile True:\n        if (a<=0) or (a>100):\n                a=float(input())\n        else:\n                break\n\nb=float(input())\nwhile True:\n        if (b<=0) or (b>100):\n                b=float(input())\n        else:\n                break\n\nc=float(input())\nwhile True:\n        if (c<=0) or (c>100):\n                c=float(input())\n        else:\n                break\nd=float(input())\nwhile True:\n        if (d<=0) or (d>100):\n                d=float(input())\n        else:\n                break\n        \n\n\n\n\nif a>b:\n\tif b>c:\n\t\tif c>d:\n\t\t\tprint("Downhill")\n\t\telse:\n\t\t\tprint("Unnkown")\n\t\t\t\n\telse:\n\t\tprint("Unknown")\n\t\t\nif a<b:\n\tif b<c:\n\t\tif c<d:\n\t\t\tprint("Uphill")\n\t\telse:\n\t\t\tprint("Unknown")\n\t\t\t\n\telse:\n\t\tprint("Unknown")\n\t\t\nif a==b:\n\tif b==c:\n\t\tif c==d:\n\t\t\tprint('Flat Land')\n\t\telse:\n\t\t\tprint("Unknown")\n\t\t\t\n\telse:\n\t\tprint("Unknown")	-1	{"err": null, "data": [{"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8863744, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8859648, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8896512, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8892416, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "5", "output_md5": "8cce6e46490e25e77b3764981a124a9e"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8945664}	2017314205	175.117.35.4
da5646be9ef4e57d875ed21fd82fc1fe	2	15	2021-01-05 06:11:03.982496+00	103	m,n=input("부원 수를 입력하세요:").split(' ')\nm=int(m)\nn=int(n)\n\nc=[]\ni=1\nwhile True:\n    if i<=m:\n        d=int(input('금액을 입력하세요:'))\n        c.append(d)\n        i+=1\n    else:\n        break\n    \nk=1\nabso=0\nwhile True:\n    if k<=n:\n        a,b=input("친분 관계를 입력하세요:").split(' ')\n        a=int(a)\n        b=int(b)\n    \n        k+=1\n        if c[a]>=c[b]:\n            dif=c[a]-c[b]\n        else:\n            dif=c[b]-c[a]\n\n        abso+=dif\n    else:\n        break\n\nif dif>0:\n    print("POSSIBLE")\nelse:\n    print('IMPOSSIBLE')	-1	{"err": null, "data": [{"error": 0, "memory": 9072640, "output": null, "result": -1, "signal": 0, "cpu_time": 66, "exit_code": 0, "real_time": 122, "test_case": "1", "output_md5": "5ee0e53780eb7d2cf84144ee4e4ec8da"}, {"error": 0, "memory": 9072640, "output": null, "result": -1, "signal": 0, "cpu_time": 85, "exit_code": 0, "real_time": 139, "test_case": "2", "output_md5": "e6f78cdbda82aa9a9967aa4714705085"}, {"error": 0, "memory": 8970240, "output": null, "result": -1, "signal": 0, "cpu_time": 41, "exit_code": 0, "real_time": 87, "test_case": "3", "output_md5": "cae209823deb744d90ad63c01a8d57ca"}, {"error": 0, "memory": 9064448, "output": null, "result": -1, "signal": 0, "cpu_time": 93, "exit_code": 0, "real_time": 173, "test_case": "4", "output_md5": "74a7417ac1a79def293f15dfddf194d3"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 36, "exit_code": 0, "real_time": 78, "test_case": "5", "output_md5": "1443706b06b29ca72fc4d40f46c2d692"}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 31, "exit_code": 0, "real_time": 68, "test_case": "6", "output_md5": "7acd31fad5825609a9d5ab831361d165"}, {"error": 0, "memory": 9039872, "output": null, "result": -1, "signal": 0, "cpu_time": 40, "exit_code": 0, "real_time": 110, "test_case": "7", "output_md5": "56dd4200b50b45873ac1a385a787d4cc"}, {"error": 0, "memory": 9035776, "output": null, "result": -1, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 64, "test_case": "8", "output_md5": "2317d44e5da2a8266adcd931a25fd668"}, {"error": 0, "memory": 9187328, "output": null, "result": -1, "signal": 0, "cpu_time": 63, "exit_code": 0, "real_time": 116, "test_case": "9", "output_md5": "6c50a1bd73f8b2beb2b7f66bbcf5eded"}]}	Python3	f	{"time_cost": 93, "memory_cost": 9187328}	2017314205	175.117.35.4
e4732cd0ee05611224de54e5b3ff64ad	2	12	2021-01-05 08:10:50.635159+00	133	lista=[]\nfor i in range(4):\n  lista.append(int(input()))\n\nfor i in range(4):\n  if lista[i]!=lista[i+1]:\n    sakasa=True\n\nif sakasa==False:\n  print("Flat land")\n  \nelse:\n  if (lista.sort()=lista):\n    print("Uphill")\n \n  elif (lista.reverse()=lista):\n    print("Downhill")\n  \n  else:\n    print("Unknown")	-2	{}	Python3	f	{"score": 0, "err_info": "File \\"/judger/run/d02ede22195f47f19ff80d9debabd04f/solution.py\\", line 13\\n    if (lista.sort()=lista):\\n                    ^\\nSyntaxError: invalid syntax"}	2020314792	175.116.4.40
72661930882ecdca1b5331dba010530e	2	12	2021-01-05 08:19:28.431441+00	132	def main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    d = int(input())\n    o = [a,b,c,d]\n    h = sorted(o)\n\n    if len(set(o))==1:\n        print("Flat Land")\n    elif len(o) != len(set(o)):\n        print("Unknown")\n    elif o == h:\n        print("Uphill")\n    else:\n        print("Downhill")\n    \nif __name__ == '__main__':\n    main()	0	{"err": null, "data": [{"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9039872}	2018311840	211.212.221.2
bbd64636c53dde59a751ffdbcbdd9765	2	12	2021-01-05 04:46:06.015679+00	103	a=float(input())\nwhile True:\n        if (a<=0) or (a>100):\n                a=float(input())\n        else:\n                break\n\nb=float(input())\nwhile True:\n        if (b<=0) or (b>100):\n                b=float(input())\n        else:\n                break\n\nc=float(input())\nwhile True:\n        if (c<=0) or (c>100):\n                c=float(input())\n        else:\n                break\nd=float(input())\nwhile True:\n        if (d<=0) or (d>100):\n                d=float(input())\n        else:\n                break\n        \n\n\n\n\nif a>b:\n\tif b>c:\n\t\tif c>d:\n\t\t\tprint("Downhill")\n\t\telse:\n\t\t\tprint("Unknown")\n\t\t\t\n\telse:\n\t\tprint("Unknown")\n\t\t\nif a<b:\n\tif b<c:\n\t\tif c<d:\n\t\t\tprint("Uphill")\n\t\telse:\n\t\t\tprint("Unknown")\n\t\t\t\n\telse:\n\t\tprint("Unknown")\n\t\t\nif a==b:\n\tif b==c:\n\t\tif c==d:\n\t\t\tprint('Flat Land')\n\t\telse:\n\t\t\tprint("Unknown")\n\t\t\t\n\telse:\n\t\tprint("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8900608, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8871936, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 14, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8953856}	2017314205	175.117.35.4
3711293878a43af4eeda0c1851bb6b68	2	16	2021-01-05 10:53:19.360379+00	111	N, M = list(map(int,input().split(' ')))\ntails = []\ncost = 0\nck = False\n\n\nfor _ in range(N):\n    tails.append(int(input()))\n\ntails.sort(reverse=True)\n\nfor i in tails:\n    temp = i\n    while i**2 > M:\n        i-=1\n    cost += (temp-i)**2\n    M -= i**2\n    if M == 0:\n        ck = True\n        break\nif ck:\n    print(cost)\nelse:\n    print(-1)	-1	{"err": null, "data": [{"error": 0, "memory": 8986624, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 21, "test_case": "2", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "cfcd208495d565ef66e7dff9f98764da"}, {"error": 0, "memory": 9109504, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "024677efb8e4aee2eaeef17b54695bbe"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9105408, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "34173cb38f07f89ddbebc2ac9128303f"}, {"error": 0, "memory": 9146368, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "1f0e3dad99908345f7439f8ffabdffc4"}, {"error": 0, "memory": 9015296, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "9", "output_md5": "9778d5d219c5080b9a6a17bef029331c"}, {"error": 0, "memory": 9011200, "output": null, "result": -1, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 20, "test_case": "10", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 8953856, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "11", "output_md5": "7684e5225ab986f6b32ed950eec5621d"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "12", "output_md5": "79121bb953a3bd47c076f20234bafd2e"}]}	Python3	f	{"time_cost": 20, "memory_cost": 9146368}	2015313992	175.192.247.176
897acd95adb837bb4c32cc22e986f128	2	15	2021-01-05 05:22:22.802131+00	72	#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<vector>\nusing namespace std;\nvoid DFS(int idx);\nint N, M, visit[10000], arr[10000], score=0;\nvector<int> v[10000];\nint main(){\n    memset(visit, 0, sizeof(visit));\n    cin >> N >> M;\n    for(int i=0; i<N; i++) cin >> arr[i];\n    int x, y;\n    for(int i=0; i<M; i++) {\n        cin >> x >> y;\n        v[x].push_back(y);\n        v[y].push_back(x);\n    }\n    for(int i=0; i<N; i++){\n        if(!visit[i]) {\n            DFS(i);\n            if(score != 0) {\n                cout << "IMPOSSIBLE";\n                return 0;\n            }\n        }\n    }\n    cout << "POSSIBLE";\n    return 0;\n}\n\nvoid DFS(int idx){\n    visit[idx] = 1;\n    score += arr[idx];\n    for(int i=0; i<v[idx].size(); i++){\n        if(!visit[v[idx][i]]) {\n            DFS(v[idx][i]);\n        }\n    }\n    return;\n}	0	{"err": null, "data": [{"error": 0, "memory": 4382720, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4227072, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4169728, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4534272, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 23, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4014080, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3997696, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 9, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4169728, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 4018176, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 8, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4243456, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 23, "memory_cost": 4534272}	9967han	222.112.181.211
527467d3bae9198076cd1ee115ba291f	2	16	2021-01-05 06:08:02.651381+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\n\nint N, M;\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tcin >> N >> M;\n\tvector<int> v, a;\n\n\tint now = 0;\n\tfor (int i = 0; i < N; i++) {\n\t\tint x; cin >> x;\n\t\tnow += x * x;\n\t\tv.push_back(x);\n\t\ta.push_back(x);\n\t}\n\tsort(v.begin(), v.end());\n\tsort(a.begin(), a.end());\n\n\tif (now > M) {\n\t\twhile (1) {\n\t\t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\t\tif (a[i] > 1) {\n\t\t\t\t\ta[i]--;\n\t\t\t\t\tnow -= 2 * a[i] + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsort(a.begin(), a.end());\n\t\t\tif (now == M) {\n\t\t\t\tint ans = 0;\n\t\t\t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\t\t\tans += pow(v[i] - a[i], 2);\n\t\t\t\t}\n\t\t\t\tcout << ans; return 0;\n\t\t\t}\n\t\t\telse if (now < M) {\n\t\t\t\tcout << -1; return 0;\n\t\t\t}\n\t\t}\n\t}\n\telse if (now < M) {\n\t\twhile (1) {\n\t\t\ta[0]++;\n\t\t\tnow += 2 * a[0] - 1;\n\t\t\tsort(a.begin(), a.end());\n\n\t\t\tif (now == M) {\n\t\t\t\tint ans = 0;\n\t\t\t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\t\t\tans += pow(v[i] - a[i], 2);\n\t\t\t\t}\n\t\t\t\tcout << ans; return 0;\n\t\t\t}\n\t\t\telse if (now > M) {\n\t\t\t\tcout << -1; return 0;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tcout << 0; return 0;\n\t}\n\n\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3444736, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3555328, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3661824, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3432448, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3489792, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3592192, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3629056, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "182be0c5cdcd5072bb1864cdee4d3d6e"}, {"error": 0, "memory": 3465216, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3473408, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "ec8956637a99787bd197eacd77acce5e"}, {"error": 0, "memory": 3559424, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3547136, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "11", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3489792, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "12", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}]}	C++	f	{"time_cost": 2, "memory_cost": 3661824}	2020313266	124.53.59.135
772e1a737718a6d399bb845e0cd8420a	2	16	2021-01-05 06:35:34.684386+00	122	#define _CRT_SECURE_NO_WARNINGS\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef vector<int> vi;\n\nvi v;\nint N, M;\nint ans = 987654321;\n\nbool flag = false;\nvoid f(vi a, int now, bool mode) {\n\tif (flag) return;\n\tsort(a.begin(), a.end());\n\n\tif (now == M) {\n\t\tint res = 0;\n\t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\tres += pow(v[i] - a[i], 2);\n\t\t}\n\t\tans = min(ans, res);\n\t\tflag = true;\n\t\treturn;\n\t}\n\telse if ((mode && now > M) || (!mode && now < M)) {\n\t\treturn;\n\t}\n\n\tif (!mode) {\n\t\tfor (int i = 0; i < a.size(); i++) {\n\t\t\tif (a[i] > 1) {\n\t\t\t\ta[i]--;\n\t\t\t\tf(a, now - (2 * a[i] + 1), mode);\n\t\t\t\ta[i]++;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 0; i < a.size(); i++) {\n\t\t\ta[i]++;\n\t\t\tf(a, now + (2 * a[i] - 1), mode);\n\t\t\ta[i]--;\n\t\t}\n\t}\n\n\n}\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL); cout.tie(NULL);\n\t//freopen("input.txt", "r", stdin);\n\n\tvi a;\n\tcin >> N >> M;\n\n\tint now = 0;\n\tfor (int i = 0; i < N; i++) {\n\t\tint x; cin >> x;\n\t\tnow += x * x;\n\t\tv.push_back(x);\n\t\ta.push_back(x);\n\t}\n\tsort(v.begin(), v.end());\n\n\tif (now > M) f(a, now, 0);\n\telse f(a, now, 1);\n\n\tif(ans != 987654321) cout << ans;\n\telse cout << -1;\n\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3551232, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "51e6d6e679953c6311757004d8cbbba9"}, {"error": 0, "memory": 3567616, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "efba0d602748d6f5066384a22b186e5b"}, {"error": 0, "memory": 3411968, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1996, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 6, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3588096, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3514368, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "182be0c5cdcd5072bb1864cdee4d3d6e"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3555328, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "9", "output_md5": "ec8956637a99787bd197eacd77acce5e"}, {"error": 0, "memory": 3444736, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "218a0aefd1d1a4be65601cc6ddc1520e"}, {"error": 0, "memory": 3268608, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 1999, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3518464, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "12", "output_md5": "239f914f30ea3c948fce2ea07a9efb33"}]}	C++	f	{"time_cost": 1999, "memory_cost": 3588096}	2020313266	124.53.59.135
db66095a0c790b87b58c3929df4d4e07	2	12	2021-01-05 06:42:09.43394+00	73	#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring GetOutput(int (&h)[4])\n{\n    if(h[0] == h[1] && h[1] == h[2] && h[2] == h[3]) return "Flat Land";\n    else if(h[0] <= h[1] && h[1] <= h[2] && h[2] <= h[3]) return "Uphill";\n    else if(h[0] >= h[1] && h[1] >= h[2] && h[2] >= h[3]) return "Downhill";\n    else return "Unknown";\n}\n\nint main(void)\n{\n  int height[4];\n\n  for(int i = 0; i < 4; i++)\n  {\n    cin >> height[i];\n  }\n\n  cout << GetOutput(height) << endl;\n\n  return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3473408, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3375104, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3411968, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3637248, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3637248}	2020312990	121.133.96.205
9ae0761dcc1e920d8fe9fc361493d022	2	12	2021-01-05 06:42:23.800757+00	73	#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring GetOutput(int (&h)[4])\n{\n    if(h[0] == h[1] && h[1] == h[2] && h[2] == h[3]) return "Flat Land";\n    else if(h[0] < h[1] && h[1] < h[2] && h[2] < h[3]) return "Uphill";\n    else if(h[0] > h[1] && h[1] > h[2] && h[2] > h[3]) return "Downhill";\n    else return "Unknown";\n}\n\nint main(void)\n{\n  int height[4];\n\n  for(int i = 0; i < 4; i++)\n  {\n    cin >> height[i];\n  }\n\n  cout << GetOutput(height) << endl;\n\n  return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3383296, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3362816, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3624960}	2020312990	121.133.96.205
cb69c299281abe473dfa8da3a1a1f8f7	2	15	2021-01-05 06:56:29.062912+00	103	m,n=input("부원 수를 입력하세요:").split(' ')\nm=int(m)\nn=int(n)\n\nc=[]\ni=1\nwhile True:\n    if i<=m:\n        d=int(input('금액을 입력하세요:'))\n        c.append(d)\n        i+=1\n    else:\n        break\n    \nk=1\nabso=0\nx=[]\nj=1\nwhile j<=m:\n    x.append(0)\n    j+=1\n\nwhile True:\n    if k<=n:\n        a,b=input("친분 관계를 입력하세요:").split(' ')\n        a=int(a)\n        b=int(b)\n    \n        k+=1\n        if c[a]<=c[b] :\n            x[a]-=abs(abs(c[a])-abs(c[b]))\n            x[b]+=abs(abs(c[a])-abs(c[b]))\n        else:\n            x[a]+=abs(abs(c[a])-abs(c[b]))\n            x[b]-=abs(abs(c[a])-abs(c[b]))\n    else:\n        break\nprint(x)\ny=0\nwhile y<=m:\n    if x[y]<0:\n        print("IMPOSSIBLE")\n        break\n    else:\n        print("POSSIBLE")\n        break	-1	{"err": null, "data": [{"error": 0, "memory": 9437184, "output": null, "result": -1, "signal": 0, "cpu_time": 76, "exit_code": 0, "real_time": 124, "test_case": "1", "output_md5": "3e1c772d309b9dae472ac7ef7c36269d"}, {"error": 0, "memory": 9236480, "output": null, "result": -1, "signal": 0, "cpu_time": 100, "exit_code": 0, "real_time": 159, "test_case": "2", "output_md5": "b786b8e609284396629a2ae5174e0343"}, {"error": 0, "memory": 9375744, "output": null, "result": -1, "signal": 0, "cpu_time": 61, "exit_code": 0, "real_time": 85, "test_case": "3", "output_md5": "760f25f30060459dd8df4fcd0c7708ba"}, {"error": 0, "memory": 9052160, "output": null, "result": -1, "signal": 0, "cpu_time": 130, "exit_code": 0, "real_time": 190, "test_case": "4", "output_md5": "7aad1033c0f4f49cf9ec6df897f17994"}, {"error": 0, "memory": 9400320, "output": null, "result": -1, "signal": 0, "cpu_time": 34, "exit_code": 0, "real_time": 74, "test_case": "5", "output_md5": "53d28fca32a7bb49de869c835ebb90af"}, {"error": 0, "memory": 9175040, "output": null, "result": -1, "signal": 0, "cpu_time": 35, "exit_code": 0, "real_time": 67, "test_case": "6", "output_md5": "16fa625b63c1e1cee525e18bf9fff5ec"}, {"error": 0, "memory": 9363456, "output": null, "result": -1, "signal": 0, "cpu_time": 83, "exit_code": 0, "real_time": 116, "test_case": "7", "output_md5": "8c6a5fe67512fcb298c7365b6054095e"}, {"error": 0, "memory": 9420800, "output": null, "result": -1, "signal": 0, "cpu_time": 34, "exit_code": 0, "real_time": 58, "test_case": "8", "output_md5": "00dcc91d5fc121afe7a3d5e24a1b022c"}, {"error": 0, "memory": 9805824, "output": null, "result": -1, "signal": 0, "cpu_time": 71, "exit_code": 0, "real_time": 115, "test_case": "9", "output_md5": "d4bfa3c89b02eeafb03774257e72c6db"}]}	Python3	f	{"time_cost": 130, "memory_cost": 9805824}	2017314205	175.117.35.4
8b34b360abe459da742fb7292e7e4e18	2	12	2021-01-05 11:51:11.394048+00	138	int main(void)\n{\n   int num[4];\n   for (int a = 0; a < 4; a++)\n      scanf("%d", &num[a]);\n   if ((num[0] > num[1] && num[1] > num[2]) && num[2] > num[3])\n      printf("Downhill");\n   else if ((num[0] < num[1] && num[1] < num[2]) && num[2] < num[3])\n      printf("Uphill");\n   else if ((num[0] == num[1] && num[1] == num[2]) && num[2] == num[3])\n      printf("Flat Land");\n   else\n      printf("Unknown");\n   return 0;\n}	-2	{}	C++	f	{"score": 0, "err_info": "/judger/run/4dcd7bcbaeb545f0bca13b382c366c5c/main.cpp: In function 'int main()':\\n/judger/run/4dcd7bcbaeb545f0bca13b382c366c5c/main.cpp:5:7: error: 'scanf' was not declared in this scope\\n       scanf(\\"%d\\", &num[a]);\\n       ^~~~~\\n/judger/run/4dcd7bcbaeb545f0bca13b382c366c5c/main.cpp:7:7: error: 'printf' was not declared in this scope\\n       printf(\\"Downhill\\");\\n       ^~~~~~\\n/judger/run/4dcd7bcbaeb545f0bca13b382c366c5c/main.cpp:7:7: note: suggested alternative: 'int'\\n       printf(\\"Downhill\\");\\n       ^~~~~~\\n       int\\n/judger/run/4dcd7bcbaeb545f0bca13b382c366c5c/main.cpp:9:7: error: 'printf' was not declared in this scope\\n       printf(\\"Uphill\\");\\n       ^~~~~~\\n/judger/run/4dcd7bcbaeb545f0bca13b382c366c5c/main.cpp:9:7: note: suggested alternative: 'int'\\n       printf(\\"Uphill\\");\\n       ^~~~~~\\n       int\\ncompilation terminated due to -fmax-errors=3."}	2017312332	182.215.66.91
cbfcb225adba25b8b8a67f17d05c96be	2	13	2021-01-05 08:20:24.384399+00	133	words = input("")\n\nfor i in len(words):\n  if (words[i] not in [H,I,N,O,S,X,Z]):\n    ANS=False\n\nif ANS == False:\n  print("NO")\nelse:\n  print("YES")	4	{"err": null, "data": [{"error": 0, "memory": 8855552, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 13, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 8962048, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 17, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8888320, "output": null, "result": 4, "signal": 0, "cpu_time": 19, "exit_code": 1, "real_time": 19, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8941568, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 19, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8957952, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 16, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 8957952, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 18, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 9035776, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 16, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 8953856, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 14, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 8871936, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 15, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 8953856, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 16, "test_case": "10", "output_md5": null}]}	Python3	f	{"time_cost": 19, "memory_cost": 9035776}	2020314792	175.116.4.40
7aad3c7e6fa785fc1ef0750b569b0a0b	2	15	2021-01-05 06:57:15.652766+00	103	m,n=input("부원 수를 입력하세요:").split(' ')\nm=int(m)\nn=int(n)\n\nc=[]\ni=1\nwhile True:\n    if i<=m:\n        d=int(input('금액을 입력하세요:'))\n        c.append(d)\n        i+=1\n    else:\n        break\n    \nk=1\nabso=0\nx=[]\nj=1\nwhile j<=m:\n    x.append(0)\n    j+=1\n\nwhile True:\n    if k<=n:\n        a,b=input("친분 관계를 입력하세요:").split(' ')\n        a=int(a)\n        b=int(b)\n    \n        k+=1\n        if c[a]<=c[b] :\n            x[a]-=abs(abs(c[a])-abs(c[b]))\n            x[b]+=abs(abs(c[a])-abs(c[b]))\n        else:\n            x[a]+=abs(abs(c[a])-abs(c[b]))\n            x[b]-=abs(abs(c[a])-abs(c[b]))\n    else:\n        break\n\ny=0\nwhile y<=m:\n    if x[y]<0:\n        print("IMPOSSIBLE")\n        break\n    else:\n        print("POSSIBLE")\n        break	-1	{"err": null, "data": [{"error": 0, "memory": 9211904, "output": null, "result": -1, "signal": 0, "cpu_time": 53, "exit_code": 0, "real_time": 131, "test_case": "1", "output_md5": "5ee0e53780eb7d2cf84144ee4e4ec8da"}, {"error": 0, "memory": 9146368, "output": null, "result": -1, "signal": 0, "cpu_time": 77, "exit_code": 0, "real_time": 151, "test_case": "2", "output_md5": "246c0d569be7fe9d211caf4568275ae6"}, {"error": 0, "memory": 9314304, "output": null, "result": -1, "signal": 0, "cpu_time": 51, "exit_code": 0, "real_time": 87, "test_case": "3", "output_md5": "2a49d5b717909a3e40adb090c5484262"}, {"error": 0, "memory": 9142272, "output": null, "result": -1, "signal": 0, "cpu_time": 131, "exit_code": 0, "real_time": 191, "test_case": "4", "output_md5": "74a7417ac1a79def293f15dfddf194d3"}, {"error": 0, "memory": 9175040, "output": null, "result": -1, "signal": 0, "cpu_time": 52, "exit_code": 0, "real_time": 80, "test_case": "5", "output_md5": "1443706b06b29ca72fc4d40f46c2d692"}, {"error": 0, "memory": 9105408, "output": null, "result": -1, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 71, "test_case": "6", "output_md5": "93700d1eb81af688ad5277928d826a79"}, {"error": 0, "memory": 9187328, "output": null, "result": -1, "signal": 0, "cpu_time": 79, "exit_code": 0, "real_time": 119, "test_case": "7", "output_md5": "690a59bb625ec8f74b2029bbe4326311"}, {"error": 0, "memory": 9248768, "output": null, "result": -1, "signal": 0, "cpu_time": 39, "exit_code": 0, "real_time": 62, "test_case": "8", "output_md5": "2317d44e5da2a8266adcd931a25fd668"}, {"error": 0, "memory": 9592832, "output": null, "result": -1, "signal": 0, "cpu_time": 68, "exit_code": 0, "real_time": 121, "test_case": "9", "output_md5": "e8b46d1268b3c160a78b9ff58c8fccb6"}]}	Python3	f	{"time_cost": 131, "memory_cost": 9592832}	2017314205	175.117.35.4
4c94f87a7aaf09e19c413993c5a4e52c	2	12	2021-01-05 11:04:02.540538+00	9	f = open("input.txt", "r")\nlines = f.readlines()\nnew_lines = []\nfor line in lines:\n    line = line.replace("\\n", "")\n    new_lines.append(line)\nf.close()\nif(int(new_lines[0]) < int(new_lines[1]) and int(new_lines[1]) < int(new_lines[2]) and int(new_lines[2]) < int(new_lines[3])):\n    print("Uphill")\nelif(int(new_lines[0]) > int(new_lines[1]) and int(new_lines[1]) > int(new_lines[2]) and int(new_lines[2]) > int(new_lines[3])):\n    print("Downhill")\nelif(int(new_lines[0]) == int(new_lines[1]) and int(new_lines[1]) == int(new_lines[2]) and int(new_lines[2]) == int(new_lines[3])):\n    print("Flat Land")\nelse:\n    print("Unknown")	4	{"err": null, "data": [{"error": 0, "memory": 9015296, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 14, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 8855552, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 17, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8798208, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 18, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8888320, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 19, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8990720, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 15, "test_case": "5", "output_md5": null}]}	Python3	f	{"time_cost": 12, "memory_cost": 9015296}	jinsuby	115.145.170.168
6472878f729d115808920b8f66e4f295	2	15	2021-01-05 07:03:06.65891+00	103	m,n=input("부원 수를 입력하세요:").split(' ')\nm=int(m)\nn=int(n)\n\nc=[]\ni=1\nwhile True:\n    if i<=m:\n        d=int(input('금액을 입력하세요:'))\n        c.append(d)\n        i+=1\n    else:\n        break\n    \nk=1\nabso=0\nx=[]\nj=1\nwhile j<=m:\n    x.append(0)\n    j+=1\n\nwhile True:\n    if k<=n:\n        a,b=input("친분 관계를 입력하세요:").split(' ')\n        a=int(a)\n        b=int(b)\n    \n        k+=1\n        if c[a]<=c[b] :\n            x[a]-=abs(abs(c[a])-abs(c[b]))\n            x[b]+=abs(abs(c[a])-abs(c[b]))\n        else:\n            x[a]+=abs(abs(c[a])-abs(c[b]))\n            x[b]-=abs(abs(c[a])-abs(c[b]))\n    else:\n        break\n\ny=0\nwhile y<=m:\n    if x[y]<0:\n        print("IMPOSSIBLE")\n        break\n    y+=1\n    if y==m:\n        print("POSSIBLE")\n        break	-1	{"err": null, "data": [{"error": 0, "memory": 9236480, "output": null, "result": -1, "signal": 0, "cpu_time": 88, "exit_code": 0, "real_time": 137, "test_case": "1", "output_md5": "08c645920b70b200325b9f1c0dbd5f83"}, {"error": 0, "memory": 9121792, "output": null, "result": -1, "signal": 0, "cpu_time": 97, "exit_code": 0, "real_time": 146, "test_case": "2", "output_md5": "246c0d569be7fe9d211caf4568275ae6"}, {"error": 0, "memory": 9211904, "output": null, "result": -1, "signal": 0, "cpu_time": 44, "exit_code": 0, "real_time": 101, "test_case": "3", "output_md5": "2a49d5b717909a3e40adb090c5484262"}, {"error": 0, "memory": 9109504, "output": null, "result": -1, "signal": 0, "cpu_time": 127, "exit_code": 0, "real_time": 192, "test_case": "4", "output_md5": "a3a8d945ede6f0e124813b58ddab80a9"}, {"error": 0, "memory": 9261056, "output": null, "result": -1, "signal": 0, "cpu_time": 35, "exit_code": 0, "real_time": 76, "test_case": "5", "output_md5": "7b3a4b4710dae279afd41dd23b8efbee"}, {"error": 0, "memory": 9064448, "output": null, "result": -1, "signal": 0, "cpu_time": 31, "exit_code": 0, "real_time": 76, "test_case": "6", "output_md5": "93700d1eb81af688ad5277928d826a79"}, {"error": 0, "memory": 9236480, "output": null, "result": -1, "signal": 0, "cpu_time": 63, "exit_code": 0, "real_time": 124, "test_case": "7", "output_md5": "690a59bb625ec8f74b2029bbe4326311"}, {"error": 0, "memory": 9183232, "output": null, "result": -1, "signal": 0, "cpu_time": 35, "exit_code": 0, "real_time": 68, "test_case": "8", "output_md5": "d147782a99ae5b3772eddb2635464933"}, {"error": 0, "memory": 9592832, "output": null, "result": -1, "signal": 0, "cpu_time": 56, "exit_code": 0, "real_time": 121, "test_case": "9", "output_md5": "e8b46d1268b3c160a78b9ff58c8fccb6"}]}	Python3	f	{"time_cost": 127, "memory_cost": 9592832}	2017314205	175.117.35.4
402ac8c3d50431ee827e9531555f7549	2	16	2021-01-05 12:37:24.525479+00	12	#include <iostream>\n#include <algorithm>\nusing namespace std;\nint N, M;\nlong long maxi = 989898987654321;\nint ty[11];\nint present = 0;\nint v[11];\nint max_num = 0;\nbool go(int idx, int remain, long long price)\n{\n    //cout << remain << " " << idx << endl;\n    if (remain == M)\n    {\n        maxi = min(maxi, price);\n        return false;\n    }\n    if (remain < M)\n        return false;\n    if (idx == N)\n        return true;\n    go(idx + 1, present, price);\n    for (int i = 1; i < M; i++)\n    {\n        if (ty[idx] - i == 0)\n            break;\n        go(idx + 1, remain - (ty[idx] * ty[idx]) + ((ty[idx] - i) * (ty[idx] - i)), price + (ty[idx] - i) * (ty[idx] - i));\n    }\n    return true;\n}\nbool find_v(int idx, int remain, int before)\n{\n    if (remain == M && idx == N)\n        return true;\n    if (remain > M || idx == N)\n        return false;\n    for (int i = before; i <= max_num; i++)\n    {\n        v[idx] = i;\n        if (find_v(idx + 1, remain + i * i, i))\n        {\n            return true;\n        }\n        v[idx] = 0;\n    }\n    return false;\n}\nvoid check()\n{\n    long long ans = 0;\n    for (int i = 0; i < N; i++)\n    {\n        if (ty[i] - v[i] < 0)\n            return;\n        ans += (ty[i] - v[i]) * (ty[i] - v[i]);\n    }\n    maxi = min(ans, maxi);\n}\nint main()\n{\n    cin >> N >> M;\n    for (int i = 0; i < N; i++)\n        cin >> ty[i], present += ty[i] * ty[i], max_num = max(max_num, ty[i]);\n    find_v(0, 0, 1);\n    do\n    {\n        check();\n    } while (next_permutation(&v[0], &v[N]));\n    if (maxi == 989898987654321||v[0]==0)\n        cout << -1 << endl;\n    else\n        cout << maxi << endl;\n\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3387392, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "51e6d6e679953c6311757004d8cbbba9"}, {"error": 0, "memory": 3538944, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "efba0d602748d6f5066384a22b186e5b"}, {"error": 0, "memory": 3485696, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3416064, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "182be0c5cdcd5072bb1864cdee4d3d6e"}, {"error": 0, "memory": 3514368, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3481600, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "ec8956637a99787bd197eacd77acce5e"}, {"error": 0, "memory": 3534848, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3497984, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "11", "output_md5": "f5c80b20fdee4e645ff315a56f12a716"}, {"error": 0, "memory": 3371008, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "12", "output_md5": "239f914f30ea3c948fce2ea07a9efb33"}]}	C++	f	{"time_cost": 2, "memory_cost": 3547136}	2016311327	121.136.228.184
2586aa246389842a3ac9beebdb936241	2	13	2021-01-05 14:32:32.922096+00	142	word = input()\ni = 0\ncheck = False\nwhile i < len(word):\n  if word[i] != 'H' or 'I' or 'N' or 'O' or 'S' or 'X' or 'Z':\n    print("NO")\n    check = True\n    break\n  i += 1\nif check is False:\n  print("YES")	4	{"err": null, "data": [{"error": 0, "memory": 7352320, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 12, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7348224, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 13, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7286784, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 11, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7471104, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 11, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7274496, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 10, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7426048, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 15, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7262208, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 15, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7438336, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 15, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7364608, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 12, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7380992, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 15, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 14, "memory_cost": 7471104}	2020311733	1.225.26.118
43b60bc9335f9b35b1c0e3ab76fb4adb	2	12	2021-01-05 08:09:04.015185+00	132	def main():\n    a,b,c,d = map(int, input().split())\n    o = [a,b,c,d]\n    h = sorted(o)\n    if len(set(o))==1:\n        print("Flat Land")\n    elif o == h:\n        print("Uphill")\n    elif o == reversed(h):\n        print("Downhill")\n    else:\n        print("Unkown")\n\nif __name__ == '__main__':\n    main()	4	{"err": null, "data": [{"error": 0, "memory": 8896512, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 16, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 8904704, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 14, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8966144, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 16, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 8933376, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 16, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8957952, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 14, "test_case": "5", "output_md5": null}]}	Python3	f	{"time_cost": 11, "memory_cost": 8966144}	2018311840	211.212.221.2
5ee1885eba254445b540af3a1588fdcf	2	12	2021-01-05 11:10:23.988714+00	9	new_lines = []\nfor i in range(4):\n    n = input()\n    new_lines.append(n)\n\nif(int(new_lines[0]) < int(new_lines[1]) and int(new_lines[1]) < int(new_lines[2]) and int(new_lines[2]) < int(new_lines[3])):\n    print("Uphill")\nelif(int(new_lines[0]) > int(new_lines[1]) and int(new_lines[1]) > int(new_lines[2]) and int(new_lines[2]) > int(new_lines[3])):\n    print("Downhill")\nelif(int(new_lines[0]) == int(new_lines[1]) and int(new_lines[1]) == int(new_lines[2]) and int(new_lines[2]) == int(new_lines[3])):\n    print("Flat Land")\nelse:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9056256, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8876032, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9056256}	jinsuby	115.145.170.168
eccbf1297b00f45ae73331798b73a570	2	12	2021-01-05 11:51:24.069543+00	138	int main(void)\n{\n   int num[4];\n   for (int a = 0; a < 4; a++)\n      scanf("%d", &num[a]);\n   if ((num[0] > num[1] && num[1] > num[2]) && num[2] > num[3])\n      printf("Downhill");\n   else if ((num[0] < num[1] && num[1] < num[2]) && num[2] < num[3])\n      printf("Uphill");\n   else if ((num[0] == num[1] && num[1] == num[2]) && num[2] == num[3])\n      printf("Flat Land");\n   else\n      printf("Unknown");\n   return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1716224, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1716224}	2017312332	182.215.66.91
5dd3d3ad69605279a1f352e25e37bd91	2	12	2021-01-05 13:53:21.006099+00	35	#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint list[4];\nint s;\nint uphill(int cur){\n  s=2;\n  if(cur==3){\n    return 0;\n  }\n  if(list[cur]>=list[cur+1]){\n    s=1;\n    return 0;\n  }\n  uphill(cur+1);\n}\nint downhill(int cur){\n  s=3;\n  if(cur==3){\n    return 0;\n  }\n  if(list[cur]<=list[cur+1]){\n    s=1;\n    return 0;\n  }\n  downhill(cur+1);\n}\nint flat(int cur){\n  s=4;\n  if(cur==3){\n    return 0;\n  }\n  if(list[cur]!=list[cur+1]){\n    s=1;\n    return 0;\n  }\n  flat(cur+1);\n}\nint main(void){\n  int before;\n  int after;\n  for(int i=0;i<4;i++){\n    scanf("%d",list[i]);\n  }\n  if(list[0]<list[1]){\n    uphill(1);\n  }\n  else if(list[0]>list[1]){\n    downhill(1);\n  }\n  else{\n    flat(1);\n  }\n  if(s==1){\n    printf("Unknown");\n  }\n  else if(s==2){\n    printf("Uphill");\n  }\n  else if(s==3){\n    printf("Downhill");\n  }\n  else{\n    printf("Flat Land");\n  }\n}	4	{"err": null, "data": [{"error": 0, "memory": 1581056, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 73, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 1548288, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 88, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 1736704, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 87, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 1585152, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 72, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 1589248, "output": null, "result": 4, "signal": 11, "cpu_time": 1, "exit_code": 0, "real_time": 74, "test_case": "5", "output_md5": null}]}	C	f	{"time_cost": 1, "memory_cost": 1736704}	2019313491	116.37.178.202
fbcfb87a903081cc0414509d91f7dbaa	2	13	2021-01-05 14:32:46.771638+00	142	word = input()\ni = 0\ncheck = False\nwhile i < len(word):\n  if word[i] != 'H' or 'I' or 'N' or 'O' or 'S' or 'X' or 'Z':\n    print("NO")\n    check = True\n    break\n  i += 1\nif check == False:\n  print("YES")	4	{"err": null, "data": [{"error": 0, "memory": 7467008, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 10, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7385088, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 12, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7454720, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 10, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7364608, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7458816, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 12, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7286784, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 1, "real_time": 13, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7254016, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 11, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7442432, "output": null, "result": 4, "signal": 0, "cpu_time": 2, "exit_code": 1, "real_time": 9, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7340032, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 12, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7397376, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 12, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 9, "memory_cost": 7467008}	2020311733	1.225.26.118
3938fe17179d10c4ae87510bbf30b676	2	12	2021-01-05 08:11:41.506874+00	133	lista=[]\nfor i in range(4):\n  lista.append(int(input()))\n\nfor i in range(4):\n  if lista[i]!=lista[i+1]:\n    sakasa=True\n\nif sakasa==False:\n  print("Flat land")\n  \nelse:\n  if (lista.sort()==lista):\n    print("Uphill")\n \n  elif (lista.reverse()==lista):\n    print("Downhill")\n  \n  else:\n    print("Unknown")	4	{"err": null, "data": [{"error": 0, "memory": 9125888, "output": null, "result": 4, "signal": 0, "cpu_time": 20, "exit_code": 1, "real_time": 21, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 9031680, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 17, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9019392, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 20, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9027584, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 12, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 9064448, "output": null, "result": 4, "signal": 0, "cpu_time": 17, "exit_code": 1, "real_time": 17, "test_case": "5", "output_md5": null}]}	Python3	f	{"time_cost": 20, "memory_cost": 9125888}	2020314792	175.116.4.40
59d0009ae41dee6812d362ccb5e68564	2	12	2021-01-05 08:12:52.240794+00	132	def main():\n    #a,b,c,d = map(int, input().split('\\n'))\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    d = int(input())\n    o = [a,b,c,d]\n    h = sorted(o)\n    if len(set(o))==1:\n        print("Flat Land")\n    elif o == h:\n        print("Uphill")\n    elif o == reversed(h):\n        print("Downhill")\n    else:\n        print("Unkown")\n\nif __name__ == '__main__':\n    main()	-1	{"err": null, "data": [{"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8929280, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}, {"error": 0, "memory": 8994816, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}, {"error": 0, "memory": 8916992, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "777358f6554241fd6bb9110bf267b3ac"}]}	Python3	f	{"time_cost": 16, "memory_cost": 8994816}	2018311840	211.212.221.2
2c6e285826ea092f2048c0c0da8b91cd	2	12	2021-01-05 11:10:29.931604+00	9	new_lines = []\nfor i in range(4):\n    n = input()\n    new_lines.append(n)\n\nif(int(new_lines[0]) < int(new_lines[1]) and int(new_lines[1]) < int(new_lines[2]) and int(new_lines[2]) < int(new_lines[3])):\n    print("Uphill")\nelif(int(new_lines[0]) > int(new_lines[1]) and int(new_lines[1]) > int(new_lines[2]) and int(new_lines[2]) > int(new_lines[3])):\n    print("Downhill")\nelif(int(new_lines[0]) == int(new_lines[1]) and int(new_lines[1]) == int(new_lines[2]) and int(new_lines[2]) == int(new_lines[3])):\n    print("Flat Land")\nelse:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9117696, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 13, "memory_cost": 9117696}	jinsuby	115.145.170.168
c4cf0cd8de026b8b4e8294adcc08479e	2	12	2021-01-05 11:55:08.291612+00	140	list = []\nfor i in range(4):\n    n = input()\n    list.append(n)\n\nif(int(list[0]) < int(list[1]) and int(list[1]) < int(list[2]) and int(list[2]) < int(list[3])):\n    print("Uphill")\nelif(int(list[0]) > int(list[1]) and int(list[1]) > int(list[2]) and int(list[2]) > int(list[3])):\n    print("Downhill")\nelif(int(list[0]) == int(list[1]) and int(list[1]) == int(list[2]) and int(list[2]) == int(list[3])):\n    print("Flat Land")\nelse:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9113600, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 15, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9113600}	creatinnov	115.145.170.72
8565d91ff8fa5d5640b9d9717290406c	2	12	2021-01-05 14:18:48.228131+00	143	#include <iostream>\n\nusing namespace std;;\n\nint main()\n{\n\tint i, x[4], c = 0;\n\tfor (i = 0; i < 4; i++) {\n\t\tcin >> x[i];\n\t\tif (i != 0) {\n\t\t\tif (c == 0) {\n\t\t\t\tif (x[i] > x[i - 1]) c = 1;\n\t\t\t\telse if (x[i] < x[i - 1]) c = 2;\n\t\t\t\telse c = 3;\n\t\t\t}\n\t\t\telse if (c == 1) {\n\t\t\t\tif (x[i] <= x[i - 1]) {\n\t\t\t\t\tc = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (c == 2) {\n\t\t\t\tif (x[i] >= x[i - 1]) {\n\t\t\t\t\tc = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (c == 3) {\n\t\t\t\tif (x[i] != x[i - 1]) {\n\t\t\t\t\tc = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tswitch (c) {\n\tcase 0 :\n\t\tcout << "Unknown";\n\t\tbreak;\n\tcase 1 :\n\t\tcout << "Uphill";\n\t\tbreak;\n\tcase 2 :\n\t\tcout << "Downhill";\n\t\tbreak;\n\tcase 3 :\n\t\tcout << "Fit Land";\n\t\tbreak;\n\t}\n\treturn 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3362816, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fbd4becc357e5191fec136d517e2c8bf"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3526656, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3366912, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3530752}	2016310790	59.18.228.114
910bc50881efdaacb739df7b81fb1d9b	2	12	2021-01-05 08:13:12.651587+00	133	lista=[]\nfor i in range(4):\n  lista.append(int(input()))\n\nfor i in [0,1,2]:\n  if lista[i]!=lista[i+1]:\n    sakasa=True\n\nif sakasa==False:\n  print("Flat land")\n  \nelse:\n  if (lista.sort()==lista):\n    print("Uphill")\n \n  elif (lista.reverse()==lista):\n    print("Downhill")\n  \n  else:\n    print("Unknown")	4	{"err": null, "data": [{"error": 0, "memory": 8994816, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 18, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9011200, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9015296, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9101312, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9101312}	2020314792	175.116.4.40
e7e3c3d505cb9fa2a3ea5f78c52f98db	2	14	2021-01-05 14:56:56.869366+00	141	cnt = int(input()) \ncntList = [] \nnumList = [] \ncnt2 = 0 \nmaxNum = 0\nlineNum = 0\ncntNum = 0\nmissNum = 0\n\nfor i in range(cnt) :\n    num = int(input())\n    if i == 0 :\n        cntList.append(1)\n        numList.append(num)\n    elif num == numList[cnt2] :\n        cntList[cnt2] += 1\n    else :\n        cntList.append(1)\n        numList.append(num)\n        if cntList[cnt2] > maxNum :\n            maxNum = cntList[cnt2]\n        cnt2 += 1    \n\nfor i in range(cnt2-1) :\n    if numList[i] == numList[i+2] :\n        missNum = numList[i+1]\n        cntNum = numList[i]\n        lineNum = cntList[i] + cntList[i+2]\n        for j in range(i+3, cnt2+1) :\n            if numList[j] == cntNum :\n                lineNum += cntList[j]\n            elif numList[j] == missNum :\n                continue\n            else :\n                break\n        if lineNum > maxNum :\n            maxNum = lineNum\n\nprint(maxNum)	-1	{"err": null, "data": [{"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9027584, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8880128, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 18, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9080832, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 24, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 35, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9068544, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 23, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9048064, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 9072640, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 23, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 26, "memory_cost": 9080832}	2018312588	125.130.66.239
7c5503e41f270d6c433992430454a590	2	12	2021-01-05 11:12:10.198721+00	134	#include<stdio.h>\n\nint main(){\n\tint a, b, c, d;\n\tscanf("%d", &a);\n\tscanf("%d", &b);\n\tscanf("%d", &c);\n\tscanf("%d", &d);\t\n\t\n\tif (a==b && b==c && c==d){\n\t\tprintf("Flat Land");\n\t}\n\t\n\telse if (a<b && b<c && c<d){\n\t\tprintf("Uphill");\n\t}\n\t\n\telse if (a>b && b>c && c>d){\n\t\tprintf("Downhill");\n\t}\n\t\n\telse{\n\tprintf("Unknown");}\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1699840}	2020312240	116.126.145.91
2a6bef2fde35427959051da0c5b9721c	2	12	2021-01-05 11:55:18.464352+00	140	list = []\nfor i in range(4):\n    n = input()\n    list.append(n)\n\nif(int(list[0]) < int(list[1]) and int(list[1]) < int(list[2]) and int(list[2]) < int(list[3])):\n    print("Uphill")\nelif(int(list[0]) > int(list[1]) and int(list[1]) > int(list[2]) and int(list[2]) > int(list[3])):\n    print("Downhill")\nelif(int(list[0]) == int(list[1]) and int(list[1]) == int(list[2]) and int(list[2]) == int(list[3])):\n    print("Flat Land")\nelse:\n    print("Unknown")	0	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8949760, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 16, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 15, "memory_cost": 9023488}	creatinnov	115.145.170.72
d7f4adba6b9dace141e3206c6257af73	2	13	2021-01-05 14:34:28.17011+00	142	word = input()\ni = 0\ncheck = False\nwhile i < len(word):\n  if word[i] != 'H' or 'I' or 'N' or 'O' or 'S' or 'X' or 'Z':\n    print("NO")\n    break\n  i += 1\nif check == False:\n  print("YES")	4	{"err": null, "data": [{"error": 0, "memory": 7344128, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 13, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7413760, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 12, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7553024, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 11, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7335936, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 12, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7475200, "output": null, "result": 4, "signal": 0, "cpu_time": 0, "exit_code": 1, "real_time": 11, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7360512, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 1, "real_time": 13, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7249920, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 12, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7389184, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7405568, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 12, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7356416, "output": null, "result": 4, "signal": 0, "cpu_time": 4, "exit_code": 1, "real_time": 12, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 12, "memory_cost": 7553024}	2020311733	1.225.26.118
48d14ba7a9012f00682013baf1ef727e	2	12	2021-01-05 08:13:28.324848+00	132	def main():\n    #a,b,c,d = map(int, input().split('\\n'))\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    d = int(input())\n    o = [a,b,c,d]\n    h = sorted(o)\n    if len(set(o))==1:\n        print("Flat Land")\n    elif o == h:\n        print("Uphill")\n    elif o == reversed(h):\n        print("Downhill")\n    else:\n        print("Unknown")\n\nif __name__ == '__main__':\n    main()	-1	{"err": null, "data": [{"error": 0, "memory": 9113600, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 20, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 20, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8974336, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 17, "test_case": "4", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 8994816, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 12, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 13, "memory_cost": 9113600}	2018311840	211.212.221.2
e0640788a6c0a547aa48b105c9f8d316	2	12	2021-01-05 08:15:40.910884+00	132	def main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    d = int(input())\n    o = [a,b,c,d]\n    h = sorted(o)\n    if len(set(o))==1:\n        print("Flat Land")\n    elif len(o) != len(set(o)):\n        print("Unknown")\n    elif o == h:\n        print("Uphill")\n    elif o == reversed(h):\n        print("Downhill")\n    \nif __name__ == '__main__':\n    main()	-1	{"err": null, "data": [{"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 9007104, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "d41d8cd98f00b204e9800998ecf8427e"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	Python3	f	{"time_cost": 17, "memory_cost": 9023488}	2018311840	211.212.221.2
51d8820a7e4c4ece95ddf6cff78b9d08	2	14	2021-01-05 08:17:04.528793+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\nint count(int *arr,int n);\n\n\nint main(void)\n{\n\tint n, a, k = 0;\n\tscanf("%d", &n);\n\tint* Pnum = malloc(sizeof(int) * n);\n\n\ta = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tscanf("%d", &Pnum[i]);\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0)\n\t\t\tk += 1;\n\t}\n\tint* PP = malloc(sizeof(int) * k);\n\n\tint j = 0;\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0) {\n\t\t\tPP[j] = i;\n\t\t\tj += 1;\n\t\t}\n\t}\n\n\tint ans = 1;\n\n\tfor (int i = 0; i < k; i++) {\n\t\tint f=1;\n\t\tint newn = 0;\n\t\tint out = count(Pnum, n, PP[i]);\n\t\tint* thang = malloc(sizeof(int) * (n - out));\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (Pnum[j] != PP[i]) {\n\t\t\t\tthang[newn] = Pnum[j];\n\t\t\t\tnewn += 1;\n\t\t\t}\n\t\t}\n\t\tfor (j = 0; j < n - out-1; j++) {\n\t\t\tif (thang[j] == thang[j + 1]) {\n\t\t\t\tf += 1;\n\t\t\t\tif (f >= ans)\n\t\t\t\t\tans = f;\n\t\t\t}\n\t\t\telse\n\t\t\t\tf = 1;\n\t\t}\n\t\tfree(thang);\n\t}\n\tprintf("%d", ans);\n\tfree(Pnum);\n\tfree(PP);\n}\n\nint count(int* arr, int n,int a) {\n\tint z = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] == a)\n\t\t\tz += 1;\n\t}\n\treturn z;\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/d5e9bc60bf3241e4b527a36c4fb80e1d/main.c: In function 'main':\\n/judger/run/d5e9bc60bf3241e4b527a36c4fb80e1d/main.c:17:7: error: too many arguments to function 'count'\\n   if (count(Pnum, n, i) != 0)\\n       ^~~~~\\n/judger/run/d5e9bc60bf3241e4b527a36c4fb80e1d/main.c:4:5: note: declared here\\n int count(int *arr,int n);\\n     ^~~~~\\n/judger/run/d5e9bc60bf3241e4b527a36c4fb80e1d/main.c:24:7: error: too many arguments to function 'count'\\n   if (count(Pnum, n, i) != 0) {\\n       ^~~~~\\n/judger/run/d5e9bc60bf3241e4b527a36c4fb80e1d/main.c:4:5: note: declared here\\n int count(int *arr,int n);\\n     ^~~~~\\n/judger/run/d5e9bc60bf3241e4b527a36c4fb80e1d/main.c:35:13: error: too many arguments to function 'count'\\n   int out = count(Pnum, n, PP[i]);\\n             ^~~~~\\n/judger/run/d5e9bc60bf3241e4b527a36c4fb80e1d/main.c:4:5: note: declared here\\n int count(int *arr,int n);\\n     ^~~~~\\ncompilation terminated due to -fmax-errors=3."}	2017314427	122.43.171.120
f8d51eeba9c0b293bbfc20081f73ba9e	2	16	2021-01-05 12:40:21.543223+00	12	#include <iostream>\n#include <algorithm>\nusing namespace std;\nint N, M;\nlong long maxi = 989898987654321;\nint ty[11];\nint present = 0;\nint v[11];\nint max_num = 0;\nbool go(int idx, int remain, long long price)\n{\n    //cout << remain << " " << idx << endl;\n    if (remain == M)\n    {\n        maxi = min(maxi, price);\n        return false;\n    }\n    if (remain < M)\n        return false;\n    if (idx == N)\n        return true;\n    go(idx + 1, present, price);\n    for (int i = 1; i < M; i++)\n    {\n        if (ty[idx] - i == 0)\n            break;\n        go(idx + 1, remain - (ty[idx] * ty[idx]) + ((ty[idx] - i) * (ty[idx] - i)), price + (ty[idx] - i) * (ty[idx] - i));\n    }\n    return true;\n}\nvoid check()\n{\n    long long ans = 0;\n    for (int i = 0; i < N; i++)\n    {\n        if (ty[i] - v[i] < 0)\n            return;\n        ans += (ty[i] - v[i]) * (ty[i] - v[i]);\n    }\n    maxi = min(ans, maxi);\n}\nbool find_v(int idx, int remain, int before)\n{\n    if (remain == M && idx == N)\n    {\n        do\n        {\n            check();\n        } while (next_permutation(&v[0], &v[N]));\n        return true;\n    }\n    if (remain > M || idx == N)\n        return false;\n    for (int i = before; i <= max_num; i++)\n    {\n        v[idx] = i;\n        (find_v(idx + 1, remain + i * i, i));\n        v[idx] = 0;\n    }\n    return false;\n}\n\nint main()\n{\n    cin >> N >> M;\n    for (int i = 0; i < N; i++)\n        cin >> ty[i], present += ty[i] * ty[i], max_num = max(max_num, ty[i]);\n    find_v(0, 0, 1);\n    \n    if (maxi == 989898987654321)\n        cout << -1 << endl;\n    else\n        cout << maxi << endl;\n\n    return 0;\n}	1	{"err": null, "data": [{"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 3403776, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1998, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3104768, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1998, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3411968, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3416064, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 3424256, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "218a0aefd1d1a4be65601cc6ddc1520e"}, {"error": 0, "memory": 3174400, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2001, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3309568, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2001, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 1999, "memory_cost": 3518464}	2016311327	121.136.228.184
2a1bf6787bc5b7f0591162a455f42e11	2	13	2021-01-05 08:22:15.874409+00	133	words = input("")\n\nfor i in len(words):\n  if (words[i] not in ["H","I","N","O","S","X","Z"]):\n    ANS=False\n\nif ANS == False:\n  print("NO")\nelse:\n  print("YES")	4	{"err": null, "data": [{"error": 0, "memory": 8962048, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 18, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 8962048, "output": null, "result": 4, "signal": 0, "cpu_time": 17, "exit_code": 1, "real_time": 17, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 8957952, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 18, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9039872, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 16, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 8863744, "output": null, "result": 4, "signal": 0, "cpu_time": 13, "exit_code": 1, "real_time": 19, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 8982528, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 15, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 8945664, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 14, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 8908800, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 13, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 8953856, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 18, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 8962048, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 18, "test_case": "10", "output_md5": null}]}	Python3	f	{"time_cost": 17, "memory_cost": 9039872}	2020314792	175.116.4.40
8e16099f780263389ae8188f4feb4180	2	14	2021-01-05 08:19:30.664535+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\nint count(int *arr,int n);\n\n\nint main(void)\n{\n\tint n, a, k = 0;\n\tscanf("%d", &n);\n\tint* Pnum = malloc(sizeof(int) * n);\n\n\ta = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tscanf("%d", &Pnum[i]);\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0)\n\t\t\tk += 1;\n\t}\n\tint* PP = malloc(sizeof(int) * k);\n\n\tint j = 0;\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0) {\n\t\t\tPP[j] = i;\n\t\t\tj += 1;\n\t\t}\n\t}\n\n\tint ans = 1;\n\n\tfor (int i = 0; i < k; i++) {\n\t\tint f=1;\n\t\tint newn = 0;\n\t\tint out = count(Pnum, n, PP[i]);\n\t\tint* thang = malloc(sizeof(int) * (n - out));\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (Pnum[j] != PP[i]) {\n\t\t\t\tthang[newn] = Pnum[j];\n\t\t\t\tnewn += 1;\n\t\t\t}\n\t\t}\n\t\tfor (j = 0; j < n - out-1; j++) {\n\t\t\tif (thang[j] == thang[j + 1]) {\n\t\t\t\tf += 1;\n\t\t\t\tif (f >= ans)\n\t\t\t\t\tans = f;\n\t\t\t}\n\t\t\telse\n\t\t\t\tf = 1;\n\t\t}\n\t\tfree(thang);\n\t}\n\tprintf("%d", ans);\n\tfree(Pnum);\n\tfree(PP);\n}\n\nint count(int* arr, int n,int a) {\n\tint z = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] == a)\n\t\t\tz += 1;\n\t}\n\treturn z;\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/adf12d2720a6409590761ca27cc641ca/main.c: In function 'main':\\n/judger/run/adf12d2720a6409590761ca27cc641ca/main.c:17:7: error: too many arguments to function 'count'\\n   if (count(Pnum, n, i) != 0)\\n       ^~~~~\\n/judger/run/adf12d2720a6409590761ca27cc641ca/main.c:4:5: note: declared here\\n int count(int *arr,int n);\\n     ^~~~~\\n/judger/run/adf12d2720a6409590761ca27cc641ca/main.c:24:7: error: too many arguments to function 'count'\\n   if (count(Pnum, n, i) != 0) {\\n       ^~~~~\\n/judger/run/adf12d2720a6409590761ca27cc641ca/main.c:4:5: note: declared here\\n int count(int *arr,int n);\\n     ^~~~~\\n/judger/run/adf12d2720a6409590761ca27cc641ca/main.c:35:13: error: too many arguments to function 'count'\\n   int out = count(Pnum, n, PP[i]);\\n             ^~~~~\\n/judger/run/adf12d2720a6409590761ca27cc641ca/main.c:4:5: note: declared here\\n int count(int *arr,int n);\\n     ^~~~~\\ncompilation terminated due to -fmax-errors=3."}	2017314427	122.43.171.120
6676f20e99e240133554d81da5567949	2	14	2021-01-05 08:26:22.26531+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\nint count(int *arr,int n,int a);\n\n\nint main(void)\n{\n\tint n, a, k = 0;\n\tscanf("%d", &n);\n\tint* Pnum = malloc(sizeof(int) * n);\n\n\ta = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tscanf("%d", &Pnum[i]);\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0)\n\t\t\tk += 1;\n\t}\n\tint* PP = malloc(sizeof(int) * k);\n\n\tint j = 0;\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0) {\n\t\t\tPP[j] = i;\n\t\t\tj += 1;\n\t\t}\n\t}\n\n\tint ans = 1;\n\n\tfor (int i = 0; i < k; i++) {\n\t\tint f=1;\n\t\tint newn = 0;\n\t\tint out = count(Pnum, n, PP[i]);\n\t\tint* thang = malloc(sizeof(int) * (n - out));\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (Pnum[j] != PP[i]) {\n\t\t\t\tthang[newn] = Pnum[j];\n\t\t\t\tnewn += 1;\n\t\t\t}\n\t\t}\n\t\tfor (j = 0; j < n - out-1; j++) {\n\t\t\tif (thang[j] == thang[j + 1]) {\n\t\t\t\tf += 1;\n\t\t\t\tif (f >= ans)\n\t\t\t\t\tans = f;\n\t\t\t}\n\t\t\telse\n\t\t\t\tf = 1;\n\t\t}\n\t\tfree(thang);\n\t}\n\tprintf("%d", ans);\n\tfree(Pnum);\n\tfree(PP);\n}\n\nint count(int* arr, int n,int a) {\n\tint z = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] == a)\n\t\t\tz += 1;\n\t}\n\treturn z;\n}	1	{"err": null, "data": [{"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 965, "exit_code": 0, "real_time": 970, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 22, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 22, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 113, "exit_code": 0, "real_time": 114, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 127, "exit_code": 0, "real_time": 128, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 123, "exit_code": 0, "real_time": 124, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 977, "exit_code": 0, "real_time": 978, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 978, "exit_code": 0, "real_time": 979, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1630208, "output": null, "result": 1, "signal": 0, "cpu_time": 1021, "exit_code": 0, "real_time": 1022, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 1687552, "output": null, "result": 0, "signal": 0, "cpu_time": 1000, "exit_code": 0, "real_time": 1001, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1658880, "output": null, "result": 1, "signal": 0, "cpu_time": 1027, "exit_code": 0, "real_time": 1028, "test_case": "12", "output_md5": null}, {"error": 0, "memory": 1617920, "output": null, "result": 1, "signal": 0, "cpu_time": 1011, "exit_code": 0, "real_time": 1012, "test_case": "13", "output_md5": null}, {"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 997, "exit_code": 0, "real_time": 997, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 986, "exit_code": 0, "real_time": 987, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 995, "exit_code": 0, "real_time": 996, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 997, "exit_code": 0, "real_time": 998, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 972, "exit_code": 0, "real_time": 975, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 976, "exit_code": 0, "real_time": 977, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 973, "exit_code": 0, "real_time": 975, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 1687552, "output": null, "result": 0, "signal": 0, "cpu_time": 998, "exit_code": 0, "real_time": 999, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 1617920, "output": null, "result": 1, "signal": 0, "cpu_time": 1002, "exit_code": 0, "real_time": 1004, "test_case": "22", "output_md5": null}]}	C	f	{"time_cost": 1027, "memory_cost": 1736704}	2017314427	122.43.171.120
c0e8c0add418bd52c1b6daa0a2929711	2	13	2021-01-05 12:41:09.314209+00	119	#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#pragma warning(disable:4996)\n\n\nusing namespace std;\n\n\nint main()\n{\n\tchar text[40];\n\tchar temp;\n\tint flag;\n\tint check = -1;\n\tchar words[7] = { 'H','I','N','O','S','X','Z' };\n\tscanf("%s", text);\n\tfor (int i = 0; i < strlen(text); i++)\n\t{\n\t\ttemp = text[i];\n\t\tflag = 0;\n\t\tfor (char c : words)\n\t\t{\n\t\t\tif (temp == c)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == 0)\n\t\t{\n\t\t\tcheck = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (check == 0)\n\t{\n\t\tprintf("NO");\n\t}\n\telse if (check == -1)\n\t{\n\t\tprintf("YES");\n\t}\n\n\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3653632, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3657728, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3633152, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3616768, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3620864, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3735552, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3649536, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3735552}	2019312807	39.112.206.136
16129d1e2234b668389da4ddedf08c8a	2	12	2021-01-05 08:47:03.634728+00	136	#include <cstdio>\nusing namespace std;\nint main() {\n    int incr = 0; int decr = 0; int same = 0;\n    int a, b, c, d;\n    scanf("%d\\n", &a);\n    scanf("%d\\n", &b);\n    scanf("%d\\n", &c);\n    scanf("%d", &d);\n    a<b?incr++:(a==b?same++:decr++);\n    b<c?incr++:(a==b?same++:decr++);\n    c<d?incr++:(a==b?same++:decr++);\n    if (incr==3)printf("Uphill");\n    else if (decr==3)printf("Downhill");\n    else if (same==3)printf("Flat Land");\n    else printf("Unknown");\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1642496, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1646592, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	C++	f	{"time_cost": 1, "memory_cost": 1736704}	2019311778	58.77.154.119
1b7369011a5f795d6943b5f99ee15277	2	13	2021-01-05 14:34:44.924412+00	142	word = input()\nprint("YES")	4	{"err": null, "data": [{"error": 0, "memory": 7430144, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 17, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 7475200, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 14, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 7413760, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 10, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 7462912, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 16, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 7335936, "output": null, "result": 4, "signal": 0, "cpu_time": 3, "exit_code": 1, "real_time": 12, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 7397376, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 7475200, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 16, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 7303168, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 16, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 7348224, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 7340032, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 13, "test_case": "10", "output_md5": null}]}	Python2	f	{"time_cost": 16, "memory_cost": 7475200}	2020311733	1.225.26.118
833c90c19c42f2b3fae728446ebc3af6	2	14	2021-01-05 08:26:26.760254+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\nint count(int *arr,int n,int a);\n\n\nint main(void)\n{\n\tint n, a, k = 0;\n\tscanf("%d", &n);\n\tint* Pnum = malloc(sizeof(int) * n);\n\n\ta = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tscanf("%d", &Pnum[i]);\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0)\n\t\t\tk += 1;\n\t}\n\tint* PP = malloc(sizeof(int) * k);\n\n\tint j = 0;\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0) {\n\t\t\tPP[j] = i;\n\t\t\tj += 1;\n\t\t}\n\t}\n\n\tint ans = 1;\n\n\tfor (int i = 0; i < k; i++) {\n\t\tint f=1;\n\t\tint newn = 0;\n\t\tint out = count(Pnum, n, PP[i]);\n\t\tint* thang = malloc(sizeof(int) * (n - out));\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (Pnum[j] != PP[i]) {\n\t\t\t\tthang[newn] = Pnum[j];\n\t\t\t\tnewn += 1;\n\t\t\t}\n\t\t}\n\t\tfor (j = 0; j < n - out-1; j++) {\n\t\t\tif (thang[j] == thang[j + 1]) {\n\t\t\t\tf += 1;\n\t\t\t\tif (f >= ans)\n\t\t\t\t\tans = f;\n\t\t\t}\n\t\t\telse\n\t\t\t\tf = 1;\n\t\t}\n\t\tfree(thang);\n\t}\n\tprintf("%d", ans);\n\tfree(Pnum);\n\tfree(PP);\n}\n\nint count(int* arr, int n,int a) {\n\tint z = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] == a)\n\t\t\tz += 1;\n\t}\n\treturn z;\n}	1	{"err": null, "data": [{"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 24, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 982, "exit_code": 0, "real_time": 983, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 23, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1642496, "output": null, "result": 0, "signal": 0, "cpu_time": 37, "exit_code": 0, "real_time": 38, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 109, "exit_code": 0, "real_time": 110, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1613824, "output": null, "result": 0, "signal": 0, "cpu_time": 110, "exit_code": 0, "real_time": 111, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 111, "exit_code": 0, "real_time": 112, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 970, "exit_code": 0, "real_time": 971, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 976, "exit_code": 0, "real_time": 977, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1708032, "output": null, "result": 0, "signal": 0, "cpu_time": 975, "exit_code": 0, "real_time": 976, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1708032, "output": null, "result": 0, "signal": 0, "cpu_time": 967, "exit_code": 0, "real_time": 973, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 993, "exit_code": 0, "real_time": 994, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1634304, "output": null, "result": 0, "signal": 0, "cpu_time": 975, "exit_code": 0, "real_time": 976, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 975, "exit_code": 0, "real_time": 976, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 988, "exit_code": 0, "real_time": 993, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 1683456, "output": null, "result": 1, "signal": 0, "cpu_time": 1001, "exit_code": 0, "real_time": 1002, "test_case": "16", "output_md5": null}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 972, "exit_code": 0, "real_time": 973, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 966, "exit_code": 0, "real_time": 967, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 975, "exit_code": 0, "real_time": 976, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 965, "exit_code": 0, "real_time": 970, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 1687552, "output": null, "result": 0, "signal": 0, "cpu_time": 967, "exit_code": 0, "real_time": 972, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 971, "exit_code": 0, "real_time": 977, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C	f	{"time_cost": 1001, "memory_cost": 1736704}	2017314427	122.43.171.120
1d36adb1b275c33a7f022aada1f17134	2	15	2021-01-05 11:15:06.600151+00	12	#include <iostream>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\nint N, M;\nvector<int> graph[50001];\nint money[10001];\nvector<int> s[10001];\nint check[10001];\nbool dfs(int i, int k)\n{\n    if (check[i])\n        return false;\n    s[k].push_back(i);\n    check[i] = 1;\n    for (int q = 0; q < graph[i].size(); q++)\n    {\n        if (check[graph[i][q]])\n            continue;\n        dfs(graph[i][q], k);\n    }\n    return true;\n}\nbool ch(int idx)\n{\n    int sum = 0;\n    for (int i = 0; i < s[idx].size(); i++)\n    {\n        //cout << "뭐지" << s[idx][i] << endl;\n        sum += money[s[idx][i]];\n    }\n    //cout << sum << " " << idx << endl;\n    if (sum != 0)\n        return false;\n    return true;\n}\nint main()\n{\n    cin >> N >> M;\n    for (int i = 0; i < N; i++)\n        cin >> money[i];\n    for (int i = 0; i < M; i++)\n    {\n        int a, b;\n        cin >> a >> b;\n        graph[a].push_back(b);\n        graph[b].push_back(a);\n    }\n    int k = 0;\n    for (int i = 0; i < N; i++)\n    {\n        if (dfs(i, k))\n            k++;\n    }\n    for (int i = 0; i < N; i++)\n    {\n        if (s[i].size() == 0)\n            break;\n        if (!ch(i))\n        {\n            cout << "IMPOSSIBLE" << endl;\n            return 0;\n        }\n    }\n    cout << "POSSIBLE" << endl;\n}	0	{"err": null, "data": [{"error": 0, "memory": 5459968, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 23, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 5464064, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 5353472, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 14, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 5758976, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 23, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 5197824, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 11, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 5345280, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 11, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 5652480, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 5189632, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 9, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 5541888, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 21, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 22, "memory_cost": 5758976}	2016311327	121.136.228.184
3058bbdb9651d72d82718bcd4e0598c0	2	14	2021-01-05 08:27:20.461432+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\nint count(int *arr,int n);\n\n\nint main(void)\n{\n\tint n, a, k = 0;\n\tscanf("%d", &n);\n\tint* Pnum = malloc(sizeof(int) * n);\n\n\ta = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tscanf("%d", &Pnum[i]);\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0)\n\t\t\tk += 1;\n\t}\n\tint* PP = malloc(sizeof(int) * k);\n\n\tint j = 0;\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0) {\n\t\t\tPP[j] = i;\n\t\t\tj += 1;\n\t\t}\n\t}\n\n\tint ans = 1;\n\n\tfor (int i = 0; i < k; i++) {\n\t\tint f=1;\n\t\tint newn = 0;\n\t\tint out = count(Pnum, n, PP[i]);\n\t\tint* thang = malloc(sizeof(int) * (n - out));\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (Pnum[j] != PP[i]) {\n\t\t\t\tthang[newn] = Pnum[j];\n\t\t\t\tnewn += 1;\n\t\t\t}\n\t\t}\n\t\tfor (j = 0; j < n - out-1; j++) {\n\t\t\tif (thang[j] == thang[j + 1]) {\n\t\t\t\tf += 1;\n\t\t\t\tif (f >= ans)\n\t\t\t\t\tans = f;\n\t\t\t}\n\t\t\telse\n\t\t\t\tf = 1;\n\t\t}\n\t\tfree(thang);\n\t}\n\tprintf("%d", ans);\n\tfree(Pnum);\n\tfree(PP);\n}\n\nint count(int* arr, int n,int a) {\n\tint z = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] == a)\n\t\t\tz += 1;\n\t}\n\treturn z;\n}	-2	{}	C	f	{"score": 0, "err_info": "/judger/run/5942c44f8e554cfe82397dfe98f88481/main.c: In function 'main':\\n/judger/run/5942c44f8e554cfe82397dfe98f88481/main.c:17:7: error: too many arguments to function 'count'\\n   if (count(Pnum, n, i) != 0)\\n       ^~~~~\\n/judger/run/5942c44f8e554cfe82397dfe98f88481/main.c:4:5: note: declared here\\n int count(int *arr,int n);\\n     ^~~~~\\n/judger/run/5942c44f8e554cfe82397dfe98f88481/main.c:24:7: error: too many arguments to function 'count'\\n   if (count(Pnum, n, i) != 0) {\\n       ^~~~~\\n/judger/run/5942c44f8e554cfe82397dfe98f88481/main.c:4:5: note: declared here\\n int count(int *arr,int n);\\n     ^~~~~\\n/judger/run/5942c44f8e554cfe82397dfe98f88481/main.c:35:13: error: too many arguments to function 'count'\\n   int out = count(Pnum, n, PP[i]);\\n             ^~~~~\\n/judger/run/5942c44f8e554cfe82397dfe98f88481/main.c:4:5: note: declared here\\n int count(int *arr,int n);\\n     ^~~~~\\ncompilation terminated due to -fmax-errors=3."}	2017314427	122.43.171.120
a2f767a350cb3176461b24399b1b3d47	2	12	2021-01-05 08:48:49.714159+00	136	#include <cstdio>\nusing namespace std;\nint main() {\n    int incr = 0; int decr = 0; int same = 0;\n    int a, b, c, d;\n    scanf("%d\\n", &a);\n    scanf("%d\\n", &b);\n    scanf("%d\\n", &c);\n    scanf("%d", &d);\n    a<b?incr++:(a==b?same++:decr++);\n    b<c?incr++:(b==c?same++:decr++);\n    c<d?incr++:(c==d?same++:decr++);\n    if (incr==3)printf("Uphill");\n    else if (decr==3)printf("Downhill");\n    else if (same==3)printf("Flat Land");\n    else printf("Unknown");\n}	0	{"err": null, "data": [{"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1708032, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 1, "memory_cost": 1708032}	2019311778	58.77.154.119
ba4bc40d9726bc7b72d3f72b61a737c8	2	14	2021-01-05 08:27:30.389402+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\nint count(int *arr,int n,int a);\n\n\nint main(void)\n{\n\tint n, a, k = 0;\n\tscanf("%d", &n);\n\tint* Pnum = malloc(sizeof(int) * n);\n\n\ta = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tscanf("%d", &Pnum[i]);\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0)\n\t\t\tk += 1;\n\t}\n\tint* PP = malloc(sizeof(int) * k);\n\n\tint j = 0;\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0) {\n\t\t\tPP[j] = i;\n\t\t\tj += 1;\n\t\t}\n\t}\n\n\tint ans = 1;\n\n\tfor (int i = 0; i < k; i++) {\n\t\tint f=1;\n\t\tint newn = 0;\n\t\tint out = count(Pnum, n, PP[i]);\n\t\tint* thang = malloc(sizeof(int) * (n - out));\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (Pnum[j] != PP[i]) {\n\t\t\t\tthang[newn] = Pnum[j];\n\t\t\t\tnewn += 1;\n\t\t\t}\n\t\t}\n\t\tfor (j = 0; j < n - out-1; j++) {\n\t\t\tif (thang[j] == thang[j + 1]) {\n\t\t\t\tf += 1;\n\t\t\t\tif (f >= ans)\n\t\t\t\t\tans = f;\n\t\t\t}\n\t\t\telse\n\t\t\t\tf = 1;\n\t\t}\n\t\tfree(thang);\n\t}\n\tprintf("%d", ans);\n\tfree(Pnum);\n\tfree(PP);\n}\n\nint count(int* arr, int n,int a) {\n\tint z = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] == a)\n\t\t\tz += 1;\n\t}\n\treturn z;\n}	1	{"err": null, "data": [{"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1708032, "output": null, "result": 0, "signal": 0, "cpu_time": 972, "exit_code": 0, "real_time": 974, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 27, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 28, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 105, "exit_code": 0, "real_time": 105, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1601536, "output": null, "result": 0, "signal": 0, "cpu_time": 113, "exit_code": 0, "real_time": 113, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 104, "exit_code": 0, "real_time": 109, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 969, "exit_code": 0, "real_time": 974, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 1626112, "output": null, "result": 1, "signal": 0, "cpu_time": 1053, "exit_code": 0, "real_time": 1054, "test_case": "9", "output_md5": null}, {"error": 0, "memory": 1699840, "output": null, "result": 1, "signal": 0, "cpu_time": 1019, "exit_code": 0, "real_time": 1020, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 1708032, "output": null, "result": 0, "signal": 0, "cpu_time": 975, "exit_code": 0, "real_time": 975, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 996, "exit_code": 0, "real_time": 997, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 987, "exit_code": 0, "real_time": 989, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1634304, "output": null, "result": 0, "signal": 0, "cpu_time": 977, "exit_code": 0, "real_time": 978, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 975, "exit_code": 0, "real_time": 976, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 1662976, "output": null, "result": 1, "signal": 0, "cpu_time": 1036, "exit_code": 0, "real_time": 1037, "test_case": "16", "output_md5": null}, {"error": 0, "memory": 1691648, "output": null, "result": 1, "signal": 0, "cpu_time": 1024, "exit_code": 0, "real_time": 1025, "test_case": "17", "output_md5": null}, {"error": 0, "memory": 1634304, "output": null, "result": 0, "signal": 0, "cpu_time": 983, "exit_code": 0, "real_time": 984, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 986, "exit_code": 0, "real_time": 986, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 970, "exit_code": 0, "real_time": 972, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 976, "exit_code": 0, "real_time": 977, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 971, "exit_code": 0, "real_time": 971, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C	f	{"time_cost": 1053, "memory_cost": 1736704}	2017314427	122.43.171.120
15a7dc8a45574d830c458ca90fded9c1	2	15	2021-01-05 11:20:49.514153+00	90	N, M = input().split()\ndebt = []\nfor i in range(0, int(N)):\n    debt.append(int(input()))\n\n\nfor k in range(0, int(M)):\n    a, b = input().split(' ')\n    debt[int(b)] = debt[int(a)] + debt[int(b)]\n    debt[int(a)] = 0\n\nif sum(debt) == 0:\n    print('POSSIBLE')\n\nelse:\n    print('IMPOSSIBLE')	-1	{"err": null, "data": [{"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 48, "exit_code": 0, "real_time": 56, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 55, "exit_code": 0, "real_time": 64, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 8970240, "output": null, "result": 0, "signal": 0, "cpu_time": 28, "exit_code": 0, "real_time": 36, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 8925184, "output": null, "result": 0, "signal": 0, "cpu_time": 70, "exit_code": 0, "real_time": 82, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 8921088, "output": null, "result": 0, "signal": 0, "cpu_time": 27, "exit_code": 0, "real_time": 36, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 32, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 42, "exit_code": 0, "real_time": 47, "test_case": "7", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 29, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9187328, "output": null, "result": 0, "signal": 0, "cpu_time": 41, "exit_code": 0, "real_time": 46, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	Python3	f	{"time_cost": 70, "memory_cost": 9187328}	2014310464	1.241.19.62
ad59452f3ef32d07c240f5d55906265e	2	14	2021-01-05 08:29:03.834376+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\nint count(int *arr,int n,int a);\n\n\nint main(void)\n{\n\tint n, k = 0;\n\tscanf("%d", &n);\n\tint* Pnum = malloc(sizeof(int) * n);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf("%d", &Pnum[i]);\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0)\n\t\t\tk += 1;\n\t}\n\tint* PP = malloc(sizeof(int) * k);\n\n\tint j = 0;\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0) {\n\t\t\tPP[j] = i;\n\t\t\tj += 1;\n\t\t}\n\t}\n\n\tint ans = 1;\n\n\tfor (int i = 0; i < k; i++) {\n\t\tint f=1;\n\t\tint newn = 0;\n\t\tint out = count(Pnum, n, PP[i]);\n\t\tint* thang = malloc(sizeof(int) * (n - out));\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (Pnum[j] != PP[i]) {\n\t\t\t\tthang[newn] = Pnum[j];\n\t\t\t\tnewn += 1;\n\t\t\t}\n\t\t}\n\t\tfor (j = 0; j < n - out-1; j++) {\n\t\t\tif (thang[j] == thang[j + 1]) {\n\t\t\t\tf += 1;\n\t\t\t\tif (f >= ans)\n\t\t\t\t\tans = f;\n\t\t\t}\n\t\t\telse\n\t\t\t\tf = 1;\n\t\t}\n\t\tfree(thang);\n\t}\n\tprintf("%d", ans);\n\tfree(Pnum);\n\tfree(PP);\n}\n\nint count(int* arr, int n,int a) {\n\tint z = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] == a)\n\t\t\tz += 1;\n\t}\n\treturn z;\n}	1	{"err": null, "data": [{"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 976, "exit_code": 0, "real_time": 976, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 1691648, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 26, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 26, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 105, "exit_code": 0, "real_time": 110, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 136, "exit_code": 0, "real_time": 137, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 103, "exit_code": 0, "real_time": 108, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 974, "exit_code": 0, "real_time": 975, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 1712128, "output": null, "result": 0, "signal": 0, "cpu_time": 972, "exit_code": 0, "real_time": 973, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1626112, "output": null, "result": 1, "signal": 0, "cpu_time": 1004, "exit_code": 0, "real_time": 1005, "test_case": "10", "output_md5": null}, {"error": 0, "memory": 1675264, "output": null, "result": 0, "signal": 0, "cpu_time": 972, "exit_code": 0, "real_time": 973, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 970, "exit_code": 0, "real_time": 975, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 978, "exit_code": 0, "real_time": 980, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 975, "exit_code": 0, "real_time": 980, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1650688, "output": null, "result": 1, "signal": 0, "cpu_time": 1013, "exit_code": 0, "real_time": 1014, "test_case": "15", "output_md5": null}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 973, "exit_code": 0, "real_time": 979, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 984, "exit_code": 0, "real_time": 988, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 970, "exit_code": 0, "real_time": 975, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 1675264, "output": null, "result": 0, "signal": 0, "cpu_time": 968, "exit_code": 0, "real_time": 973, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 972, "exit_code": 0, "real_time": 977, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 970, "exit_code": 0, "real_time": 972, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 977, "exit_code": 0, "real_time": 978, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C	f	{"time_cost": 1013, "memory_cost": 1736704}	2017314427	122.43.171.120
40b916eb9dd526cc0070daf51b8f5be0	2	13	2021-01-05 15:50:34.402747+00	145	#include <stdio.h>\n\nchar str[100];\nint isOkay[256];\n\nint main(void) {\n  int ret = 1;\n  scanf("%s", str);\n  isOkay['H'] = isOkay['I'] = isOkay['N'] = isOkay['O'] = isOkay['S'] = isOkay['X'] = isOkay['Z'] = 1;\n  \n  for (int i = 0; str[i] != '\\0'; ++i) {\n    if (!isOkay[str[i]]) {\n      ret = 0;\n      break;\n    }\n  }\n  \n  if (ret) {\n    printf("YES");\n  } else {\n    printf("NO");\n  }\n}	0	{"err": null, "data": [{"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1642496, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1703936}	2015314758	211.208.96.4
2cee926792484ff3ca0b94a1ba5b60b2	2	13	2021-01-05 12:41:12.381167+00	119	#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iostream>\n#pragma warning(disable:4996)\n\n\nusing namespace std;\n\n\nint main()\n{\n\tchar text[40];\n\tchar temp;\n\tint flag;\n\tint check = -1;\n\tchar words[7] = { 'H','I','N','O','S','X','Z' };\n\tscanf("%s", text);\n\tfor (int i = 0; i < strlen(text); i++)\n\t{\n\t\ttemp = text[i];\n\t\tflag = 0;\n\t\tfor (char c : words)\n\t\t{\n\t\t\tif (temp == c)\n\t\t\t{\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == 0)\n\t\t{\n\t\t\tcheck = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (check == 0)\n\t{\n\t\tprintf("NO");\n\t}\n\telse if (check == -1)\n\t{\n\t\tprintf("YES");\n\t}\n\n\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3731456, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3743744, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3739648, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3743744}	2019312807	39.112.206.136
22e2bb133489435d07c4bc9fa94ac47d	2	14	2021-01-05 08:30:43.359034+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\nint count(int *arr,int n,int a);\n\n\nint main(void)\n{\n\tint n=0, k = 0;\n\tscanf("%d", &n);\n\tint* Pnum = malloc(sizeof(int) * n);\n  \n\tfor (int i = 0; i < n; i++)\n\t\tscanf("%d", &Pnum[i]);\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0)\n\t\t\tk += 1;\n\t}\n\tint* PP = malloc(sizeof(int) * k);\n\n\tint j = 0;\n\tfor (int i = 1; i < 1000001; i++) {\n\t\tif (count(Pnum, n, i) != 0) {\n\t\t\tPP[j] = i;\n\t\t\tj += 1;\n\t\t}\n\t}\n\n\tint ans = 1;\n\n\tfor (int i = 0; i < k; i++) {\n\t\tint f=1;\n\t\tint newn = 0;\n\t\tint out = count(Pnum, n, PP[i]);\n\t\tint* thang = malloc(sizeof(int) * (n - out));\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (Pnum[j] != PP[i]) {\n\t\t\t\tthang[newn] = Pnum[j];\n\t\t\t\tnewn += 1;\n\t\t\t}\n\t\t}\n\t\tfor (j = 0; j < n - out-1; j++) {\n\t\t\tif (thang[j] == thang[j + 1]) {\n\t\t\t\tf += 1;\n\t\t\t\tif (f >= ans)\n\t\t\t\t\tans = f;\n\t\t\t}\n\t\t\telse\n\t\t\t\tf = 1;\n\t\t}\n\t\tfree(thang);\n\t}\n\tprintf("%d", ans);\n\tfree(Pnum);\n\tfree(PP);\n}\n\nint count(int* arr, int n,int a) {\n\tint z = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] == a)\n\t\t\tz += 1;\n\t}\n\treturn z;\n}	1	{"err": null, "data": [{"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 13, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1662976, "output": null, "result": 0, "signal": 0, "cpu_time": 980, "exit_code": 0, "real_time": 984, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 1662976, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 28, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 33, "exit_code": 0, "real_time": 38, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1671168, "output": null, "result": 0, "signal": 0, "cpu_time": 107, "exit_code": 0, "real_time": 107, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 149, "exit_code": 0, "real_time": 154, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1695744, "output": null, "result": 0, "signal": 0, "cpu_time": 147, "exit_code": 0, "real_time": 152, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 973, "exit_code": 0, "real_time": 978, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 1675264, "output": null, "result": 0, "signal": 0, "cpu_time": 967, "exit_code": 0, "real_time": 971, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 970, "exit_code": 0, "real_time": 972, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1675264, "output": null, "result": 0, "signal": 0, "cpu_time": 966, "exit_code": 0, "real_time": 967, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1712128, "output": null, "result": 0, "signal": 0, "cpu_time": 972, "exit_code": 0, "real_time": 974, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 990, "exit_code": 0, "real_time": 991, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 990, "exit_code": 0, "real_time": 991, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1675264, "output": null, "result": 0, "signal": 0, "cpu_time": 989, "exit_code": 0, "real_time": 990, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 978, "exit_code": 0, "real_time": 983, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 972, "exit_code": 0, "real_time": 973, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1671168, "output": null, "result": 0, "signal": 0, "cpu_time": 994, "exit_code": 0, "real_time": 994, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 1699840, "output": null, "result": 0, "signal": 0, "cpu_time": 977, "exit_code": 0, "real_time": 978, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 971, "exit_code": 0, "real_time": 972, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 1662976, "output": null, "result": 1, "signal": 0, "cpu_time": 1006, "exit_code": 0, "real_time": 1006, "test_case": "21", "output_md5": null}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 967, "exit_code": 0, "real_time": 967, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C	f	{"time_cost": 1006, "memory_cost": 1736704}	2017314427	122.43.171.120
304162be82e799d2824837b36de7ef2a	2	15	2021-01-05 11:27:59.039436+00	90	N, M = input().split()\ndebt = []\nfor i in range(0, int(N)):\n    debt.append(int(input()))\n\n\nfor k in range(0, int(M)):\n    a, b = input().split(' ')\n    debt[int(b)] = debt[int(a)] + debt[int(b)]\n    debt[int(a)] = 0\n\nif sum(debt) == 0:\n    print('POSSIBLE')\n\nelse:\n    print('IMPOSSIBLE')	-1	{"err": null, "data": [{"error": 0, "memory": 9105408, "output": null, "result": 0, "signal": 0, "cpu_time": 41, "exit_code": 0, "real_time": 49, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 54, "exit_code": 0, "real_time": 63, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 30, "exit_code": 0, "real_time": 39, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 73, "exit_code": 0, "real_time": 81, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 34, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 32, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9060352, "output": null, "result": -1, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 50, "test_case": "7", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9060352, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 27, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 9195520, "output": null, "result": 0, "signal": 0, "cpu_time": 49, "exit_code": 0, "real_time": 50, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	Python3	f	{"time_cost": 73, "memory_cost": 9195520}	2014310464	1.241.19.62
893efa423f46c1325a9368a192a9ac33	2	16	2021-01-05 12:30:43.549401+00	12	#include <iostream>\n#include <algorithm>\nusing namespace std;\nint N, M;\nlong long maxi = 989898987654321;\nint ty[11];\nint present = 0;\nint v[11];\nint max_num = 0;\nbool go(int idx, int remain, long long price)\n{\n    //cout << remain << " " << idx << endl;\n    if (remain == M)\n    {\n        maxi = min(maxi, price);\n        return false;\n    }\n    if (remain < M)\n        return false;\n    if (idx == N)\n        return true;\n    go(idx + 1, present, price);\n    for (int i = 1; i < M; i++)\n    {\n        if (ty[idx] - i == 0)\n            break;\n        go(idx + 1, remain - (ty[idx] * ty[idx]) + ((ty[idx] - i) * (ty[idx] - i)), price + (ty[idx] - i) * (ty[idx] - i));\n    }\n    return true;\n}\nbool find_v(int idx, int remain, int before)\n{\n    if (remain == M && idx == N)\n        return true;\n    if (remain > M || idx == N)\n        return false;\n    for (int i = before; i < max_num; i++)\n    {\n        v[idx] = i;\n        if (find_v(idx + 1, remain + i * i, i))\n        {\n            return true;\n        }\n        v[idx] = 0;\n    }\n    return false;\n}\nvoid check()\n{\n    long long ans = 0;\n    for (int i = 0; i < N; i++)\n    {\n        if (ty[i] - v[i] < 0)\n            return;\n        ans += (ty[i] - v[i]) * (ty[i] - v[i]);\n    }\n    maxi = min(ans, maxi);\n}\nint main()\n{\n    cin >> N >> M;\n    for (int i = 0; i < N; i++)\n        cin >> ty[i], present += ty[i] * ty[i], max_num = max(max_num, ty[i]);\n    find_v(0, 0, 1);\n    do\n    {\n        check();\n    } while (next_permutation(&v[0], &v[N]));\n    if (maxi == 989898987654321)\n        cout << -1 << endl;\n    else\n        cout << maxi << endl;\n\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3346432, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "51e6d6e679953c6311757004d8cbbba9"}, {"error": 0, "memory": 3424256, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "efba0d602748d6f5066384a22b186e5b"}, {"error": 0, "memory": 3395584, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3473408, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "fef98f01e3e52383bec61a7136d4ecb9"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3538944, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "02e74f10e0327ad868d138f2b4fdd6f0"}, {"error": 0, "memory": 3371008, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "9778d5d219c5080b9a6a17bef029331c"}, {"error": 0, "memory": 3428352, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "11", "output_md5": "f5c80b20fdee4e645ff315a56f12a716"}, {"error": 0, "memory": 3432448, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "239f914f30ea3c948fce2ea07a9efb33"}]}	C++	f	{"time_cost": 2, "memory_cost": 3538944}	2016311327	121.136.228.184
2e9afbe69606891cf81bd0c38cd4b7d7	2	14	2021-01-05 13:04:59.326251+00	99	#include<stdio.h>\n#include<stdlib.h>\ntypedef struct _Node \n{\n\tint data;\n\tstruct _Node* next;\n}Node;\nvoid insertitem(Node* head, int item)\n{\n\tNode* temp = (Node*)malloc(sizeof(Node));\n\tNode* cur = (Node*)malloc(sizeof(Node));\n\tcur = head;\n\ttemp->data = item;\n\ttemp->next = NULL;\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = temp;\n}\nNode* deletednode(int arr[],int len, int item)\n{\n\tNode* temp = (Node*)malloc(sizeof(Node));\n\tint startnum = 0;\n\twhile (arr[startnum] == item)\n\t\tstartnum++;\n\ttemp->next = NULL;\n\ttemp->data = arr[startnum];\n\tstartnum++;\n\tfor (int i = startnum; i < len; i++)\n\t{\n\t\tif (arr[i] != item)\n\t\t\tinsertitem(temp, arr[i]);\n\t}\n\treturn temp;\n}\nint findmaxlen(Node* head)\n{\n\tNode* cur = (Node*)malloc(sizeof(Node));\n\tcur = head;\n\tint maxlen=1;\n\tint tempmax=1;\n\twhile (cur->next != NULL)\n\t{\n\t\tif (cur->data == cur->next->data)\n\t\t\ttempmax++;\n\t\telse\n\t\t{\n\t\t\tif (tempmax > maxlen)\n\t\t\t\tmaxlen = tempmax;\n\t\t\ttempmax = 1;\n\t\t}\n\t\tcur = cur->next;\n\t}\n\tif (tempmax > maxlen)\n\t\tmaxlen = tempmax;\n\treturn maxlen;\n}\n\nint main()\n{\n\tint x;\n\tscanf("%d", &x);\n\tint* p = (int*)malloc(sizeof(int) * x);\n\tfor (int i = 0; i < x; i++)\n\t\tscanf("%d", &p[i]);\n\tint A[1000];\n\tint count = 1;\n\tA[0] = p[0];\n\tfor (int i = 1; i < x; i++)\n\t{\n\t\tint check = 0;\n\t\tfor (int j = 0; j < count; j++)\n\t\t{\n\t\t\tif (p[i] == A[j])\n\t\t\t\tcheck = 1;\n\t\t}\n\t\tif (check == 0)\n\t\t{\n\t\t\tA[count] = p[i];\n\t\t\tcount++;\n\t\t}\n\t}\n\tint maxlength = 1;\n\tfor (int i = 0; i < count; i++)\n\t{\n\t\tNode* temp = (Node*)malloc(sizeof(Node));\n\t\ttemp = deletednode(p, x, A[i]);\n\t\tint templen = findmaxlen(temp);\n\t\tif (templen > maxlength)\n\t\t\tmaxlength = templen;\n\t}\n\tprintf("%d", maxlength);\n}	0	{"err": null, "data": [{"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 33681408, "output": null, "result": 0, "signal": 0, "cpu_time": 482, "exit_code": 0, "real_time": 491, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 1675264, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1732608, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1748992, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1789952, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1667072, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1761280, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 1921024, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 9, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 2310144, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 13, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3272704, "output": null, "result": 0, "signal": 0, "cpu_time": 27, "exit_code": 0, "real_time": 31, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 4800512, "output": null, "result": 0, "signal": 0, "cpu_time": 46, "exit_code": 0, "real_time": 50, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 15966208, "output": null, "result": 0, "signal": 0, "cpu_time": 218, "exit_code": 0, "real_time": 222, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 22048768, "output": null, "result": 0, "signal": 0, "cpu_time": 299, "exit_code": 0, "real_time": 316, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 1740800, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 4853760, "output": null, "result": 0, "signal": 0, "cpu_time": 47, "exit_code": 0, "real_time": 51, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1994752, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 2969600, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 24, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 2957312, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 23, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 2887680, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 23, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3055616, "output": null, "result": 0, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 27, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C	f	{"time_cost": 482, "memory_cost": 33681408}	2016311522	116.126.252.101
87fd4410bd41fdcb249ceeff88a506f1	2	12	2021-01-05 14:00:41.403767+00	35	#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint list[4];\nint s;\nint uphill(int cur){\n  s=2;\n  if(cur==3){\n    return 0;\n  }\n  if(list[cur]>=list[cur+1]){\n    s=1;\n    return 0;\n  }\n  uphill(cur+1);\n}\nint downhill(int cur){\n  s=3;\n  if(cur==3){\n    return 0;\n  }\n  if(list[cur]<=list[cur+1]){\n    s=1;\n    return 0;\n  }\n  downhill(cur+1);\n}\nint flat(int cur){\n  s=4;\n  if(cur==3){\n    return 0;\n  }\n  if(list[cur]!=list[cur+1]){\n    s=1;\n    return 0;\n  }\n  flat(cur+1);\n}\nint main(void){\n  int before;\n  int after;\n  for(int i=0;i<4;i++){\n    scanf("%d",&list[i]);\n  }\n  if(list[0]<list[1]){\n    uphill(1);\n  }\n  else if(list[0]>list[1]){\n    downhill(1);\n  }\n  else{\n    flat(1);\n  }\n  if(s==1){\n    printf("Unknown");\n  }\n  else if(s==2){\n    printf("Uphill");\n  }\n  else if(s==3){\n    printf("Downhill");\n  }\n  else{\n    printf("Flat Land");\n  }\n}	0	{"err": null, "data": [{"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1593344, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1658880, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1683456}	2019313491	116.37.178.202
c2e88ffa6ac73f2bb3da449dc48c7e6a	2	14	2021-01-05 08:57:15.204198+00	127	#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n\nint count(int *arr,int n,int a);\n\n\nint main(void)\n{\n\tint n, a=0, k = 0;\n\tscanf("%d", &n);\n\tint* Pnum = malloc(sizeof(int) * n);\n\tfor (int i = 0; i < n; i++)\n\t\tscanf("%d", &Pnum[i]);\n\tfor (int i = 0; i < n; i++) {\n\t\tif (Pnum[i] >= a)\n\t\t\ta = Pnum[i];\n\t}\n\tfor (int i = 1; i < a+1; i++) {\n\t\tif (count(Pnum, n, i) != 0)\n\t\t\tk += 1;\n\t}\n\tint* PP = malloc(sizeof(int) * k);\n\n\tint j = 0;\n\tfor (int i = 1; i < a+1; i++) {\n\t\tif (count(Pnum, n, i) != 0) {\n\t\t\tPP[j] = i;\n\t\t\tj += 1;\n\t\t}\n\t}\n\tint ans = 1;\n\n\tfor (int i = 0; i < k; i++) {\n\t\tint f=1;\n\t\tint newn = 0;\n\t\tint out = count(Pnum, n, PP[i]);\n\t\tint* thang = malloc(sizeof(int) * (n - out));\n\t\tfor (j = 0; j < n; j++) {\n\t\t\tif (Pnum[j] != PP[i]) {\n\t\t\t\tthang[newn] = Pnum[j];\n\t\t\t\tnewn += 1;\n\t\t\t}\n\t\t}\n\t\tfor (j = 0; j < n - out-1; j++) {\n\t\t\tif (thang[j] == thang[j + 1]) {\n\t\t\t\tf += 1;\n\t\t\t\tif (f >= ans)\n\t\t\t\t\tans = f;\n\t\t\t}\n\t\t\telse\n\t\t\t\tf = 1;\n\t\t}\n\t\tfree(thang);\n\t}\n\tprintf("%d", ans);\n\tfree(Pnum);\n\tfree(PP);\n}\n\nint count(int* arr, int n,int a) {\n\tint z = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] == a)\n\t\t\tz += 1;\n\t}\n\treturn z;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1671168, "output": null, "result": 0, "signal": 0, "cpu_time": 100, "exit_code": 0, "real_time": 105, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 106, "exit_code": 0, "real_time": 107, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1671168, "output": null, "result": 0, "signal": 0, "cpu_time": 96, "exit_code": 0, "real_time": 97, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1630208, "output": null, "result": 0, "signal": 0, "cpu_time": 878, "exit_code": 0, "real_time": 879, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 1605632, "output": null, "result": 0, "signal": 0, "cpu_time": 953, "exit_code": 0, "real_time": 958, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1675264, "output": null, "result": 0, "signal": 0, "cpu_time": 950, "exit_code": 0, "real_time": 952, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 941, "exit_code": 0, "real_time": 946, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 938, "exit_code": 0, "real_time": 939, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 966, "exit_code": 0, "real_time": 966, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 968, "exit_code": 0, "real_time": 969, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 942, "exit_code": 0, "real_time": 943, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 906, "exit_code": 0, "real_time": 911, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 1708032, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 1708032, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 966, "exit_code": 0, "real_time": 967, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 1712128, "output": null, "result": 0, "signal": 0, "cpu_time": 964, "exit_code": 0, "real_time": 965, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 964, "exit_code": 0, "real_time": 969, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 1671168, "output": null, "result": 0, "signal": 0, "cpu_time": 950, "exit_code": 0, "real_time": 953, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C	f	{"time_cost": 968, "memory_cost": 1736704}	2017314427	122.43.171.120
e1287607319880600aae6dc539832fea	2	14	2021-01-05 15:00:08.125877+00	141	cnt = int(input()) #사람 수\ncntList = [] #같은 수의 붕어빵을 사려고 하는 사람들이 연속된 수\nnumList = [] #붕어빵 수\ncnt2 = 0 #새로운 배열의 길이\nmaxNum = 0\nlineNum = 0\ncntNum = 0\nmissNum = 0\n\nfor i in range(cnt) :\n    num = int(input())\n    if i == 0 :\n        cntList.append(1)\n        numList.append(num)\n    elif num == numList[cnt2] :\n        cntList[cnt2] += 1\n    else :\n        cntList.append(1)\n        numList.append(num)\n        cnt2 += 1    \n    if cntList[cnt2] > maxNum :\n        maxNum = cntList[cnt2]\n\nfor i in range(cnt2-1) :\n    # print(maxNum)\n    if numList[i] == numList[i+2] :\n        missNum = numList[i+1]\n        cntNum = numList[i]\n        lineNum = cntList[i] + cntList[i+2]\n        for j in range(i+3, cnt2+1) :\n            if numList[j] == cntNum :\n                lineNum += cntList[j]\n            elif numList[j] == missNum :\n                continue\n            else :\n                break\n        if lineNum > maxNum :\n            maxNum = lineNum\n\nprint(maxNum)	0	{"err": null, "data": [{"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9048064, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 12, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8982528, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 13, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9064448, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 13, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9080832, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8953856, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 14, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 20, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 20, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 15, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 30, "exit_code": 0, "real_time": 34, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9015296, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9134080, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9134080, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 18, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 15, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 19, "exit_code": 0, "real_time": 19, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 30, "memory_cost": 9134080}	2018312588	125.130.66.239
6119331838f5d5e1e777e8f5ab8468fe	2	15	2021-01-05 11:36:09.353331+00	90	N, M = input().split()\ndebt = []\nfor i in range(0, int(N)):\n    debt.append(int(input()))\n\n\nfor k in range(0, int(M)):\n    a, b = input().split(' ')\n    debt[int(b)] = debt[int(a)] + debt[int(b)]\n    debt[int(a)] = 0\n\nb = set(debt)\nc = list(b)\nif len(b) != 1:\n    print('IMPOSSIBLE')\n\nelse:\n    if c[0] == 0:\n        print('POSSIBLE')\n    else:\n        print('IMPOSSIBLE')	-1	{"err": null, "data": [{"error": 0, "memory": 9183232, "output": null, "result": -1, "signal": 0, "cpu_time": 48, "exit_code": 0, "real_time": 54, "test_case": "1", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9101312, "output": null, "result": -1, "signal": 0, "cpu_time": 50, "exit_code": 0, "real_time": 63, "test_case": "2", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9080832, "output": null, "result": -1, "signal": 0, "cpu_time": 34, "exit_code": 0, "real_time": 39, "test_case": "3", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9064448, "output": null, "result": -1, "signal": 0, "cpu_time": 70, "exit_code": 0, "real_time": 83, "test_case": "4", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9072640, "output": null, "result": -1, "signal": 0, "cpu_time": 26, "exit_code": 0, "real_time": 37, "test_case": "5", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9064448, "output": null, "result": -1, "signal": 0, "cpu_time": 33, "exit_code": 0, "real_time": 34, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9117696, "output": null, "result": 0, "signal": 0, "cpu_time": 41, "exit_code": 0, "real_time": 46, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9113600, "output": null, "result": -1, "signal": 0, "cpu_time": 28, "exit_code": 0, "real_time": 29, "test_case": "8", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 9416704, "output": null, "result": -1, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 50, "test_case": "9", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}]}	Python3	f	{"time_cost": 70, "memory_cost": 9416704}	2014310464	1.241.19.62
aeb876419f8227a45bb6a139f3674a6d	2	16	2021-01-05 12:44:57.285146+00	12	#include <iostream>\n#include <algorithm>\nusing namespace std;\nint N, M;\nlong long maxi = 989898987654321;\nint ty[11];\nint present = 0;\nint v[11];\nint max_num = 0;\nbool go(int idx, int remain, long long price)\n{\n    //cout << remain << " " << idx << endl;\n    if (remain == M)\n    {\n        maxi = min(maxi, price);\n        return false;\n    }\n    if (remain < M)\n        return false;\n    if (idx == N)\n        return true;\n    go(idx + 1, present, price);\n    for (int i = 1; i < M; i++)\n    {\n        if (ty[idx] - i == 0)\n            break;\n        go(idx + 1, remain - (ty[idx] * ty[idx]) + ((ty[idx] - i) * (ty[idx] - i)), price + (ty[idx] - i) * (ty[idx] - i));\n    }\n    return true;\n}\nvoid check()\n{\n    long long ans = 0;\n    for (int i = 0; i < N; i++)\n    {\n        if (ty[i] - v[i] < 0)\n            return;\n        ans += (ty[i] - v[i]) * (ty[i] - v[i]);\n    }\n    maxi = min(ans, maxi);\n}\nbool find_v(int idx, int remain, int before)\n{\n    if (remain == M && idx == N)\n    {\n        check();\n    }\n    if (remain > M || idx == N)\n        return false;\n    for (int i = before; i <= max_num; i++)\n    {\n        v[idx] = i;\n        (find_v(idx + 1, remain + i * i, i));\n        v[idx] = 0;\n    }\n    return false;\n}\n\nint main()\n{\n    cin >> N >> M;\n    for (int i = 0; i < N; i++)\n        cin >> ty[i], present += ty[i] * ty[i], max_num = max(max_num, ty[i]);\n    sort(ty, ty + N);\n    find_v(0, 0, 1);\n    \n    if (maxi == 989898987654321)\n        cout << -1 << endl;\n    else\n        cout << maxi << endl;\n\n    return 0;\n}	1	{"err": null, "data": [{"error": 0, "memory": 3543040, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3440640, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 3313664, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 3313664, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1999, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 3588096, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 3436544, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 3493888, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 3526656, "output": null, "result": -1, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "10", "output_md5": "218a0aefd1d1a4be65601cc6ddc1520e"}, {"error": 0, "memory": 3473408, "output": null, "result": 1, "signal": 9, "cpu_time": 1993, "exit_code": 0, "real_time": 1998, "test_case": "11", "output_md5": null}, {"error": 0, "memory": 3366912, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1999, "test_case": "12", "output_md5": null}]}	C++	f	{"time_cost": 1998, "memory_cost": 3588096}	2016311327	121.136.228.184
57f93405beea8801ebd9be1b2633ab6f	2	13	2021-01-05 13:17:27.589299+00	79	#include<stdio.h>\n#include<string.h>\n\nint main(){\n    char input[31];\n    size_t len = 0;\n    scanf("%s", input);\n\n    int i=0, flag = 1;\n    char temp;\n    while(input[i]!='\\0'){\n        temp = input[i];\n        if(temp=='H') {\n            i++;\n            continue;\n        }\n        else if(temp=='I')  {\n            i++;\n            continue;\n        }\n        else if(temp=='N')  {\n            i++;\n            continue;\n        }\n        else if(temp=='O')  {\n            i++;\n            continue;\n        }\n        else if(temp=='S') {\n            i++;\n            continue;\n        }\n        else if(temp=='X')  {\n            i++;\n            continue;\n        }\n        else if(temp=='Z')  {\n            i++;\n            continue;\n        }\n        else  {\n            flag = 0;\n            break;\n        }\n    }\n    if(flag) printf("YES");\n    else printf("NO");\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1695744, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1642496, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 1617920, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 1622016, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C	f	{"time_cost": 1, "memory_cost": 1736704}	2017312222	211.245.221.19
ffd01ba5e04b6aa5d4ab37c2166ef0bc	2	12	2021-01-05 14:00:50.292651+00	35	#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\nint list[4];\nint s;\nint uphill(int cur){\n  s=2;\n  if(cur==3){\n    return 0;\n  }\n  if(list[cur]>=list[cur+1]){\n    s=1;\n    return 0;\n  }\n  uphill(cur+1);\n}\nint downhill(int cur){\n  s=3;\n  if(cur==3){\n    return 0;\n  }\n  if(list[cur]<=list[cur+1]){\n    s=1;\n    return 0;\n  }\n  downhill(cur+1);\n}\nint flat(int cur){\n  s=4;\n  if(cur==3){\n    return 0;\n  }\n  if(list[cur]!=list[cur+1]){\n    s=1;\n    return 0;\n  }\n  flat(cur+1);\n}\nint main(void){\n  int before;\n  int after;\n  for(int i=0;i<4;i++){\n    scanf("%d",&list[i]);\n  }\n  if(list[0]<list[1]){\n    uphill(1);\n  }\n  else if(list[0]>list[1]){\n    downhill(1);\n  }\n  else{\n    flat(1);\n  }\n  if(s==1){\n    printf("Unknown");\n  }\n  else if(s==2){\n    printf("Uphill");\n  }\n  else if(s==3){\n    printf("Downhill");\n  }\n  else{\n    printf("Flat Land");\n  }\n}	0	{"err": null, "data": [{"error": 0, "memory": 1687552, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1679360, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1703936}	2019313491	116.37.178.202
bce719222d410a734b524bcd24ece810	2	15	2021-01-05 15:27:53.307058+00	141	memberNum, connectNum = map(int, input().split())\nmoney = []\nmemberConnect = []\nmem1 = []\nmem2 = []\nsumMoney = 0\nresult = True\n\nfor i in range(memberNum) :\n    num = int(input())\n    money.append(num)\n    memberConnect.append([i])\n\nfor i in range(connectNum) :\n    a, b = map(int, input().split())\n    for j in memberConnect :\n        if a in j :\n            mem1 = j\n        if b in j :\n            mem2 = j\n\n    memberConnect.remove(mem1)\n    memberConnect.remove(mem2)\n    memberConnect.append(mem1+mem2)\n\nfor i in memberConnect :\n    sumMoney = 0\n    for j in i :\n        sumMoney += money[j]\n    if sumMoney != 0 :\n        result = False\n        break\n\nif result :\n    print("POSSIBLE")\nelse :\n    print("IMPOSSIBLE")	4	{"err": null, "data": [{"error": 0, "memory": 9908224, "output": null, "result": 4, "signal": 0, "cpu_time": 503, "exit_code": 1, "real_time": 507, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 9605120, "output": null, "result": 4, "signal": 0, "cpu_time": 40, "exit_code": 1, "real_time": 53, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9621504, "output": null, "result": 4, "signal": 0, "cpu_time": 505, "exit_code": 1, "real_time": 513, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9392128, "output": null, "result": 4, "signal": 0, "cpu_time": 43, "exit_code": 1, "real_time": 52, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 9486336, "output": null, "result": 4, "signal": 0, "cpu_time": 50, "exit_code": 1, "real_time": 51, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 9306112, "output": null, "result": 4, "signal": 0, "cpu_time": 21, "exit_code": 1, "real_time": 25, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 9756672, "output": null, "result": 4, "signal": 0, "cpu_time": 872, "exit_code": 1, "real_time": 877, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9633792, "output": null, "result": 1, "signal": 0, "cpu_time": 1094, "exit_code": 1, "real_time": 1103, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 10403840, "output": null, "result": 1, "signal": 0, "cpu_time": 1925, "exit_code": 1, "real_time": 1938, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 1925, "memory_cost": 10403840}	2018312588	125.130.66.239
93830eaf0ee875fe72045b3fd6aa44f0	2	15	2021-01-05 15:56:36.137366+00	141	memberNum, connectNum = map(int, input().split())\nmoney = []\nmemberConnect = []\nresult = True\n\nfor i in range(memberNum) :\n    num = int(input())\n    money.append(num)\n    memberConnect.append(i)\n\nfor i in range(connectNum) :\n    a, b = map(int, input().split())\n    mem1 =memberConnect[a]\n    mem2 = memberConnect[b]\n    money[mem1] += money[mem2]\n    money[mem2] = 0\n    for i in range(connectNum) :\n        if memberConnect[i] == mem2 :\n            memberConnect[i] = mem1\n\nfor i in money :\n    if i != 0 :\n        result = False\n\nif result :\n    print("POSSIBLE")\nelse :\n    print("IMPOSSIBLE")	4	{"err": null, "data": [{"error": 0, "memory": 9515008, "output": null, "result": 4, "signal": 0, "cpu_time": 19, "exit_code": 1, "real_time": 23, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 9125888, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 20, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9293824, "output": null, "result": 4, "signal": 0, "cpu_time": 19, "exit_code": 1, "real_time": 19, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9060352, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 19, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 9265152, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 16, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 9207808, "output": null, "result": 4, "signal": 0, "cpu_time": 22, "exit_code": 1, "real_time": 26, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 9310208, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 20, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9220096, "output": null, "result": 4, "signal": 0, "cpu_time": 17, "exit_code": 1, "real_time": 21, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 9576448, "output": null, "result": 4, "signal": 0, "cpu_time": 31, "exit_code": 1, "real_time": 31, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 31, "memory_cost": 9576448}	2018312588	125.130.66.239
38d05391d6a69e3ccde4221509df54a7	2	12	2021-01-06 08:37:07.703534+00	85	#include<bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);\n    int a[4];\n    for(int i=0;i<4;i++) cin>>a[i];\n    int v[3];\n    for(int i=0;i<3;i++)\n    {\n        if(a[i]<a[i+1]) v[i]=1;\n        else if(a[i]==a[i+1]) v[i]=0;\n        else v[i]=-1;\n    }\n    if(v[0]==v[1] && v[1]==v[2])\n    {\n        if(v[0]==1) cout<<"Uphill";\n        if(v[0]==0) cout<<"Flat Land";\n        if(v[0]==-1) cout<<"Downhill";\n    }\n    else cout<<"Unknown";\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3559424, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3452928, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3469312, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 2, "memory_cost": 3559424}	2019312316	115.145.188.47
545dea66f3b40d5dc8eafb360246442c	2	15	2021-01-06 09:05:49.513408+00	99	#include<stdio.h>\n#include<stdlib.h>\n\ntypedef struct _GNode\n{\n\tint id;\n\tstruct _GNode* next;\n} GNode;\ntypedef struct\n{\n\tint num;\n\tGNode** heads;\n} Graph;\n\nvoid CreateGraph(Graph* pgraph, int num);\nvoid DestroyGraph(Graph* pgraph);\nvoid AddEdge(Graph* pgraph, int src, int dest);\nint GraphSum(Graph* pgraph, int arr[], int x,int dp[]);\n\nvoid CreateGraph(Graph* pgraph, int num)\n{\n\tpgraph->num = num;\n\tpgraph->heads = (GNode**)malloc(sizeof(GNode*) * num);\n\tfor (int i = 0; i < num; i++) {\n\t\tpgraph->heads[i] = (GNode*)malloc(sizeof(GNode));\n\t\tpgraph->heads[i]->id = i;\n\t\tpgraph->heads[i]->next = NULL;\n\t}\n}\nvoid DestroyGraph(Graph* pgraph)\n{\n\tfor (int i = 0; i < pgraph->num; i++) {\n\t\tGNode* cur = pgraph->heads[i];\n\t\twhile (cur != NULL) {\n\t\t\tGNode* temp = cur;\n\t\t\tcur = cur->next;\n\t\t\tfree(temp);\n\t\t}\n\t}\n\tfree(pgraph->heads);\n}\nvoid AddEdge(Graph* pgraph, int src, int dest)\n{\n\tGNode* newNode1, * newNode2, * cur;\n\tnewNode1 = (GNode*)malloc(sizeof(GNode));\n\tnewNode1->id = dest;\n\tnewNode1->next = NULL;\n\tcur = pgraph->heads[src]; \n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode1;\n\tnewNode2 = (GNode*)malloc(sizeof(GNode));\n\tnewNode2->id = src;\n\tnewNode2->next = NULL;\n\tcur = pgraph->heads[dest]; \n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode2;\n}\nint GraphSum(Graph* pgraph, int arr[], int x,int dp[])\n{\n\tint* temp = (int*)malloc(sizeof(int) * pgraph->num);\n\ttemp[0] = x;\n\tint count = 1;\n\tint pos = 0;\n\tGNode* cur = pgraph->heads[x]->next;\n\n\twhile (pos < count)\n\t{\n\t\tcur = pgraph->heads[temp[pos]];\n\t\twhile (cur != NULL)\n\t\t{\n\t\t\tif (dp[cur->id] != 0)\n\t\t\t{\n\t\t\t\tdp[x] = dp[cur->id];\n\t\t\t\treturn dp[cur->id];\n\t\t\t}\n\t\t\tint check = 0;\n\t\t\tfor (int i = 0; i < count; i++)\n\t\t\t{\n\t\t\t\tif (temp[i] == cur->id)\n\t\t\t\t\tcheck = 1;\n\t\t\t}\n\t\t\tif (check == 0)\n\t\t\t{\n\t\t\t\ttemp[count] = cur->id;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tcur = cur->next;\n\t\t}\n\t\tpos++;\n\t}\n\tint sum = 0;\n\tfor (int i = 0; i < count; i++)\n\t\tsum = sum + arr[temp[i]];\n\tdp[x] = sum;\n\tfree(temp);\n\treturn sum;\n}\nint main()\n{\n\tint x,y;\n\tscanf("%d", &x);\n\tscanf("%d", &y);\n\tint* p1 = (int*)malloc(sizeof(int) * x);\n\tint* p2 = (int*)malloc(sizeof(int) * y * 2);\n\tfor (int i = 0; i < x; i++)\n\t\tscanf("%d", &p1[i]);\n\tfor (int i = 0; i < 2 * y; i++)\n\t\tscanf("%d", &p2[i]);\n\n\tGraph graph;\n\tCreateGraph(&graph, x);\n\tfor (int i = 0; i < 2 * y; i++)\n\t{\n\t\tAddEdge(&graph, p2[i], p2[i + 1]);\n\t\ti++;\n\t}\n\tint* p3 = (int*)malloc(sizeof(int) * x);\n\tint* dp = (int*)malloc(sizeof(int) * x);\n\tfor (int i = 0; i < x; i++)\n\t\tdp[i] = 0;\n\tfor (int i = 0; i < x; i++)\n\t\tp3[i] = GraphSum(&graph, p1, i, dp);\n\tint check = 0;\n\tfor (int i = 0; i < x; i++)\n\t{\n\t\tif (p3[i] != 0)\n\t\t\tcheck = 1;\n\t}\n\tif (check == 0)\n\t\tprintf("POSSIBLE");\n\telse\n\t\tprintf("IMPOSSIBLE");\n\n\n\tDestroyGraph(&graph);\n\treturn 0;\n}	1	{"err": null, "data": [{"error": 0, "memory": 3231744, "output": null, "result": 1, "signal": 9, "cpu_time": 1996, "exit_code": 0, "real_time": 1998, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 3616768, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1997, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 2498560, "output": null, "result": 1, "signal": 9, "cpu_time": 1992, "exit_code": 0, "real_time": 1997, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 4579328, "output": null, "result": 1, "signal": 9, "cpu_time": 1996, "exit_code": 0, "real_time": 1997, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 2416640, "output": null, "result": 1, "signal": 9, "cpu_time": 1991, "exit_code": 0, "real_time": 1997, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 2277376, "output": null, "result": 1, "signal": 9, "cpu_time": 1995, "exit_code": 0, "real_time": 1997, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 25657344, "output": null, "result": 0, "signal": 0, "cpu_time": 82, "exit_code": 0, "real_time": 91, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 2121728, "output": null, "result": 1, "signal": 9, "cpu_time": 1991, "exit_code": 0, "real_time": 1996, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3080192, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2000, "test_case": "9", "output_md5": null}]}	C	f	{"time_cost": 1999, "memory_cost": 25657344}	2016311522	116.126.252.101
2b59b6bc759764366885d0159680cca3	2	12	2021-01-05 14:19:34.181902+00	143	#include <iostream>\n\nusing namespace std;;\n\nint main()\n{\n\tint i, x[4], c = 0;\n\tfor (i = 0; i < 4; i++) {\n\t\tcin >> x[i];\n\t\tif (i != 0) {\n\t\t\tif (c == 0) {\n\t\t\t\tif (x[i] > x[i - 1]) c = 1;\n\t\t\t\telse if (x[i] < x[i - 1]) c = 2;\n\t\t\t\telse c = 3;\n\t\t\t}\n\t\t\telse if (c == 1) {\n\t\t\t\tif (x[i] <= x[i - 1]) {\n\t\t\t\t\tc = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (c == 2) {\n\t\t\t\tif (x[i] >= x[i - 1]) {\n\t\t\t\t\tc = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (c == 3) {\n\t\t\t\tif (x[i] != x[i - 1]) {\n\t\t\t\t\tc = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tswitch (c) {\n\tcase 0 :\n\t\tcout << "Unknown";\n\t\tbreak;\n\tcase 1 :\n\t\tcout << "Uphill";\n\t\tbreak;\n\tcase 2 :\n\t\tcout << "Downhill";\n\t\tbreak;\n\tcase 3 :\n\t\tcout << "Flat Land";\n\t\tbreak;\n\t}\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3358720, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 3428352, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 3362816, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C++	f	{"time_cost": 1, "memory_cost": 3518464}	2016310790	59.18.228.114
410480a8c0dccb068f78d17ab0d18939	2	12	2021-01-05 15:42:19.612079+00	145	#include <stdio.h>\n\nint main(void) {\n  enum { nostate, uphill, downhill, flat_land, unknown } state = nostate;\n  int prev, cur;\n  scanf("%d", &prev);\n  \n  for (int i = 1; i < 4; ++i) {\n    scanf("%d", &cur);\n    if (cur > prev && (state == nostate || state == uphill)) {\n      state = uphill;\n    } else if (cur < prev && (state == nostate || state == downhill)) {\n      state = downhill;\n    } else if (cur == prev && (state == nostate || state == flat_land)) {\n      state = flat_land;\n    } else {\n      state = unknown;\n      break;\n    }\n  }\n  \n  switch (state) {\n    case uphill:\n      printf("Uphill");\n      break;\n    case downhill:\n      printf("Downhill");\n      break;\n    case flat_land:\n      printf("Flat Land");\n      break;\n    case unknown:\n      printf("Unknown");\n  }\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1691648, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1650688, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1703936, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	C	f	{"time_cost": 1, "memory_cost": 1703936}	2015314758	211.208.96.4
fdccb90ef8e3c84fbfd21acef9ec53de	2	15	2021-01-05 16:02:23.749428+00	141	memberNum, connectNum = map(int, input().split())\nmoney = []\nmemberConnect = []\nresult = True\n\nfor i in range(memberNum) :\n    num = int(input())\n    money.append(num)\n    memberConnect.append(i)\n\nfor i in range(connectNum) :\n    a, b = map(int, input().split())\n    mem1 = memberConnect[a]\n    mem2 = memberConnect[b]\n    money[mem1] += money[mem2]\n    money[mem2] = 0\n    for i in range(memberNum) :\n        if memberConnect[i] == mem2 :\n            memberConnect[i] = mem1\n\n    #print(memberConnect)\n\nfor i in money :\n    if i != 0 :\n        result = False\n\n#print(money)\n#print(memberConnect)\n\nif result :\n    print("POSSIBLE")\nelse :\n    print("IMPOSSIBLE")	1	{"err": null, "data": [{"error": 0, "memory": 9506816, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 9256960, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 9244672, "output": null, "result": 1, "signal": 9, "cpu_time": 1986, "exit_code": 0, "real_time": 1999, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 9203712, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 1999, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 9302016, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 1999, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 9265152, "output": null, "result": 1, "signal": 9, "cpu_time": 1994, "exit_code": 0, "real_time": 1999, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 9203712, "output": null, "result": 1, "signal": 9, "cpu_time": 1995, "exit_code": 0, "real_time": 1999, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 9248768, "output": null, "result": 1, "signal": 9, "cpu_time": 1991, "exit_code": 0, "real_time": 1999, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 9736192, "output": null, "result": 1, "signal": 9, "cpu_time": 1990, "exit_code": 0, "real_time": 1999, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 1999, "memory_cost": 9736192}	2018312588	125.130.66.239
898a4efb331b065bcdf012b782e0b2ad	2	15	2021-01-06 00:23:18.693265+00	64	a,b=input().split()\na=int(a)\nb=int(b)\n\nnumber=[]\nfriend=[]\nfor i in range(a):\n    c=int(input())\n    number.append(c)\nfor i in range(b):\n    c,d=input().split()\n    c=int(c)\n    d=int(d)\n    k=[c,d]\n    friend.append(k)\n\nresult=[]\nresult_sum=[]\nfor i in range(b):\n    if i==0:\n        result.append(friend[i])\n        zz=number[friend[i][0]]+number[friend[i][1]]\n        result_sum.append(zz)\n    else:\n        first=-1\n        second=-1\n        temp1=friend[i][0]\n        temp2=friend[i][1]\n        for j in range(len(result)):\n            if temp1 in result[j]:\n                first=j\n                break\n        for j in range(len(result)):\n            if temp2 in result[j]:\n                second=j\n                break\n        if first==-1 and second== -1:\n            list1=[temp1,temp2]\n            result.append(list1)\n            \n            result_sum.append(number[temp1]+number[temp2])\n        elif first==-1:\n            result[second].append(temp1)\n           \n            result_sum[second] +=number[temp1]\n        elif second==-1:\n            result[first].append(temp2)\n            \n            result_sum[first] +=number[temp2]\n        else:\n            if first!=second:\n                result[first]=result[first]+result[second]\n\n                result.remove(result[second])\n               \n                result_sum[first] +=result_sum[second]\n                \n                result_sum.remove(result_sum[second])\n        \ncount=0\n\nfor i in range(len(result_sum)):\n    if result_sum[i]!=0:\n        count=1\n        print("IMPOSSIBLE")\n        break\nif count==0:\n    print("POSSIBLE")	-1	{"err": null, "data": [{"error": 0, "memory": 12587008, "output": null, "result": 0, "signal": 0, "cpu_time": 869, "exit_code": 0, "real_time": 878, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 13139968, "output": null, "result": 0, "signal": 0, "cpu_time": 987, "exit_code": 0, "real_time": 1000, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11063296, "output": null, "result": 0, "signal": 0, "cpu_time": 542, "exit_code": 0, "real_time": 546, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 15241216, "output": null, "result": 0, "signal": 0, "cpu_time": 585, "exit_code": 0, "real_time": 594, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10629120, "output": null, "result": 0, "signal": 0, "cpu_time": 307, "exit_code": 0, "real_time": 320, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10391552, "output": null, "result": -1, "signal": 0, "cpu_time": 458, "exit_code": 0, "real_time": 462, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 12087296, "output": null, "result": 0, "signal": 0, "cpu_time": 994, "exit_code": 0, "real_time": 1004, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 10072064, "output": null, "result": 0, "signal": 0, "cpu_time": 427, "exit_code": 0, "real_time": 431, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 11956224, "output": null, "result": 1, "signal": 0, "cpu_time": 1520, "exit_code": 0, "real_time": 1529, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 1520, "memory_cost": 15241216}	2017314804	113.199.59.51
c5b6f52573e4d154bab5cf5ad33eaa17	2	13	2021-01-06 08:41:24.279816+00	85	#include<bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n    ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);\n    string s;cin>>s;\n    char ck[]={'H','I','N','O','S','X','Z'};\n    bool flag=false;\n    for(auto i : s)\n    {\n        flag=false;\n        for(auto j : ck)\n        {\n            if(j==i) flag=true;\n        }\n        if(!flag){cout<<"NO";return 0;}\n    }\n    cout<<"YES";\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3465216, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3461120, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3624960, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3448832, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3661824, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3538944, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3547136, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "8", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "9", "output_md5": "7469a286259799e5b37e5db9296f00b3"}, {"error": 0, "memory": 3641344, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "10", "output_md5": "c2f3f489a00553e7a01d369c103c7251"}]}	C++	f	{"time_cost": 2, "memory_cost": 3661824}	2019312316	115.145.188.47
2e7881306bee664b3334bac94e69b7e4	2	14	2021-01-05 14:24:41.49195+00	141	cnt = int(input()) #사람 수\ncntList = [] #같은 수의 붕어빵을 사려고 하는 사람들이 연속된 수\nnumList = [] #붕어빵 수\ncnt2 = 0 #새로운 배열의 길이\nmaxNum = 0\nlineNum = 0\ncntNum = 0\nmissNum = 0\n\nfor i in range(cnt) :\n    num = int(input())\n    if i == 0 :\n        cntList.append(1)\n        numList.append(num)\n    elif num == numList[cnt2] :\n        cntList[cnt2] += 1\n    else :\n        cntList.append(1)\n        numList.append(num)\n        if cntList[cnt2] > maxNum :\n            maxNum = cntList[cnt2]\n        cnt2 += 1    \n\nfor i in range(cnt2-1) :\n    if numList[i] == numList[i+2] :\n        missNum = numList[i+1]\n        cntNum = numList[i]\n        lineNum = cntList[i] + cntList[i+2]\n        for j in range(i+3, cnt2+1) :\n            if numList[j] == cntNum :\n                lineNum += cntList[j]\n            elif numList[j] == missNum :\n                continue\n            else :\n                if lineNum > maxNum :\n                    maxNum = lineNum\n                break\n\nprint(maxNum)	-1	{"err": null, "data": [{"error": 0, "memory": 9113600, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 14, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 8941568, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9019392, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9117696, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9117696, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 8945664, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 18, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 20, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9023488, "output": null, "result": -1, "signal": 0, "cpu_time": 31, "exit_code": 0, "real_time": 33, "test_case": "15", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 18, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9052160, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 17, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 21, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 9109504, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 9023488, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 17, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 31, "memory_cost": 9117696}	2018312588	125.130.66.239
bba733280fd6fcba1df21de6bc321b50	2	12	2021-01-05 15:43:04.409983+00	145	#include <stdio.h>\n\nint main(void) {\n  enum { nostate, uphill, downhill, flat_land, unknown } state = nostate;\n  int prev, cur;\n  scanf("%d", &prev);\n  \n  for (int i = 1; i < 4; ++i) {\n    scanf("%d", &cur);\n    if (cur > prev && (state == nostate || state == uphill)) {\n      state = uphill;\n    } else if (cur < prev && (state == nostate || state == downhill)) {\n      state = downhill;\n    } else if (cur == prev && (state == nostate || state == flat_land)) {\n      state = flat_land;\n    } else {\n      state = unknown;\n      break;\n    }\n  }\n  \n  switch (state) {\n    case uphill:\n      printf("Uphill\\n");\n      break;\n    case downhill:\n      printf("Downhill\\n");\n      break;\n    case flat_land:\n      printf("Flat Land\\n");\n      break;\n    case unknown:\n      printf("Unknown\\n");\n  }\n}	-1	{"err": null, "data": [{"error": 0, "memory": 1654784, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1597440, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1581056, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "6dd08fe20654d741a880b5121aff195e"}]}	C	f	{"time_cost": 1, "memory_cost": 1736704}	2015314758	211.208.96.4
a1be2ed4586990a063f37314f91b25d7	2	16	2021-01-06 00:51:02.075786+00	72	#include<iostream>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nint N, M, sum=0, arr[11], dp[100001][11];\nint main(){\n    memset(dp, -1, sizeof(dp));\n    cin >> N >> M;\n    for(int i=1; i<=N; i++) {\n        cin >> arr[i];\n        sum += (arr[i]*arr[i]);\n    }\n    dp[sum][0] = 0;\n    for(int i=1; i<=N; i++){\n        for(int k=1; k<100; k++){\n            if(arr[i] > k) { // 줄이는 경우\n                int price = (arr[i]-k) * (arr[i]-k);\n                int diff = (arr[i]*arr[i] - k*k);\n                if(price > 100000) continue;\n                for(int j=0; j<=100000; j++){\n                    if(dp[j][i-1] == -1 || j-diff < 0) continue;\n                    if(i == 1) dp[j-diff][1] = price;\n                    else if(dp[j-diff][i] != -1) dp[j-diff][i] = min(dp[j-diff][i], dp[j][i-1] + price); // 이미 있었\n                    else dp[j-diff][i] = dp[j][i-1] + price; // 한번도 없었\n                }\n            } else { // 늘리는 경우\n                int price = (k-arr[i]) * (k-arr[i]);\n                int diff = (k*k - arr[i]*arr[i]);\n                if(price > 100000) continue;\n                for(int j=0; j<=100000; j++){\n                    if(dp[j][i-1] == -1 || j+diff > 10000) continue;\n                    if(i == 1) dp[j+diff][1] = price;\n                    else if(dp[j+diff][i] != -1) dp[j+diff][i] = min(dp[j+diff][i], dp[j][i-1] + price);\n                    else dp[j+diff][i] = dp[j][i-1] + price;\n                }\n            }\n        }\n    }\n    cout << dp[M][N];\n}	0	{"err": null, "data": [{"error": 0, "memory": 7913472, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 24, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 7917568, "output": null, "result": 0, "signal": 0, "cpu_time": 27, "exit_code": 0, "real_time": 32, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 7929856, "output": null, "result": 0, "signal": 0, "cpu_time": 84, "exit_code": 0, "real_time": 88, "test_case": "3", "output_md5": "a97f6e2fedcabc887911dc9b5fd3ccc3"}, {"error": 0, "memory": 7979008, "output": null, "result": 0, "signal": 0, "cpu_time": 60, "exit_code": 0, "real_time": 65, "test_case": "4", "output_md5": "a3ec6dd8d538712a581e5b24726ce062"}, {"error": 0, "memory": 7901184, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 21, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 7770112, "output": null, "result": 0, "signal": 0, "cpu_time": 43, "exit_code": 0, "real_time": 43, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 7888896, "output": null, "result": 0, "signal": 0, "cpu_time": 83, "exit_code": 0, "real_time": 87, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 7766016, "output": null, "result": 0, "signal": 0, "cpu_time": 22, "exit_code": 0, "real_time": 27, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 7909376, "output": null, "result": 0, "signal": 0, "cpu_time": 50, "exit_code": 0, "real_time": 58, "test_case": "9", "output_md5": "c0c7c76d30bd3dcaefc96f40275bdc0a"}, {"error": 0, "memory": 7942144, "output": null, "result": 0, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 26, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 7749632, "output": null, "result": 0, "signal": 0, "cpu_time": 61, "exit_code": 0, "real_time": 66, "test_case": "11", "output_md5": "ac2a728f9f17b5d860b6dabd80a5162f"}, {"error": 0, "memory": 7876608, "output": null, "result": 0, "signal": 0, "cpu_time": 43, "exit_code": 0, "real_time": 47, "test_case": "12", "output_md5": "fb4ab556bc42d6f0ee0f9e24ec4d1af0"}]}	C++	f	{"time_cost": 84, "memory_cost": 7979008}	9967han	222.112.181.211
284939142fdb1bce0edef0873bf98e42	2	16	2021-01-06 03:19:57.258449+00	23	def find(a,b):\n    return (a - b) * (a - b)\n\nN, M = map(int, input().split())\nt = [int(input()) for _ in range(N)]\nt.sort(reverse = True)\ndp = [[[] for j in range(M+1)] for i in range(N+1)]\nfor i in range (1, 101):\n    if i * i > M:\n        break\n    dp[1][i*i].append(i)\nfor i in range (1, N):\n    for j in range (1, M):\n        if len(dp[i][j]) == 0:\n            continue\n        dp[i][j].sort()\n        for k in range(dp[i][j][-1],101):\n            if j + k * k > M:\n                break\n            dp[i + 1][j + k*k].append(k)\narr = []\nans = 100*100*10\ndef dfs(N, M):\n    global arr\n    global ans\n    if N == 0:\n        local = 0\n        for i in range (len(t)):\n            local += find(t[i],arr[i])\n        ans = min(ans, local)\n    for _ in dp[N][M]:\n        arr.append(_)\n        dfs(N - 1, M - _ * _)\n        arr.pop()\ndfs(N,M) \n\nif ans == 100*100*10:\n    print(-1)\nelse:\n    print(ans)	1	{"err": null, "data": [{"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 19, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 12632064, "output": null, "result": 0, "signal": 0, "cpu_time": 56, "exit_code": 0, "real_time": 61, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 31961088, "output": null, "result": 1, "signal": 0, "cpu_time": 1175, "exit_code": 0, "real_time": 1180, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 29442048, "output": null, "result": -1, "signal": 0, "cpu_time": 936, "exit_code": 0, "real_time": 950, "test_case": "4", "output_md5": "0cddb7c06f1cd518e1efdc0e20b70c31"}, {"error": 0, "memory": 12619776, "output": null, "result": 0, "signal": 0, "cpu_time": 40, "exit_code": 0, "real_time": 45, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 18, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9113600, "output": null, "result": -1, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 11608064, "output": null, "result": 0, "signal": 0, "cpu_time": 29, "exit_code": 0, "real_time": 33, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 19464192, "output": null, "result": -1, "signal": 0, "cpu_time": 359, "exit_code": 0, "real_time": 371, "test_case": "11", "output_md5": "8722c8f495dcee23f39d5519735e1f71"}, {"error": 0, "memory": 20353024, "output": null, "result": -1, "signal": 0, "cpu_time": 317, "exit_code": 0, "real_time": 326, "test_case": "12", "output_md5": "a209ca7b50dcaab2db7c2d4d1223d4d5"}]}	Python3	f	{"time_cost": 1175, "memory_cost": 31961088}	2016312057	221.140.190.220
53b38918f6c39ca307f313520e8a4a40	2	14	2021-01-05 14:35:01.128852+00	141	cnt = int(input()) #사람 수\ncntList = [] #같은 수의 붕어빵을 사려고 하는 사람들이 연속된 수\nnumList = [] #붕어빵 수\ncnt2 = 0 #새로운 배열의 길이\nmaxNum = 0\nlineNum = 0\ncntNum = 0\nmissNum = 0\n\nfor i in range(cnt) :\n    num = int(input())\n    if i == 0 :\n        cntList.append(1)\n        numList.append(num)\n    elif num == numList[cnt2] :\n        cntList[cnt2] += 1\n    else :\n        cntList.append(1)\n        numList.append(num)\n        if cntList[cnt2] > maxNum :\n            maxNum = cntList[cnt2]\n        cnt2 += 1    \n\nfor i in range(cnt2-1) :\n    # print(maxNum)\n    if numList[i] == numList[i+2] :\n        missNum = numList[i+1]\n        cntNum = numList[i]\n        lineNum = cntList[i] + cntList[i+2]\n        for j in range(i+3, cnt2+1) :\n            if numList[j] == cntNum :\n                lineNum += cntList[j]\n            elif numList[j] == missNum :\n                continue\n            else :\n                break\n        if lineNum > maxNum :\n            maxNum = lineNum\n\nprint(maxNum)	-1	{"err": null, "data": [{"error": 0, "memory": 9113600, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 19, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9056256, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 9109504, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 8957952, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 13, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9031680, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9019392, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 17, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9007104, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 15, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 16, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 9072640, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 15, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 19, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8855552, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 19, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 8990720, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 33, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 9003008, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 16, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 8835072, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 20, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 8998912, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 9039872, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 17, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 9109504, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 15, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	Python3	f	{"time_cost": 21, "memory_cost": 9113600}	2018312588	125.130.66.239
c91eaac5a0907dabb9a83a3ec433ee8e	2	12	2021-01-05 15:43:33.768701+00	145	#include <stdio.h>\n\nint main(void) {\n  enum { nostate, uphill, downhill, flat_land, unknown } state = nostate;\n  int prev, cur;\n  scanf("%d", &prev);\n  \n  for (int i = 1; i < 4; ++i) {\n    scanf("%d", &cur);\n    if (cur > prev && (state == nostate || state == uphill)) {\n      state = uphill;\n    } else if (cur < prev && (state == nostate || state == downhill)) {\n      state = downhill;\n    } else if (cur == prev && (state == nostate || state == flat_land)) {\n      state = flat_land;\n    } else {\n      state = unknown;\n      break;\n    }\n    prev = cur;\n  }\n  \n  switch (state) {\n    case uphill:\n      printf("Uphill\\n");\n      break;\n    case downhill:\n      printf("Downhill\\n");\n      break;\n    case flat_land:\n      printf("Flat Land\\n");\n      break;\n    case unknown:\n      printf("Unknown\\n");\n  }\n}	0	{"err": null, "data": [{"error": 0, "memory": 1736704, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1703936, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1683456, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1609728, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 0, "memory_cost": 1736704}	2015314758	211.208.96.4
510da6b925cacfd20714fba89f1adb20	2	15	2021-01-06 00:19:49.165756+00	64	a,b=input().split()\na=int(a)\nb=int(b)\n\nnumber=[]\nfriend2=[]\nfor i in range(a):\n    c=int(input())\n    number.append(c)\nfor i in range(b):\n    c,d=input().split()\n    c=int(c)\n    d=int(d)\n    k=[c,d]\n    friend2.append(k)\n\nresult=[]\nresult_sum=[]\nfor i in range(b):\n    if i==0:\n        result.append(friend2[i])\n        zz=number[friend2[i][0]]+number[friend2[i][1]]\n        result_sum.append(zz)\n    else:\n        first=-1\n        second=-1\n        temp1=friend2[i][0]\n        temp2=friend2[i][1]\n        for j in range(len(result)):\n            if temp1 in result[j]:\n                first=j\n                break\n        for j in range(len(result)):\n            if temp2 in result[j]:\n                second=j\n                break\n        if first==-1 and second== -1:\n            list1=[temp1,temp2]\n            result.append(list1)\n            \n            result_sum.append(number[temp1]+number[temp2])\n        elif first==-1:\n            result[second].append(temp1)\n           \n            result_sum[second] +=number[temp1]\n        elif second==-1:\n            result[first].append(temp2)\n            \n            result_sum[first] +=number[temp2]\n        else:\n            if first!=second:\n                result[first]=result[first]+result[second]\n\n                result.remove(result[second])\n               \n                result_sum[first] +=result_sum[second]\n                \n                result_sum.remove(result_sum[second])\n        \ncount=0\n\nfor i in range(len(result_sum)):\n    if result_sum[i]!=0:\n        count=1\n        print("IMPOSSIBLE")\n        break\nif count==0:\n    print("POSSIBLE")	-1	{"err": null, "data": [{"error": 0, "memory": 12513280, "output": null, "result": 0, "signal": 0, "cpu_time": 870, "exit_code": 0, "real_time": 879, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 13127680, "output": null, "result": 0, "signal": 0, "cpu_time": 994, "exit_code": 0, "real_time": 1006, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10936320, "output": null, "result": 0, "signal": 0, "cpu_time": 531, "exit_code": 0, "real_time": 543, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 15040512, "output": null, "result": 0, "signal": 0, "cpu_time": 575, "exit_code": 0, "real_time": 588, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10502144, "output": null, "result": 0, "signal": 0, "cpu_time": 314, "exit_code": 0, "real_time": 318, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 10289152, "output": null, "result": -1, "signal": 0, "cpu_time": 468, "exit_code": 0, "real_time": 469, "test_case": "6", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 12120064, "output": null, "result": 0, "signal": 0, "cpu_time": 984, "exit_code": 0, "real_time": 993, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 10063872, "output": null, "result": 0, "signal": 0, "cpu_time": 426, "exit_code": 0, "real_time": 430, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 12099584, "output": null, "result": 1, "signal": 0, "cpu_time": 1526, "exit_code": 0, "real_time": 1526, "test_case": "9", "output_md5": null}]}	Python3	f	{"time_cost": 1526, "memory_cost": 15040512}	2017314804	113.199.59.51
d3636cd7c4cf73fa5cf9a85e3e118b2b	2	15	2021-01-06 02:40:21.726835+00	36	#include <stdio.h>\nint que[10100];\nint rel[10100][10100];\nint cost[10100];\nint visit[10100];\nint N, M;\n\nint FF ( int st )\n{\n\tint i;\n\tint q;\n\tint wp = 0;\n\tint rp = 0;\n\tint sum = 0;\n\tque[wp++] = st;\n\tvisit[st] = 1;\n\twhile ( rp < wp )\n\t{\n\t\tq = que[rp++];\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tif ( rel[q][i] == 0 )\tcontinue;\n\t\t\tif ( visit[i] == 1 )\tcontinue;\n\t\t\t\n\t\t\tque[wp++] = i;\n\t\t\tvisit[i] = 1;\n\t\t}\n\t}\n\tfor ( i = 0; i < wp; i++ ) {\n\t\tsum += cost[que[i]];\n\t}\n\tif ( sum != 0 )\treturn 0;\n\telse \t\t\treturn 1;\n}\nint main ( void )\n{\n\tint i, j;\n\tint tmp1, tmp2;\n\tscanf("%d %d", &N, &M);\n\tfor ( i = 0; i < N; i++ )\tscanf("%d", &cost[i]);\n\tfor ( i = 0; i < M; i++ )\t{\n\t\tscanf("%d %d", &tmp1, &tmp2);\n\t\trel[tmp1][tmp2] = 1;\n\t\trel[tmp2][tmp1] = 1;\t\n\t}\n\t\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( visit[i] == 1 )\tcontinue;\n\t\tif ( !FF(i) ) {\n\t\t\tprintf("IMPOSSIBLE\\n");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf("POSSIBLE\\n");\n\t\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 78127104, "output": null, "result": 0, "signal": 0, "cpu_time": 23, "exit_code": 0, "real_time": 58, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 60923904, "output": null, "result": 0, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 39, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 62234624, "output": null, "result": 0, "signal": 0, "cpu_time": 24, "exit_code": 0, "real_time": 42, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 37691392, "output": null, "result": 0, "signal": 0, "cpu_time": 20, "exit_code": 0, "real_time": 36, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 42602496, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 35, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 35016704, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 31, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 88965120, "output": null, "result": 0, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 49, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 36724736, "output": null, "result": 0, "signal": 0, "cpu_time": 21, "exit_code": 0, "real_time": 35, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 104222720, "output": null, "result": 0, "signal": 0, "cpu_time": 60, "exit_code": 0, "real_time": 101, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C	f	{"time_cost": 60, "memory_cost": 104222720}	2017313109	211.114.120.219
defc682158487489bb65f5b1b6b76786	2	15	2021-01-06 08:55:12.476592+00	99	#include<stdio.h>\n#include<stdlib.h>\n\ntypedef struct _GNode\n{\n\tint id;\n\tstruct _GNode* next;\n} GNode;\ntypedef struct\n{\n\tint num;\n\tGNode** heads;\n} Graph;\n\nvoid CreateGraph(Graph* pgraph, int num);\nvoid DestroyGraph(Graph* pgraph);\nvoid AddEdge(Graph* pgraph, int src, int dest);\nint GraphSum(Graph* pgraph, int arr[], int x);\n\nvoid CreateGraph(Graph* pgraph, int num)\n{\n\tpgraph->num = num;\n\tpgraph->heads = (GNode**)malloc(sizeof(GNode*) * num);\n\tfor (int i = 0; i < num; i++) {\n\t\tpgraph->heads[i] = (GNode*)malloc(sizeof(GNode));\n\t\tpgraph->heads[i]->id = i;\n\t\tpgraph->heads[i]->next = NULL;\n\t}\n}\nvoid DestroyGraph(Graph* pgraph)\n{\n\tfor (int i = 0; i < pgraph->num; i++) {\n\t\tGNode* cur = pgraph->heads[i];\n\t\twhile (cur != NULL) {\n\t\t\tGNode* temp = cur;\n\t\t\tcur = cur->next;\n\t\t\tfree(temp);\n\t\t}\n\t}\n\tfree(pgraph->heads);\n}\nvoid AddEdge(Graph* pgraph, int src, int dest)\n{\n\tGNode* newNode1, * newNode2, * cur;\n\tnewNode1 = (GNode*)malloc(sizeof(GNode));\n\tnewNode1->id = dest;\n\tnewNode1->next = NULL;\n\tcur = pgraph->heads[src]; \n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode1;\n\tnewNode2 = (GNode*)malloc(sizeof(GNode));\n\tnewNode2->id = src;\n\tnewNode2->next = NULL;\n\tcur = pgraph->heads[dest]; \n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode2;\n}\nint GraphSum(Graph* pgraph, int arr[], int x)\n{\n\tint* temp = (int*)malloc(sizeof(int) * pgraph->num);\n\ttemp[0] = x;\n\tint count = 1;\n\tint pos = 0;\n\tGNode* cur = pgraph->heads[x]->next;\n\n\twhile (pos < count)\n\t{\n\t\tcur = pgraph->heads[temp[pos]];\n\t\twhile (cur != NULL)\n\t\t{\n\t\t\tint check = 0;\n\t\t\tfor (int i = 0; i < count; i++)\n\t\t\t{\n\t\t\t\tif (temp[i] == cur->id)\n\t\t\t\t\tcheck = 1;\n\t\t\t}\n\t\t\tif (check == 0)\n\t\t\t{\n\t\t\t\ttemp[count] = cur->id;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tcur = cur->next;\n\t\t}\n\t\tpos++;\n\t}\n\tint sum = 0;\n\tfor (int i = 0; i < count; i++)\n\t\tsum = sum + arr[temp[i]];\n\tfree(temp);\n\treturn sum;\n}\nint main()\n{\n\tint x,y;\n\tscanf("%d", &x);\n\tscanf("%d", &y);\n\tint* p1 = (int*)malloc(sizeof(int) * x);\n\tint* p2 = (int*)malloc(sizeof(int) * y * 2);\n\tfor (int i = 0; i < x; i++)\n\t\tscanf("%d", &p1[i]);\n\tfor (int i = 0; i < 2 * y; i++)\n\t\tscanf("%d", &p2[i]);\n\n\tGraph graph;\n\tCreateGraph(&graph, x);\n\tfor (int i = 0; i < 2 * y; i++)\n\t{\n\t\tAddEdge(&graph, p2[i], p2[i + 1]);\n\t\ti++;\n\t}\n\tint* p3 = (int*)malloc(sizeof(int) * x);\n\tfor (int i = 0; i < x; i++)\n\t\tp3[i] = GraphSum(&graph, p1, i);\n\tint check = 0;\n\tfor (int i = 0; i < x; i++)\n\t{\n\t\tif (p3[i] != 0)\n\t\t\tcheck = 1;\n\t}\n\tif (check == 0)\n\t\tprintf("POSSIBLE");\n\telse\n\t\tprintf("IMPOSSIBLE");\n\n\n\tDestroyGraph(&graph);\n\treturn 0;\n}	1	{"err": null, "data": [{"error": 0, "memory": 3264512, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2000, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 3600384, "output": null, "result": 1, "signal": 9, "cpu_time": 1999, "exit_code": 0, "real_time": 2000, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 2478080, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 2000, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 4612096, "output": null, "result": 1, "signal": 9, "cpu_time": 1998, "exit_code": 0, "real_time": 2000, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 2330624, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1999, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 2211840, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1999, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3121152, "output": null, "result": 1, "signal": 9, "cpu_time": 1988, "exit_code": 0, "real_time": 1997, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 2068480, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1998, "test_case": "8", "output_md5": null}, {"error": 0, "memory": 3076096, "output": null, "result": 1, "signal": 9, "cpu_time": 1997, "exit_code": 0, "real_time": 1999, "test_case": "9", "output_md5": null}]}	C	f	{"time_cost": 1999, "memory_cost": 4612096}	2016311522	116.126.252.101
97221c455bbd18865852e5cae2b973b3	2	16	2021-01-06 03:28:42.352379+00	23	def find(a,b):\n    return (a - b) * (a - b)\n\nN, M = map(int, input().split())\nt = [int(input()) for _ in range(N)]\nt.sort()\ndp = [[[] for j in range(M+1)] for i in range(N+1)]\nfor i in range (1, 101):\n    if i * i > M:\n        break\n    dp[1][i*i].append(i)\nfor i in range (1, N):\n    for j in range (1, M):\n        if len(dp[i][j]) == 0:\n            continue\n        dp[i][j].sort()\n        for k in range(dp[i][j][-1],101):\n            if j + k * k > M:\n                break\n            dp[i + 1][j + k*k].append(k)\nans = 100*100*10\ndef dfs(N, M, local):\n    global ans\n    if N == 0:\n        ans = min(ans, local)\n    for _ in dp[N][M]:\n        dfs(N - 1, M - _ * _, local + find(_, t[N-1]))\ndfs(N,M, 0) \n\nif ans == 100*100*10:\n    print(-1)\nelse:\n    print(ans)	-1	{"err": null, "data": [{"error": 0, "memory": 9043968, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 12591104, "output": null, "result": 0, "signal": 0, "cpu_time": 38, "exit_code": 0, "real_time": 42, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 31813632, "output": null, "result": -1, "signal": 0, "cpu_time": 844, "exit_code": 0, "real_time": 860, "test_case": "3", "output_md5": "42a7e8017ab9578358f118300f4720fb"}, {"error": 0, "memory": 29532160, "output": null, "result": -1, "signal": 0, "cpu_time": 731, "exit_code": 0, "real_time": 736, "test_case": "4", "output_md5": "0cddb7c06f1cd518e1efdc0e20b70c31"}, {"error": 0, "memory": 12546048, "output": null, "result": 0, "signal": 0, "cpu_time": 45, "exit_code": 0, "real_time": 50, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9031680, "output": null, "result": 0, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 13, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9076736, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "9", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 11513856, "output": null, "result": 0, "signal": 0, "cpu_time": 25, "exit_code": 0, "real_time": 33, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 19398656, "output": null, "result": -1, "signal": 0, "cpu_time": 298, "exit_code": 0, "real_time": 340, "test_case": "11", "output_md5": "8722c8f495dcee23f39d5519735e1f71"}, {"error": 0, "memory": 20074496, "output": null, "result": -1, "signal": 0, "cpu_time": 272, "exit_code": 0, "real_time": 286, "test_case": "12", "output_md5": "a209ca7b50dcaab2db7c2d4d1223d4d5"}]}	Python3	f	{"time_cost": 844, "memory_cost": 31813632}	2016312057	221.140.190.220
1f1169e02842dba6cfd2a65718b16c60	2	16	2021-01-06 03:32:16.204209+00	23	def find(a,b):\n    return (a - b) * (a - b)\n\nN, M = map(int, input().split())\nt = [int(input()) for _ in range(N)]\nt.sort()\ndp = [[[] for j in range(M+1)] for i in range(N+1)]\nfor i in range (1, 101):\n    if i * i > M:\n        break\n    dp[1][i*i].append(i)\nfor i in range (1, N):\n    for j in range (1, M):\n        if len(dp[i][j]) == 0:\n            continue\n        for k in range(max(dp[i][j]),101):\n            if j + k * k > M:\n                break\n            dp[i + 1][j + k*k].append(k)\nfor i in range (1, N + 1):\n    for j in range (1, M + 1):\n        dp[i][j].sort()\nans = 100*100*10\ndef dfs(N, M, local):\n    global ans\n    if N == 0:\n        ans = min(ans, local)\n    for _ in dp[N][M]:\n        dfs(N - 1, M - _ * _, local + find(_, t[N-1]))\ndfs(N,M,0) \n\nif ans == 100*100*10:\n    print(-1)\nelse:\n    print(ans)	-1	{"err": null, "data": [{"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 10, "exit_code": 0, "real_time": 15, "test_case": "1", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 12607488, "output": null, "result": 0, "signal": 0, "cpu_time": 47, "exit_code": 0, "real_time": 52, "test_case": "2", "output_md5": "d58072be2820e8682c0a27c0518e805e"}, {"error": 0, "memory": 31821824, "output": null, "result": -1, "signal": 0, "cpu_time": 878, "exit_code": 0, "real_time": 891, "test_case": "3", "output_md5": "42a7e8017ab9578358f118300f4720fb"}, {"error": 0, "memory": 29450240, "output": null, "result": -1, "signal": 0, "cpu_time": 784, "exit_code": 0, "real_time": 797, "test_case": "4", "output_md5": "0cddb7c06f1cd518e1efdc0e20b70c31"}, {"error": 0, "memory": 12603392, "output": null, "result": 0, "signal": 0, "cpu_time": 44, "exit_code": 0, "real_time": 49, "test_case": "5", "output_md5": "6bb61e3b7bce0931da574d19d1d82c88"}, {"error": 0, "memory": 9027584, "output": null, "result": 0, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "6512bd43d9caa6e02c990b0a82652dca"}, {"error": 0, "memory": 8937472, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 18, "test_case": "7", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9035776, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "8", "output_md5": "3c59dc048e8850243be8079a5c74d079"}, {"error": 0, "memory": 9048064, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "9", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 11513856, "output": null, "result": 0, "signal": 0, "cpu_time": 36, "exit_code": 0, "real_time": 41, "test_case": "10", "output_md5": "65b9eea6e1cc6bb9f0cd2a47751a186f"}, {"error": 0, "memory": 19484672, "output": null, "result": -1, "signal": 0, "cpu_time": 304, "exit_code": 0, "real_time": 305, "test_case": "11", "output_md5": "8722c8f495dcee23f39d5519735e1f71"}, {"error": 0, "memory": 20135936, "output": null, "result": -1, "signal": 0, "cpu_time": 251, "exit_code": 0, "real_time": 267, "test_case": "12", "output_md5": "a209ca7b50dcaab2db7c2d4d1223d4d5"}]}	Python3	f	{"time_cost": 878, "memory_cost": 31821824}	2016312057	221.140.190.220
3085156941a1bcf143c6922fafe29243	2	15	2021-01-06 11:19:00.544076+00	99	#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\n\n\ntypedef enum { false, true }bool;\ntypedef int Data;\n\ntypedef struct {\n\tData items[10000];\n\tint top;\n}Stack;\ntypedef struct _GNode\n{\n\tint id;\n\tstruct _GNode* next;\n} GNode;\ntypedef struct\n{\n\tint num;\n\tGNode** heads;\n} Graph;\n\nvoid CreateGraph(Graph* pgraph, int num);\nvoid DestroyGraph(Graph* pgraph);\nvoid AddEdge(Graph* pgraph, int src, int dest);\nint GraphSum(Graph* pgraph, int arr[], int x, int dp[]);\nvoid InitStack(Stack* pstack);\nint IsEmptyStack(Stack* pstack);\nint IsFullStack(Stack* pstack);\nvoid Push(Stack* pstack, Data item);\nData Peek(Stack* pstack);\nData Pop(Stack* pstack);\n\nvoid CreateGraph(Graph* pgraph, int num)\n{\n\tpgraph->num = num;\n\tpgraph->heads = (GNode**)malloc(sizeof(GNode*) * num);\n\tfor (int i = 0; i < num; i++) {\n\t\tpgraph->heads[i] = (GNode*)malloc(sizeof(GNode));\n\t\tpgraph->heads[i]->id = i;\n\t\tpgraph->heads[i]->next = NULL;\n\t}\n}\nvoid DestroyGraph(Graph* pgraph)\n{\n\tfor (int i = 0; i < pgraph->num; i++) {\n\t\tGNode* cur = pgraph->heads[i];\n\t\twhile (cur != NULL) {\n\t\t\tGNode* temp = cur;\n\t\t\tcur = cur->next;\n\t\t\tfree(temp);\n\t\t}\n\t}\n\tfree(pgraph->heads);\n}\nvoid AddEdge(Graph* pgraph, int src, int dest)\n{\n\tGNode* newNode1, * newNode2, * cur;\n\tnewNode1 = (GNode*)malloc(sizeof(GNode));\n\tnewNode1->id = dest;\n\tnewNode1->next = NULL;\n\tcur = pgraph->heads[src];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode1;\n\tnewNode2 = (GNode*)malloc(sizeof(GNode));\n\tnewNode2->id = src;\n\tnewNode2->next = NULL;\n\tcur = pgraph->heads[dest];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode2;\n}\nint GraphSum(Graph* pgraph, int arr[], int x,int dp[])\n{\n\tif (dp[x] != 0)\n\t\treturn dp[x];\n\tStack stack;\n\tbool* visited = (bool*)malloc(sizeof(bool) * pgraph->num);\n\tfor (int i = 0; i < pgraph->num; i++)\n\t\tvisited[i] = 0;\n\tInitStack(&stack);\n\tPush(&stack, x);\n\twhile (!IsEmptyStack(&stack))\n\t{\n\t\tGNode* cur;\n\t\tint vtx = Peek(&stack);\n\t\tPop(&stack);\n\t\tif (visited[vtx]) continue;\n\t\telse\n\t\t\tvisited[vtx] = true;\n\n\t\tcur = pgraph->heads[vtx]->next;\n\t\twhile (cur != NULL)\n\t\t{\n\t\t\tif (!visited[cur->id])\n\t\t\t\tPush(&stack, cur->id);\n\t\t\tcur = cur->next;\n\t\t}\n\t}\n\n\tint sum = 0;\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tsum = sum + arr[i];\n\t}\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tdp[i] = sum;\n\t}\n\treturn sum;\n}\nvoid InitStack(Stack* pstack) \n{\n\tfor (int i = 0; i < 10000; i++) {\n\t\tpstack->items[i] = 0;\n\t}\n\tpstack->top = -1;\n}\nint IsEmptyStack(Stack* pstack) \n{\n\treturn (pstack->top == -1);\n}\nint IsFullStack(Stack* pstack)\n{\n\treturn (pstack->top == (10000 - 1));\n}\nvoid Push(Stack* pstack, Data item)\n{\n\tif (IsFullStack(pstack))\n\t\texit(1);\n\tpstack->items[++(pstack->top)] = item;\n}\nData Peek(Stack* pstack) \n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)];\n}\nData Pop(Stack* pstack) \n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)--];\n}\nint main()\n{\n\tint x, y;\n\tscanf("%d", &x);\n\tscanf("%d", &y);\n\tint* p1 = (int*)malloc(sizeof(int) * x);\n\tint* p2 = (int*)malloc(sizeof(int) * y * 2);\n\tfor (int i = 0; i < x; i++)\n\t\tscanf("%d", &p1[i]);\n\tfor (int i = 0; i < 2 * y; i++)\n\t\tscanf("%d", &p2[i]);\n\n\n\tGraph graph;\n\tCreateGraph(&graph, x);\n\tfor (int i = 0; i < 2 * y; i++)\n\t{\n\t\tAddEdge(&graph, p2[i], p2[i + 1]);\n\t\ti++;\n\t}\n\n\tint* p3 = (int*)malloc(sizeof(int) * x);\n\tint* dp = (int*)malloc(sizeof(int) * x);\n\tfor (int i = 0; i < x; i++)\n\t\tdp[i] = 0;\n\tfor (int i = 0; i < x; i++)\n\t\tp3[i] = GraphSum(&graph, p1, i, dp);\n\tint check = 0;\n\tfor (int i = 0; i < x; i++)\n\t{\n\t\tif (p3[i] != 0)\n\t\t\tcheck = 1;\n\t}\n\n\tif (check == 0)\n\t\tprintf("POSSIBLE");\n\telse\n\t\tprintf("IMPOSSIBLE");\n\n\n\tDestroyGraph(&graph);\n\treturn 0;\n}	4	{"err": null, "data": [{"error": 0, "memory": 3493888, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 14, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 62189568, "output": null, "result": 0, "signal": 0, "cpu_time": 419, "exit_code": 0, "real_time": 440, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 107982848, "output": null, "result": 0, "signal": 0, "cpu_time": 604, "exit_code": 0, "real_time": 637, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4775936, "output": null, "result": 4, "signal": 0, "cpu_time": 48, "exit_code": 1, "real_time": 48, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 79822848, "output": null, "result": 0, "signal": 0, "cpu_time": 241, "exit_code": 0, "real_time": 259, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 68288512, "output": null, "result": 0, "signal": 0, "cpu_time": 262, "exit_code": 0, "real_time": 280, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3280896, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 6, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 92102656, "output": null, "result": 0, "signal": 0, "cpu_time": 309, "exit_code": 0, "real_time": 330, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 383299584, "output": null, "result": 1, "signal": 0, "cpu_time": 1419, "exit_code": 0, "real_time": 1513, "test_case": "9", "output_md5": null}]}	C	f	{"time_cost": 1419, "memory_cost": 383299584}	2016311522	116.126.252.101
216ef533bb3e34bf8eca42777460460f	2	14	2021-01-06 08:53:08.69246+00	85	#include<bits/stdc++.h>\nusing namespace std;\nint arr[1001];\nint main()\n{\n    ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);\n    int n;cin>>n;\n    for(int i=0;i<n;i++) cin>>arr[i];\n    int ans=0;\n    for(int i=0;i<n;i++)\n    {\n        int tmp=0;\n        int past=-1;\n        for(int j=0;j<n;j++)\n        {\n            if(arr[j]==arr[i]) continue;\n            if(past==-1) past=arr[j];\n            if(past==arr[j])\n            {\n                tmp++;\n            }\n            else\n            {\n                ans=max(ans,tmp);\n                past=arr[j];\n            }\n        }\n        ans=max(ans,tmp);\n    }\n    cout<<ans;\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3497984, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3629056, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3387392, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "3", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3383296, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3534848, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 3395584, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "1ff1de774005f8da13f42943881c655f"}, {"error": 0, "memory": 3530752, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "8", "output_md5": "63dc7ed1010d3c3b8269faf0ba7491d4"}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "9", "output_md5": "812b4ba287f5ee0bc9d43bbf5bbe87fb"}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "072b030ba126b2f4b2374f342be9ed44"}, {"error": 0, "memory": 3395584, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "98f13708210194c475687be6106a3b84"}, {"error": 0, "memory": 3399680, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "12", "output_md5": "45c48cce2e2d7fbdea1afc51c7c6ad26"}, {"error": 0, "memory": 3457024, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "13", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3477504, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3571712, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3567616, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 6, "test_case": "16", "output_md5": "c058f544c737782deacefa532d9add4c"}, {"error": 0, "memory": 3559424, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "17", "output_md5": "c20ad4d76fe97759aa27a0c99bff6710"}, {"error": 0, "memory": 3608576, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "18", "output_md5": "f0935e4cd5920aa6c7c996a5ee53a70f"}, {"error": 0, "memory": 3518464, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "19", "output_md5": "e2230b853516e7b05d79744fbd4c9c13"}, {"error": 0, "memory": 3395584, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "20", "output_md5": "2d6cc4b2d139a53512fb8cbb3086ae2e"}, {"error": 0, "memory": 3571712, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "21", "output_md5": "c3c59e5f8b3e9753913f4d435b53c308"}, {"error": 0, "memory": 3616768, "output": null, "result": -1, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "22", "output_md5": "63538fe6ef330c13a05a3ed7e599d5f7"}]}	C++	f	{"time_cost": 5, "memory_cost": 3629056}	2019312316	115.145.188.47
99bf4e3c85340462c1551167e935c34d	2	14	2021-01-06 08:54:12.734682+00	85	#include<bits/stdc++.h>\nusing namespace std;\nint arr[1001];\nint main()\n{\n    ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);\n    int n;cin>>n;\n    for(int i=0;i<n;i++) cin>>arr[i];\n    int ans=0;\n    for(int i=0;i<n;i++)\n    {\n        int tmp=0;\n        int past=-1;\n        for(int j=0;j<n;j++)\n        {\n            if(arr[j]==arr[i]) continue;\n            if(past==-1) past=arr[j];\n            if(past==arr[j])\n            {\n                tmp++;\n            }\n            else\n            {\n                ans=max(ans,tmp);\n                past=arr[j];\n                tmp=0;\n            }\n        }\n        ans=max(ans,tmp);\n    }\n    cout<<ans;\n    return 0;\n}	-1	{"err": null, "data": [{"error": 0, "memory": 3448832, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3551232, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3518464, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3530752, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "4", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3506176, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 2, "test_case": "5", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3497984, "output": null, "result": -1, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3559424, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "7", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3612672, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3477504, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "9", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3538944, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "10", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3629056, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "11", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3387392, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 3, "test_case": "12", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3477504, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "13", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3481600, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "14", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3514368, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 7, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3571712, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "16", "output_md5": "c20ad4d76fe97759aa27a0c99bff6710"}, {"error": 0, "memory": 3477504, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "17", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3395584, "output": null, "result": -1, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 4, "test_case": "18", "output_md5": "1679091c5a880faf6fb5e6087eb1b2dc"}, {"error": 0, "memory": 3563520, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 6, "test_case": "19", "output_md5": "d09bf41544a3365a46c9077ebb5e35c3"}, {"error": 0, "memory": 3608576, "output": null, "result": -1, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 6, "test_case": "20", "output_md5": "72b32a1f754ba1c09b3695e0cb6cde7f"}, {"error": 0, "memory": 3514368, "output": null, "result": -1, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "21", "output_md5": "2838023a778dfaecdc212708f721b788"}, {"error": 0, "memory": 3620864, "output": null, "result": -1, "signal": 0, "cpu_time": 6, "exit_code": 0, "real_time": 7, "test_case": "22", "output_md5": "2838023a778dfaecdc212708f721b788"}]}	C++	f	{"time_cost": 6, "memory_cost": 3629056}	2019312316	115.145.188.47
92cdca61073e5eb38abda6a37272d526	2	14	2021-01-06 08:55:15.035733+00	85	#include<bits/stdc++.h>\nusing namespace std;\nint arr[1001];\nint main()\n{\n    ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);\n    int n;cin>>n;\n    for(int i=0;i<n;i++) cin>>arr[i];\n    int ans=0;\n    for(int i=0;i<n;i++)\n    {\n        int tmp=0;\n        int past=-1;\n        for(int j=0;j<n;j++)\n        {\n            if(arr[j]==arr[i]) continue;\n            if(past==-1) past=arr[j];\n            if(past==arr[j])\n            {\n                tmp++;\n            }\n            else\n            {\n                ans=max(ans,tmp);\n                past=arr[j];\n                tmp=1;\n            }\n        }\n        ans=max(ans,tmp);\n    }\n    cout<<ans;\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3391488, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "1", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3457024, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "2", "output_md5": "c4ca4238a0b923820dcc509a6f75849b"}, {"error": 0, "memory": 3391488, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 2, "test_case": "3", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3506176, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "4", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3379200, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "5", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 3, "test_case": "6", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3567616, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 2, "test_case": "7", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3522560, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "e4da3b7fbbce2345d7772b0674a318d5"}, {"error": 0, "memory": 3530752, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "9", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3567616, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "10", "output_md5": "a87ff679a2f3e71d9181a67b7542122c"}, {"error": 0, "memory": 3510272, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "11", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3383296, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "12", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 6, "test_case": "13", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3383296, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 6, "test_case": "14", "output_md5": "c81e728d9d4c2f636f067f89cc14862c"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 5, "test_case": "15", "output_md5": "53fde96fcc4b4ce72d7739202324cd49"}, {"error": 0, "memory": 3481600, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "16", "output_md5": "c51ce410c124a10e0db5e4b97fc2af39"}, {"error": 0, "memory": 3432448, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 6, "test_case": "17", "output_md5": "eccbc87e4b5ce2fe28308fd9f2a7baf3"}, {"error": 0, "memory": 3567616, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "18", "output_md5": "8f14e45fceea167a5a36dedd4bea2543"}, {"error": 0, "memory": 3317760, "output": null, "result": 0, "signal": 0, "cpu_time": 2, "exit_code": 0, "real_time": 6, "test_case": "19", "output_md5": "fbd7939d674997cdb4692d34de8633c4"}, {"error": 0, "memory": 3612672, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "20", "output_md5": "66f041e16a60928b05a7e228a89c3799"}, {"error": 0, "memory": 3502080, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 5, "test_case": "21", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}, {"error": 0, "memory": 3563520, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 6, "test_case": "22", "output_md5": "9a1158154dfa42caddbd0694a4e9bdc8"}]}	C++	f	{"time_cost": 5, "memory_cost": 3612672}	2019312316	115.145.188.47
c78b5cbc9a1d0a126b7b388b988e0f9a	2	15	2021-01-06 09:04:34.660042+00	85	#include<bits/stdc++.h>\nusing namespace std;\nvector<vector<int> > v(10010);\nbool visited[10010];\nint tmp,arr[10010];\nvoid dfs(int x)\n{\n    visited[x]=true;\n    tmp+=arr[x];\n    for(auto i : v[x])\n    {\n        if(!visited[i]) dfs(i);\n    }\n}\nint main()\n{\n    ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);\n    int n,m;cin>>n>>m;\n    for(int i=0;i<n;i++) cin>>arr[i];\n    for(int i=0;i<m;i++)\n    {\n        int a,b;cin>>a>>b;\n        v[a].push_back(b);\n        v[b].push_back(a);\n    }\n    for(int i=0;i<n;i++)\n    {\n        if(!visited[i])\n        {\n            tmp=0;\n            dfs(i);\n            if(tmp!=0){cout<<"IMPOSSIBLE";return 0;}\n        }\n    }\n    cout<<"POSSIBLE";\n    return 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 3969024, "output": null, "result": 0, "signal": 0, "cpu_time": 4, "exit_code": 0, "real_time": 12, "test_case": "1", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3960832, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 10, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3862528, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4165632, "output": null, "result": 0, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 12, "test_case": "4", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3710976, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 8, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3870720, "output": null, "result": 0, "signal": 0, "cpu_time": 5, "exit_code": 0, "real_time": 5, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4030464, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "7", "output_md5": "e23b33dee677e4477f0f7ddeb6cf87bd"}, {"error": 0, "memory": 3670016, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3973120, "output": null, "result": 0, "signal": 0, "cpu_time": 9, "exit_code": 0, "real_time": 10, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C++	f	{"time_cost": 11, "memory_cost": 4165632}	2019312316	115.145.188.47
86f8cb46593d9c6093457986cf3c8612	2	15	2021-01-06 09:05:35.527989+00	99	#include<stdio.h>\n#include<stdlib.h>\n\ntypedef struct _GNode\n{\n\tint id;\n\tstruct _GNode* next;\n} GNode;\ntypedef struct\n{\n\tint num;\n\tGNode** heads;\n} Graph;\n\nvoid CreateGraph(Graph* pgraph, int num);\nvoid DestroyGraph(Graph* pgraph);\nvoid AddEdge(Graph* pgraph, int src, int dest);\nint GraphSum(Graph* pgraph, int arr[], int x,int dp[]);\n\nvoid CreateGraph(Graph* pgraph, int num)\n{\n\tpgraph->num = num;\n\tpgraph->heads = (GNode**)malloc(sizeof(GNode*) * num);\n\tfor (int i = 0; i < num; i++) {\n\t\tpgraph->heads[i] = (GNode*)malloc(sizeof(GNode));\n\t\tpgraph->heads[i]->id = i;\n\t\tpgraph->heads[i]->next = NULL;\n\t}\n}\nvoid DestroyGraph(Graph* pgraph)\n{\n\tfor (int i = 0; i < pgraph->num; i++) {\n\t\tGNode* cur = pgraph->heads[i];\n\t\twhile (cur != NULL) {\n\t\t\tGNode* temp = cur;\n\t\t\tcur = cur->next;\n\t\t\tfree(temp);\n\t\t}\n\t}\n\tfree(pgraph->heads);\n}\nvoid AddEdge(Graph* pgraph, int src, int dest)\n{\n\tGNode* newNode1, * newNode2, * cur;\n\tnewNode1 = (GNode*)malloc(sizeof(GNode));\n\tnewNode1->id = dest;\n\tnewNode1->next = NULL;\n\tcur = pgraph->heads[src]; \n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode1;\n\tnewNode2 = (GNode*)malloc(sizeof(GNode));\n\tnewNode2->id = src;\n\tnewNode2->next = NULL;\n\tcur = pgraph->heads[dest]; \n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode2;\n}\nint GraphSum(Graph* pgraph, int arr[], int x,int dp[])\n{\n\tint* temp = (int*)malloc(sizeof(int) * pgraph->num);\n\ttemp[0] = x;\n\tint count = 1;\n\tint pos = 0;\n\tGNode* cur = pgraph->heads[x]->next;\n\n\twhile (pos < count)\n\t{\n\t\tcur = pgraph->heads[temp[pos]];\n\t\twhile (cur != NULL)\n\t\t{\n\t\t\tif (dp[cur->id] != 0)\n\t\t\t{\n\t\t\t\tdp[x] = dp[cur->id];\n\t\t\t\treturn dp[cur->id];\n\t\t\t}\n\t\t\tint check = 0;\n\t\t\tfor (int i = 0; i < count; i++)\n\t\t\t{\n\t\t\t\tif (temp[i] == cur->id)\n\t\t\t\t\tcheck = 1;\n\t\t\t}\n\t\t\tif (check == 0)\n\t\t\t{\n\t\t\t\ttemp[count] = cur->id;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tcur = cur->next;\n\t\t}\n\t\tpos++;\n\t}\n\tint sum = 0;\n\tfor (int i = 0; i < count; i++)\n\t\tsum = sum + arr[temp[i]];\n\tdp[x] = sum;\n\tfree(temp);\n\treturn sum;\n}\nint main()\n{\n\tint x,y;\n\tscanf_s("%d", &x);\n\tscanf_s("%d", &y);\n\tint* p1 = (int*)malloc(sizeof(int) * x);\n\tint* p2 = (int*)malloc(sizeof(int) * y * 2);\n\tfor (int i = 0; i < x; i++)\n\t\tscanf_s("%d", &p1[i]);\n\tfor (int i = 0; i < 2 * y; i++)\n\t\tscanf_s("%d", &p2[i]);\n\n\tGraph graph;\n\tCreateGraph(&graph, x);\n\tfor (int i = 0; i < 2 * y; i++)\n\t{\n\t\tAddEdge(&graph, p2[i], p2[i + 1]);\n\t\ti++;\n\t}\n\tint* p3 = (int*)malloc(sizeof(int) * x);\n\tint* dp = (int*)malloc(sizeof(int) * x);\n\tfor (int i = 0; i < x; i++)\n\t\tdp[i] = 0;\n\tfor (int i = 0; i < x; i++)\n\t\tp3[i] = GraphSum(&graph, p1, i, dp);\n\tint check = 0;\n\tfor (int i = 0; i < x; i++)\n\t{\n\t\tif (p3[i] != 0)\n\t\t\tcheck = 1;\n\t}\n\tif (check == 0)\n\t\tprintf("POSSIBLE");\n\telse\n\t\tprintf("IMPOSSIBLE");\n\n\n\tDestroyGraph(&graph);\n\treturn 0;\n}	-2	{}	C	f	{"score": 0, "err_info": "/tmp/cchZVAK6.o: In function `main':\\nmain.c:(.text.startup+0x2b): undefined reference to `scanf_s'\\nmain.c:(.text.startup+0x3e): undefined reference to `scanf_s'\\nmain.c:(.text.startup+0x89): undefined reference to `scanf_s'\\nmain.c:(.text.startup+0xb9): undefined reference to `scanf_s'\\ncollect2: error: ld returned 1 exit status"}	2016311522	116.126.252.101
159416773f9f5c3709a0dfed064d6432	2	15	2021-01-06 11:15:50.035909+00	99	#include<stdio.h>\n#include<stdlib.h>\n\ntypedef enum { false, true }bool;\ntypedef int Data;\n\ntypedef struct {\n\tData items[10000];\n\tint top;\n}Stack;\ntypedef struct _GNode\n{\n\tint id;\n\tstruct _GNode* next;\n} GNode;\ntypedef struct\n{\n\tint num;\n\tGNode** heads;\n} Graph;\n\nvoid CreateGraph(Graph* pgraph, int num);\nvoid DestroyGraph(Graph* pgraph);\nvoid AddEdge(Graph* pgraph, int src, int dest);\nint GraphSum(Graph* pgraph, int arr[], int x, int dp[]);\nvoid InitStack(Stack* pstack);\nint IsEmptyStack(Stack* pstack);\nint IsFullStack(Stack* pstack);\nvoid Push(Stack* pstack, Data item);\nData Peek(Stack* pstack);\nData Pop(Stack* pstack);\n\nvoid CreateGraph(Graph* pgraph, int num)\n{\n\tpgraph->num = num;\n\tpgraph->heads = (GNode**)malloc(sizeof(GNode*) * num);\n\tfor (int i = 0; i < num; i++) {\n\t\tpgraph->heads[i] = (GNode*)malloc(sizeof(GNode));\n\t\tpgraph->heads[i]->id = i;\n\t\tpgraph->heads[i]->next = NULL;\n\t}\n}\nvoid DestroyGraph(Graph* pgraph)\n{\n\tfor (int i = 0; i < pgraph->num; i++) {\n\t\tGNode* cur = pgraph->heads[i];\n\t\twhile (cur != NULL) {\n\t\t\tGNode* temp = cur;\n\t\t\tcur = cur->next;\n\t\t\tfree(temp);\n\t\t}\n\t}\n\tfree(pgraph->heads);\n}\nvoid AddEdge(Graph* pgraph, int src, int dest)\n{\n\tGNode* newNode1, * newNode2, * cur;\n\tnewNode1 = (GNode*)malloc(sizeof(GNode));\n\tnewNode1->id = dest;\n\tnewNode1->next = NULL;\n\tcur = pgraph->heads[src];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode1;\n\tnewNode2 = (GNode*)malloc(sizeof(GNode));\n\tnewNode2->id = src;\n\tnewNode2->next = NULL;\n\tcur = pgraph->heads[dest];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode2;\n}\nint GraphSum(Graph* pgraph, int arr[], int x,int dp[])\n{\n\tif (dp[x] != 0)\n\t\treturn dp[x];\n\tStack stack;\n\tbool* visited = (bool*)malloc(sizeof(bool) * pgraph->num);\n\tfor (int i = 0; i < pgraph->num; i++)\n\t\tvisited[i] = 0;\n\tInitStack(&stack);\n\tPush(&stack, x);\n\twhile (!IsEmptyStack(&stack))\n\t{\n\t\tGNode* cur;\n\t\tint vtx = Peek(&stack);\n\t\tPop(&stack);\n\t\tif (visited[vtx]) continue;\n\t\telse\n\t\t\tvisited[vtx] = true;\n\n\t\tcur = pgraph->heads[vtx]->next;\n\t\twhile (cur != NULL)\n\t\t{\n\t\t\tif (!visited[cur->id])\n\t\t\t\tPush(&stack, cur->id);\n\t\t\tcur = cur->next;\n\t\t}\n\t}\n\n\tint sum = 0;\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tsum = sum + arr[i];\n\t}\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tdp[i] = sum;\n\t}\n\treturn sum;\n}\nvoid InitStack(Stack* pstack) \n{\n\tfor (int i = 0; i < 10000; i++) {\n\t\tpstack->items[i] = 0;\n\t}\n\tpstack->top = -1;\n}\nint IsEmptyStack(Stack* pstack) \n{\n\treturn (pstack->top == -1);\n}\nint IsFullStack(Stack* pstack)\n{\n\treturn (pstack->top == (10000 - 1));\n}\nvoid Push(Stack* pstack, Data item)\n{\n\tif (IsFullStack(pstack))\n\t\texit(1);\n\tpstack->items[++(pstack->top)] = item;\n}\nData Peek(Stack* pstack) \n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)];\n}\nData Pop(Stack* pstack) \n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)--];\n}\nint main()\n{\n\tint x,y;\n\tscanf("%d", &x);\n\tscanf("%d", &y);\n\tint* p1 = (int*)malloc(sizeof(int) * x);\n\tint* p2 = (int*)malloc(sizeof(int) * y * 2);\n\tfor (int i = 0; i < x; i++)\n\t\tscanf("%d", &p1[i]);\n\tfor (int i = 0; i < 2 * y; i++)\n\t\tscanf("%d", &p2[i]);\n\n\n\tGraph graph;\n\tCreateGraph(&graph, x);\n\tfor (int i = 0; i < 2 * y; i++)\n\t{\n\t\tAddEdge(&graph, p2[i], p2[i + 1]);\n\t\ti++;\n\t}\n\n\tint* p3 = (int*)malloc(sizeof(int) * x);\n\tint* dp = (int*)malloc(sizeof(int) * x);\n\tfor (int i = 0; i < x; i++)\n\t\tdp[i] = 0;\n\tfor (int i = 0; i < x; i++)\n\t\tp3[i] = GraphSum(&graph, p1, i, dp);\n\tint check = 0;\n\tfor (int i = 0; i < x; i++)\n\t{\n\t\tif (p3[i] != 0)\n\t\t\tcheck = 1;\n\t}\n\n\tif (check == 0)\n\t\tprintf("POSSIBLE");\n\telse\n\t\tprintf("IMPOSSIBLE");\n\n\n\tDestroyGraph(&graph);\n\treturn 0;\n}	4	{"err": null, "data": [{"error": 0, "memory": 3506176, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 16, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 62193664, "output": null, "result": 0, "signal": 0, "cpu_time": 431, "exit_code": 0, "real_time": 439, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 107986944, "output": null, "result": 0, "signal": 0, "cpu_time": 630, "exit_code": 0, "real_time": 651, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4771840, "output": null, "result": 4, "signal": 0, "cpu_time": 32, "exit_code": 1, "real_time": 36, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 79814656, "output": null, "result": 0, "signal": 0, "cpu_time": 257, "exit_code": 0, "real_time": 257, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 68280320, "output": null, "result": 0, "signal": 0, "cpu_time": 247, "exit_code": 0, "real_time": 260, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3235840, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 11, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 92188672, "output": null, "result": 0, "signal": 0, "cpu_time": 317, "exit_code": 0, "real_time": 341, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 383279104, "output": null, "result": 1, "signal": 0, "cpu_time": 1445, "exit_code": 0, "real_time": 1502, "test_case": "9", "output_md5": null}]}	C	f	{"time_cost": 1445, "memory_cost": 383279104}	2016311522	116.126.252.101
b3b531c92e87dc0cd65c62b137678e6a	2	15	2021-01-06 11:20:53.098068+00	99	#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\n\n\ntypedef enum { false, true }bool;\ntypedef int Data;\n\ntypedef struct {\n\tData items[1000];\n\tint top;\n}Stack;\ntypedef struct _GNode\n{\n\tint id;\n\tstruct _GNode* next;\n} GNode;\ntypedef struct\n{\n\tint num;\n\tGNode** heads;\n} Graph;\n\nvoid CreateGraph(Graph* pgraph, int num);\nvoid DestroyGraph(Graph* pgraph);\nvoid AddEdge(Graph* pgraph, int src, int dest);\nint GraphSum(Graph* pgraph, int arr[], int x, int dp[]);\nvoid InitStack(Stack* pstack);\nint IsEmptyStack(Stack* pstack);\nint IsFullStack(Stack* pstack);\nvoid Push(Stack* pstack, Data item);\nData Peek(Stack* pstack);\nData Pop(Stack* pstack);\n\nvoid CreateGraph(Graph* pgraph, int num)\n{\n\tpgraph->num = num;\n\tpgraph->heads = (GNode**)malloc(sizeof(GNode*) * num);\n\tfor (int i = 0; i < num; i++) {\n\t\tpgraph->heads[i] = (GNode*)malloc(sizeof(GNode));\n\t\tpgraph->heads[i]->id = i;\n\t\tpgraph->heads[i]->next = NULL;\n\t}\n}\nvoid DestroyGraph(Graph* pgraph)\n{\n\tfor (int i = 0; i < pgraph->num; i++) {\n\t\tGNode* cur = pgraph->heads[i];\n\t\twhile (cur != NULL) {\n\t\t\tGNode* temp = cur;\n\t\t\tcur = cur->next;\n\t\t\tfree(temp);\n\t\t}\n\t}\n\tfree(pgraph->heads);\n}\nvoid AddEdge(Graph* pgraph, int src, int dest)\n{\n\tGNode* newNode1, * newNode2, * cur;\n\tnewNode1 = (GNode*)malloc(sizeof(GNode));\n\tnewNode1->id = dest;\n\tnewNode1->next = NULL;\n\tcur = pgraph->heads[src];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode1;\n\tnewNode2 = (GNode*)malloc(sizeof(GNode));\n\tnewNode2->id = src;\n\tnewNode2->next = NULL;\n\tcur = pgraph->heads[dest];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode2;\n}\nint GraphSum(Graph* pgraph, int arr[], int x,int dp[])\n{\n\tif (dp[x] != 0)\n\t\treturn dp[x];\n\tStack stack;\n\tbool* visited = (bool*)malloc(sizeof(bool) * pgraph->num);\n\tfor (int i = 0; i < pgraph->num; i++)\n\t\tvisited[i] = 0;\n\tInitStack(&stack);\n\tPush(&stack, x);\n\twhile (!IsEmptyStack(&stack))\n\t{\n\t\tGNode* cur;\n\t\tint vtx = Peek(&stack);\n\t\tPop(&stack);\n\t\tif (visited[vtx]) continue;\n\t\telse\n\t\t\tvisited[vtx] = true;\n\n\t\tcur = pgraph->heads[vtx]->next;\n\t\twhile (cur != NULL)\n\t\t{\n\t\t\tif (!visited[cur->id])\n\t\t\t\tPush(&stack, cur->id);\n\t\t\tcur = cur->next;\n\t\t}\n\t}\n\n\tint sum = 0;\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tsum = sum + arr[i];\n\t}\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tdp[i] = sum;\n\t}\n\treturn sum;\n}\nvoid InitStack(Stack* pstack) \n{\n\tfor (int i = 0; i < 1000; i++) {\n\t\tpstack->items[i] = 0;\n\t}\n\tpstack->top = -1;\n}\nint IsEmptyStack(Stack* pstack) \n{\n\treturn (pstack->top == -1);\n}\nint IsFullStack(Stack* pstack)\n{\n\treturn (pstack->top == (1000 - 1));\n}\nvoid Push(Stack* pstack, Data item)\n{\n\tif (IsFullStack(pstack))\n\t\texit(1);\n\tpstack->items[++(pstack->top)] = item;\n}\nData Peek(Stack* pstack) \n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)];\n}\nData Pop(Stack* pstack) \n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)--];\n}\nint main()\n{\n\tint x, y;\n\tscanf("%d", &x);\n\tscanf("%d", &y);\n\tint* p1 = (int*)malloc(sizeof(int) * x);\n\tint* p2 = (int*)malloc(sizeof(int) * y * 2);\n\tfor (int i = 0; i < x; i++)\n\t\tscanf("%d", &p1[i]);\n\tfor (int i = 0; i < 2 * y; i++)\n\t\tscanf("%d", &p2[i]);\n\n\n\tGraph graph;\n\tCreateGraph(&graph, x);\n\tfor (int i = 0; i < 2 * y; i++)\n\t{\n\t\tAddEdge(&graph, p2[i], p2[i + 1]);\n\t\ti++;\n\t}\n\n\tint* p3 = (int*)malloc(sizeof(int) * x);\n\tint* dp = (int*)malloc(sizeof(int) * x);\n\tfor (int i = 0; i < x; i++)\n\t\tdp[i] = 0;\n\tfor (int i = 0; i < x; i++)\n\t\tp3[i] = GraphSum(&graph, p1, i, dp);\n\tint check = 0;\n\tfor (int i = 0; i < x; i++)\n\t{\n\t\tif (p3[i] != 0)\n\t\t\tcheck = 1;\n\t}\n\n\tif (check == 0)\n\t\tprintf("POSSIBLE");\n\telse\n\t\tprintf("IMPOSSIBLE");\n\n\n\tDestroyGraph(&graph);\n\treturn 0;\n}	4	{"err": null, "data": [{"error": 0, "memory": 3416064, "output": null, "result": 4, "signal": 0, "cpu_time": 14, "exit_code": 1, "real_time": 15, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 3764224, "output": null, "result": 4, "signal": 0, "cpu_time": 16, "exit_code": 1, "real_time": 17, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 2637824, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 11, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 4726784, "output": null, "result": 4, "signal": 0, "cpu_time": 29, "exit_code": 1, "real_time": 37, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 2465792, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 9, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 2355200, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 5, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3198976, "output": null, "result": 4, "signal": 0, "cpu_time": 5, "exit_code": 1, "real_time": 11, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 92041216, "output": null, "result": 0, "signal": 0, "cpu_time": 288, "exit_code": 0, "real_time": 321, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3346432, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 11, "test_case": "9", "output_md5": null}]}	C	f	{"time_cost": 288, "memory_cost": 92041216}	2016311522	116.126.252.101
dc82a685a991dfdffcd66b85ba1eb330	2	15	2021-01-06 11:49:00.699696+00	99	#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\n\n\ntypedef enum { false, true }bool;\ntypedef int Data;\n\ntypedef struct {\n\tData items[10000];\n\tint top;\n}Stack;\ntypedef struct _GNode\n{\n\tint id;\n\tstruct _GNode* next;\n} GNode;\ntypedef struct\n{\n\tint num;\n\tGNode** heads;\n} Graph;\n\nvoid CreateGraph(Graph* pgraph, int num);\nvoid DestroyGraph(Graph* pgraph);\nvoid AddEdge(Graph* pgraph, int src, int dest);\nint GraphSum(Graph* pgraph, int arr[], int x, int dp[]);\nvoid InitStack(Stack* pstack);\nint IsEmptyStack(Stack* pstack);\nint IsFullStack(Stack* pstack);\nvoid Push(Stack* pstack, Data item);\nData Peek(Stack* pstack);\nData Pop(Stack* pstack);\n\nvoid CreateGraph(Graph* pgraph, int num)\n{\n\tpgraph->num = num;\n\tpgraph->heads = (GNode**)malloc(sizeof(GNode*) * num);\n\tfor (int i = 0; i < num; i++) {\n\t\tpgraph->heads[i] = (GNode*)malloc(sizeof(GNode));\n\t\tpgraph->heads[i]->id = i;\n\t\tpgraph->heads[i]->next = NULL;\n\t}\n}\nvoid DestroyGraph(Graph* pgraph)\n{\n\tfor (int i = 0; i < pgraph->num; i++) {\n\t\tGNode* cur = pgraph->heads[i];\n\t\twhile (cur != NULL) {\n\t\t\tGNode* temp = cur;\n\t\t\tcur = cur->next;\n\t\t\tfree(temp);\n\t\t}\n\t}\n\tfree(pgraph->heads);\n}\nvoid AddEdge(Graph* pgraph, int src, int dest)\n{\n\tGNode* newNode1, * newNode2, * cur;\n\tnewNode1 = (GNode*)malloc(sizeof(GNode));\n\tnewNode1->id = dest;\n\tnewNode1->next = NULL;\n\tcur = pgraph->heads[src];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode1;\n\tnewNode2 = (GNode*)malloc(sizeof(GNode));\n\tnewNode2->id = src;\n\tnewNode2->next = NULL;\n\tcur = pgraph->heads[dest];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode2;\n}\nint GraphSum(Graph* pgraph, int arr[], int x,int dp[])\n{\n\tif (dp[x] != -1)\n\t\treturn dp[x];\n\tStack stack;\n\tbool* visited = (bool*)malloc(sizeof(bool) * pgraph->num);\n\tfor (int i = 0; i < pgraph->num; i++)\n\t\tvisited[i] = 0;\n\tInitStack(&stack);\n\tPush(&stack, x);\n\twhile (!IsEmptyStack(&stack))\n\t{\n\t\tGNode* cur;\n\t\tint vtx = Peek(&stack);\n\t\tPop(&stack);\n\t\tif (visited[vtx]) continue;\n\t\telse\n\t\t\tvisited[vtx] = true;\n\n\t\tcur = pgraph->heads[vtx]->next;\n\t\twhile (cur != NULL)\n\t\t{\n\t\t\tif (!visited[cur->id])\n\t\t\t\tPush(&stack, cur->id);\n\t\t\tcur = cur->next;\n\t\t}\n\t}\n\n\tint sum = 0;\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tsum = sum + arr[i];\n\t}\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tdp[i] = sum;\n\t}\n\n\treturn sum;\n}\nvoid InitStack(Stack* pstack) \n{\n\tfor (int i = 0; i < 10000; i++) {\n\t\tpstack->items[i] = 0;\n\t}\n\tpstack->top = -1;\n}\nint IsEmptyStack(Stack* pstack) \n{\n\treturn (pstack->top == -1);\n}\nint IsFullStack(Stack* pstack)\n{\n\treturn (pstack->top == (10000 - 1));\n}\nvoid Push(Stack* pstack, Data item)\n{\n\tif (IsFullStack(pstack))\n\t\texit(1);\n\tpstack->items[++(pstack->top)] = item;\n}\nData Peek(Stack* pstack) \n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)];\n}\nData Pop(Stack* pstack) \n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)--];\n}\nint main()\n{\n\tint x, y;\n\tscanf("%d", &x);\n\tscanf("%d", &y);\n\tint* p1 = (int*)malloc(sizeof(int) * x);\n\tint* p2 = (int*)malloc(sizeof(int) * y * 2);\n\tfor (int i = 0; i < x; i++)\n\t\tscanf("%d", &p1[i]);\n\tfor (int i = 0; i < 2 * y; i++)\n\t\tscanf("%d", &p2[i]);\n\tGraph graph;\n\tCreateGraph(&graph, x);\n\tfor (int i = 0; i < 2 * y; i++)\n\t{\n\t\tAddEdge(&graph, p2[i], p2[i + 1]);\n\t\ti++;\n\t}\n\t\n\tint* p3 = (int*)malloc(sizeof(int) * x);\n\tint* dp = (int*)malloc(sizeof(int) * x);\n\tfor (int i = 0; i < x; i++)\n\t\tdp[i] = -1;\n\tfor (int i = 0; i < x; i++)\n\t\tp3[i] = GraphSum(&graph, p1, i, dp);\n\n\tint check = 0;\n\tfor (int i = 0; i < x; i++)\n\t{\n\t\tif (p3[i] != 0)\n\t\t\tcheck = 1;\n\t}\n\tif (check == 0)\n\t\tprintf("POSSIBLE");\n\telse\n\t\tprintf("IMPOSSIBLE");\n\tDestroyGraph(&graph);\n\treturn 0;\n}	4	{"err": null, "data": [{"error": 0, "memory": 3428352, "output": null, "result": 4, "signal": 0, "cpu_time": 15, "exit_code": 1, "real_time": 16, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 4042752, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 17, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 2863104, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 8, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4771840, "output": null, "result": 4, "signal": 0, "cpu_time": 26, "exit_code": 1, "real_time": 34, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 2727936, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 2641920, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 9, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3334144, "output": null, "result": 4, "signal": 0, "cpu_time": 7, "exit_code": 1, "real_time": 11, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 2437120, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3457024, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C	f	{"time_cost": 26, "memory_cost": 4771840}	2016311522	116.126.252.101
ab1c8b7288cd43ec0e77832ee6acc7d7	2	13	2021-01-06 12:27:55.33116+00	149	rotate = ['H','I','N','O','S','X','Z']\n\nword = input('샘플 인풋:')\njudge=0\nfor i in range(0,len(word)):\n    if len(word) >= 30:\n        judge = 0\n        break\n    elif word[i] in rotate:\n        judge += 1\n    else:\n        break\n\nif judge == len(word):\n    print("YES")\nelif judge == 0:\n    print("문자 초과")\nelse:\n    print("NO")	-1	{"err": null, "data": [{"error": 0, "memory": 8896512, "output": null, "result": -1, "signal": 0, "cpu_time": 18, "exit_code": 0, "real_time": 19, "test_case": "1", "output_md5": "6de8ba8d9d0f4d5b5a197908dfc3990c"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8794112, "output": null, "result": -1, "signal": 0, "cpu_time": 14, "exit_code": 0, "real_time": 19, "test_case": "3", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8966144, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "4", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}, {"error": 0, "memory": 8847360, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 16, "test_case": "5", "output_md5": "6de8ba8d9d0f4d5b5a197908dfc3990c"}, {"error": 0, "memory": 8962048, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 15, "test_case": "6", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8941568, "output": null, "result": -1, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 14, "test_case": "7", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8945664, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "8", "output_md5": "6de8ba8d9d0f4d5b5a197908dfc3990c"}, {"error": 0, "memory": 8966144, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "9", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8798208, "output": null, "result": -1, "signal": 0, "cpu_time": 12, "exit_code": 0, "real_time": 17, "test_case": "10", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}]}	Python3	f	{"time_cost": 18, "memory_cost": 8966144}	2019312486	39.118.136.79
ff231bf0e4a02d91ab899b1f463d6ec3	2	12	2021-01-06 11:50:04.788278+00	148	#include <stdio.h>\n\nint main()\n{\n\tint h[4] = {0,};\n\tint Up = 0, Down = 0, Flat = 0;\n\n\tscanf("%d", &h[0]);\n\n\tfor (int i=1; i<4; i++) {\n\t\tscanf("%d", &h[i]);\n\t\tif (h[i-1] < h[i])\n\t\t\tUp++;\n\t\telse if (h[i-1] > h[i])\n\t\t\tDown++;\n\t\telse\n\t\t\tFlat++;\n\t}\n\n\tif (Up == 3)\n\t\tprintf("Uphill\\n");\n\telse if (Down == 3)\n\t\tprintf("Downhill\\n");\n\telse if (Flat == 3)\n\t\tprintf("Flat Land\\n");\n\telse\n\t\tprintf("Unknown\\n");\n\n\treturn 0;\n}	0	{"err": null, "data": [{"error": 0, "memory": 1740800, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "1", "output_md5": "fb17f4489a9c61e0ac6f91a2c273c385"}, {"error": 0, "memory": 1626112, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "2", "output_md5": "1610e363a7085598cbb3f9ce5cb7732e"}, {"error": 0, "memory": 1548288, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "3", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}, {"error": 0, "memory": 1576960, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "4", "output_md5": "6dd08fe20654d741a880b5121aff195e"}, {"error": 0, "memory": 1646592, "output": null, "result": 0, "signal": 0, "cpu_time": 1, "exit_code": 0, "real_time": 1, "test_case": "5", "output_md5": "88183b946cc5f0e8c96b2e66e1c74a7e"}]}	C	f	{"time_cost": 1, "memory_cost": 1740800}	2018312800	49.164.87.139
9ad89abba98049a3b91ea4472c1c556a	2	15	2021-01-06 11:50:46.13618+00	99	#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\n\n\ntypedef enum { false, true }bool;\ntypedef int Data;\n\ntypedef struct {\n\tData items[1000];\n\tint top;\n}Stack;\ntypedef struct _GNode\n{\n\tint id;\n\tstruct _GNode* next;\n} GNode;\ntypedef struct\n{\n\tint num;\n\tGNode** heads;\n} Graph;\n\nvoid CreateGraph(Graph* pgraph, int num);\nvoid DestroyGraph(Graph* pgraph);\nvoid AddEdge(Graph* pgraph, int src, int dest);\nint GraphSum(Graph* pgraph, int arr[], int x, int dp[]);\nvoid InitStack(Stack* pstack);\nint IsEmptyStack(Stack* pstack);\nint IsFullStack(Stack* pstack);\nvoid Push(Stack* pstack, Data item);\nData Peek(Stack* pstack);\nData Pop(Stack* pstack);\n\nvoid CreateGraph(Graph* pgraph, int num)\n{\n\tpgraph->num = num;\n\tpgraph->heads = (GNode**)malloc(sizeof(GNode*) * num);\n\tfor (int i = 0; i < num; i++) {\n\t\tpgraph->heads[i] = (GNode*)malloc(sizeof(GNode));\n\t\tpgraph->heads[i]->id = i;\n\t\tpgraph->heads[i]->next = NULL;\n\t}\n}\nvoid DestroyGraph(Graph* pgraph)\n{\n\tfor (int i = 0; i < pgraph->num; i++) {\n\t\tGNode* cur = pgraph->heads[i];\n\t\twhile (cur != NULL) {\n\t\t\tGNode* temp = cur;\n\t\t\tcur = cur->next;\n\t\t\tfree(temp);\n\t\t}\n\t}\n\tfree(pgraph->heads);\n}\nvoid AddEdge(Graph* pgraph, int src, int dest)\n{\n\tGNode* newNode1, * newNode2, * cur;\n\tnewNode1 = (GNode*)malloc(sizeof(GNode));\n\tnewNode1->id = dest;\n\tnewNode1->next = NULL;\n\tcur = pgraph->heads[src];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode1;\n\tnewNode2 = (GNode*)malloc(sizeof(GNode));\n\tnewNode2->id = src;\n\tnewNode2->next = NULL;\n\tcur = pgraph->heads[dest];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode2;\n}\nint GraphSum(Graph* pgraph, int arr[], int x, int dp[])\n{\n\tif (dp[x] != -1)\n\t\treturn dp[x];\n\tStack stack;\n\tbool* visited = (bool*)malloc(sizeof(bool) * pgraph->num);\n\tfor (int i = 0; i < pgraph->num; i++)\n\t\tvisited[i] = 0;\n\tInitStack(&stack);\n\tPush(&stack, x);\n\twhile (!IsEmptyStack(&stack))\n\t{\n\t\tGNode* cur;\n\t\tint vtx = Peek(&stack);\n\t\tPop(&stack);\n\t\tif (visited[vtx]) continue;\n\t\telse\n\t\t\tvisited[vtx] = true;\n\n\t\tcur = pgraph->heads[vtx]->next;\n\t\twhile (cur != NULL)\n\t\t{\n\t\t\tif (!visited[cur->id])\n\t\t\t\tPush(&stack, cur->id);\n\t\t\tcur = cur->next;\n\t\t}\n\t}\n\n\tint sum = 0;\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tsum = sum + arr[i];\n\t}\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tdp[i] = sum;\n\t}\n\n\treturn sum;\n}\nvoid InitStack(Stack* pstack)\n{\n\tfor (int i = 0; i < 1000; i++) {\n\t\tpstack->items[i] = 0;\n\t}\n\tpstack->top = -1;\n}\nint IsEmptyStack(Stack* pstack)\n{\n\treturn (pstack->top == -1);\n}\nint IsFullStack(Stack* pstack)\n{\n\treturn (pstack->top == (1000 - 1));\n}\nvoid Push(Stack* pstack, Data item)\n{\n\tif (IsFullStack(pstack))\n\t\texit(1);\n\tpstack->items[++(pstack->top)] = item;\n}\nData Peek(Stack* pstack)\n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)];\n}\nData Pop(Stack* pstack)\n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)--];\n}\nint main()\n{\n\tint x, y;\n\tscanf("%d", &x);\n\tscanf("%d", &y);\n\tint* p1 = (int*)malloc(sizeof(int) * x);\n\tint* p2 = (int*)malloc(sizeof(int) * y * 2);\n\tfor (int i = 0; i < x; i++)\n\t\tscanf("%d", &p1[i]);\n\tfor (int i = 0; i < 2 * y; i++)\n\t\tscanf("%d", &p2[i]);\n\tGraph graph;\n\tCreateGraph(&graph, x);\n\tfor (int i = 0; i < 2 * y; i++)\n\t{\n\t\tAddEdge(&graph, p2[i], p2[i + 1]);\n\t\ti++;\n\t}\n\n\tint* p3 = (int*)malloc(sizeof(int) * x);\n\tint* dp = (int*)malloc(sizeof(int) * x);\n\tfor (int i = 0; i < x; i++)\n\t\tdp[i] = -1;\n\tfor (int i = 0; i < x; i++)\n\t\tp3[i] = GraphSum(&graph, p1, i, dp);\n\n\tint check = 0;\n\tfor (int i = 0; i < x; i++)\n\t{\n\t\tif (p3[i] != 0)\n\t\t\tcheck = 1;\n\t}\n\tif (check == 0)\n\t\tprintf("POSSIBLE");\n\telse\n\t\tprintf("IMPOSSIBLE");\n\tDestroyGraph(&graph);\n\treturn 0;\n}	4	{"err": null, "data": [{"error": 0, "memory": 3444736, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 15, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 3805184, "output": null, "result": 4, "signal": 0, "cpu_time": 10, "exit_code": 1, "real_time": 11, "test_case": "2", "output_md5": null}, {"error": 0, "memory": 2670592, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 7, "test_case": "3", "output_md5": null}, {"error": 0, "memory": 4710400, "output": null, "result": 4, "signal": 0, "cpu_time": 33, "exit_code": 1, "real_time": 37, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 2494464, "output": null, "result": 4, "signal": 0, "cpu_time": 8, "exit_code": 1, "real_time": 9, "test_case": "5", "output_md5": null}, {"error": 0, "memory": 2400256, "output": null, "result": 4, "signal": 0, "cpu_time": 6, "exit_code": 1, "real_time": 6, "test_case": "6", "output_md5": null}, {"error": 0, "memory": 3223552, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 9, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 2482176, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 4, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3317760, "output": null, "result": 4, "signal": 0, "cpu_time": 12, "exit_code": 1, "real_time": 12, "test_case": "9", "output_md5": null}]}	C	f	{"time_cost": 33, "memory_cost": 4710400}	2016311522	116.126.252.101
7cfcc267fd5ef09119bde62390ec422b	2	13	2021-01-06 12:28:40.960056+00	149	rotate = ['H','I','N','O','S','X','Z']\n\nword = input('샘플 인풋:')\njudge=0\nfor i in range(0,len(word)):\n    if word[i] in rotate:\n        judge += 1\n    else:\n        break\n\nif judge == len(word):\n    print("YES")\nelse:\n    print("NO")	-1	{"err": null, "data": [{"error": 0, "memory": 8929280, "output": null, "result": -1, "signal": 0, "cpu_time": 15, "exit_code": 0, "real_time": 21, "test_case": "1", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 15, "test_case": "2", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8884224, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 18, "test_case": "3", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8843264, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 19, "test_case": "4", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}, {"error": 0, "memory": 8855552, "output": null, "result": -1, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "5", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}, {"error": 0, "memory": 8896512, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 20, "test_case": "6", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8957952, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "7", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8855552, "output": null, "result": -1, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 17, "test_case": "8", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}, {"error": 0, "memory": 8900608, "output": null, "result": -1, "signal": 0, "cpu_time": 16, "exit_code": 0, "real_time": 21, "test_case": "9", "output_md5": "bd489fefb000bd6994716405a195ea56"}, {"error": 0, "memory": 8916992, "output": null, "result": -1, "signal": 0, "cpu_time": 11, "exit_code": 0, "real_time": 15, "test_case": "10", "output_md5": "525065aa73b9ecdeef5c2465f7885a98"}]}	Python3	f	{"time_cost": 17, "memory_cost": 8957952}	2019312486	39.118.136.79
b24d24e25c0f9af95d25bb67154527d7	2	15	2021-01-06 11:53:33.339011+00	99	#include<stdio.h>\n#include<stdlib.h>\n#include<time.h>\n\n\ntypedef enum { false, true }bool;\ntypedef int Data;\n\ntypedef struct {\n\tData items[10000];\n\tint top;\n}Stack;\ntypedef struct _GNode\n{\n\tint id;\n\tstruct _GNode* next;\n} GNode;\ntypedef struct\n{\n\tint num;\n\tGNode** heads;\n} Graph;\n\nvoid CreateGraph(Graph* pgraph, int num);\nvoid DestroyGraph(Graph* pgraph);\nvoid AddEdge(Graph* pgraph, int src, int dest);\nint GraphSum(Graph* pgraph, int arr[], int x, int dp[]);\nvoid InitStack(Stack* pstack);\nint IsEmptyStack(Stack* pstack);\nint IsFullStack(Stack* pstack);\nvoid Push(Stack* pstack, Data item);\nData Peek(Stack* pstack);\nData Pop(Stack* pstack);\n\nvoid CreateGraph(Graph* pgraph, int num)\n{\n\tpgraph->num = num;\n\tpgraph->heads = (GNode**)malloc(sizeof(GNode*) * num);\n\tfor (int i = 0; i < num; i++) {\n\t\tpgraph->heads[i] = (GNode*)malloc(sizeof(GNode));\n\t\tpgraph->heads[i]->id = i;\n\t\tpgraph->heads[i]->next = NULL;\n\t}\n}\nvoid DestroyGraph(Graph* pgraph)\n{\n\tfor (int i = 0; i < pgraph->num; i++) {\n\t\tGNode* cur = pgraph->heads[i];\n\t\twhile (cur != NULL) {\n\t\t\tGNode* temp = cur;\n\t\t\tcur = cur->next;\n\t\t\tfree(temp);\n\t\t}\n\t}\n\tfree(pgraph->heads);\n}\nvoid AddEdge(Graph* pgraph, int src, int dest)\n{\n\tGNode* newNode1, * newNode2, * cur;\n\tnewNode1 = (GNode*)malloc(sizeof(GNode));\n\tnewNode1->id = dest;\n\tnewNode1->next = NULL;\n\tcur = pgraph->heads[src];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode1;\n\tnewNode2 = (GNode*)malloc(sizeof(GNode));\n\tnewNode2->id = src;\n\tnewNode2->next = NULL;\n\tcur = pgraph->heads[dest];\n\twhile (cur->next != NULL)\n\t\tcur = cur->next;\n\tcur->next = newNode2;\n}\nint GraphSum(Graph* pgraph, int arr[], int x, int dp[])\n{\n\tif (dp[x] != -1)\n\t\treturn dp[x];\n\tStack stack;\n\tbool* visited = (bool*)malloc(sizeof(bool) * pgraph->num);\n\tfor (int i = 0; i < pgraph->num; i++)\n\t\tvisited[i] = 0;\n\tInitStack(&stack);\n\tPush(&stack, x);\n\twhile (!IsEmptyStack(&stack))\n\t{\n\t\tGNode* cur;\n\t\tint vtx = Peek(&stack);\n\t\tPop(&stack);\n\t\tif (visited[vtx]) continue;\n\t\telse\n\t\t\tvisited[vtx] = true;\n\n\t\tcur = pgraph->heads[vtx]->next;\n\t\twhile (cur != NULL)\n\t\t{\n\t\t\tif (!visited[cur->id])\n\t\t\t\tPush(&stack, cur->id);\n\t\t\tcur = cur->next;\n\t\t}\n\t}\n\n\tint sum = 0;\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tsum = sum + arr[i];\n\t}\n\tfor (int i = 0; i < pgraph->num; i++)\n\t{\n\t\tif (visited[i] != false)\n\t\t\tdp[i] = sum;\n\t}\n\n\treturn sum;\n}\nvoid InitStack(Stack* pstack)\n{\n\tfor (int i = 0; i < 10000; i++) {\n\t\tpstack->items[i] = 0;\n\t}\n\tpstack->top = -1;\n}\nint IsEmptyStack(Stack* pstack)\n{\n\treturn (pstack->top == -1);\n}\nint IsFullStack(Stack* pstack)\n{\n\treturn (pstack->top == (10000 - 1));\n}\nvoid Push(Stack* pstack, Data item)\n{\n\tif (IsFullStack(pstack))\n\t\texit(1);\n\tpstack->items[++(pstack->top)] = item;\n}\nData Peek(Stack* pstack)\n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)];\n}\nData Pop(Stack* pstack)\n{\n\tif (IsEmptyStack(pstack))\n\t\texit(1);\n\treturn pstack->items[(pstack->top)--];\n}\nint main()\n{\n\tint x, y;\n\tscanf("%d", &x);\n\tscanf("%d", &y);\n\tint* p1 = (int*)malloc(sizeof(int) * x);\n\tint* p2 = (int*)malloc(sizeof(int) * y * 2);\n\tfor (int i = 0; i < x; i++)\n\t\tscanf("%d", &p1[i]);\n\tfor (int i = 0; i < 2 * y; i++)\n\t\tscanf("%d", &p2[i]);\n\tGraph graph;\n\tCreateGraph(&graph, x);\n\tfor (int i = 0; i < 2 * y; i++)\n\t{\n\t\tAddEdge(&graph, p2[i], p2[i + 1]);\n\t\ti++;\n\t}\n\n\tint* p3 = (int*)malloc(sizeof(int) * x);\n\tint* dp = (int*)malloc(sizeof(int) * x);\n\tfor (int i = 0; i < x; i++)\n\t\tdp[i] = -1;\n\tfor (int i = 0; i < x; i++)\n\t\tp3[i] = GraphSum(&graph, p1, i, dp);\n\n\tint check = 0;\n\tfor (int i = 0; i < x; i++)\n\t{\n\t\tif (p3[i] != 0)\n\t\t\tcheck = 1;\n\t}\n\tif (check == 0)\n\t\tprintf("POSSIBLE");\n\telse\n\t\tprintf("IMPOSSIBLE");\n\treturn 0;\n}	4	{"err": null, "data": [{"error": 0, "memory": 3489792, "output": null, "result": 4, "signal": 0, "cpu_time": 11, "exit_code": 1, "real_time": 11, "test_case": "1", "output_md5": null}, {"error": 0, "memory": 3977216, "output": null, "result": 0, "signal": 0, "cpu_time": 17, "exit_code": 0, "real_time": 18, "test_case": "2", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 2863104, "output": null, "result": 0, "signal": 0, "cpu_time": 8, "exit_code": 0, "real_time": 8, "test_case": "3", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 4751360, "output": null, "result": 4, "signal": 0, "cpu_time": 31, "exit_code": 1, "real_time": 36, "test_case": "4", "output_md5": null}, {"error": 0, "memory": 2723840, "output": null, "result": 0, "signal": 0, "cpu_time": 3, "exit_code": 0, "real_time": 7, "test_case": "5", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 2592768, "output": null, "result": 0, "signal": 0, "cpu_time": 7, "exit_code": 0, "real_time": 7, "test_case": "6", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3334144, "output": null, "result": 4, "signal": 0, "cpu_time": 9, "exit_code": 1, "real_time": 11, "test_case": "7", "output_md5": null}, {"error": 0, "memory": 2539520, "output": null, "result": 0, "signal": 0, "cpu_time": 0, "exit_code": 0, "real_time": 5, "test_case": "8", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}, {"error": 0, "memory": 3575808, "output": null, "result": 0, "signal": 0, "cpu_time": 13, "exit_code": 0, "real_time": 14, "test_case": "9", "output_md5": "06fa6f806a3b83d883902d3f53b0b942"}]}	C	f	{"time_cost": 31, "memory_cost": 4751360}	2016311522	116.126.252.101
\.


--
-- Data for Name: user; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public."user" (id, password, last_login, username, email, create_time, admin_type, reset_password_token, reset_password_token_expire_time, auth_token, two_factor_auth, tfa_token, open_api, open_api_appkey, is_disabled, problem_permission, session_keys) FROM stdin;
2	pbkdf2_sha256$120000$AsPyyi8S9j4w$zCnLieKVpc8NhkesjUg2BQKFvDe3yv9rcbsGODXX1rE=	2020-12-17 12:02:45.066897+00	장민	guftkcldh@naver.com	2020-12-17 12:02:19.594605+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["zabdbz3i8yp8ol7bx4oawlk57uskcnle"]
22	pbkdf2_sha256$120000$zoN23dYrj3my$qLoBnOBH6D3V5wfxtkBJEvU7TRQf8bIc1wNiQ6iaPvc=	2020-12-31 09:00:01.893769+00	2018311406	ksmin1114@g.skku.edu	2020-12-31 08:59:51.180893+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["h5ic3935strjxww7y7sm428n5rok90sx"]
13	pbkdf2_sha256$120000$r3xcAT0zZJ8d$/mOtwYLh2bINIhmMSPj2jCe3Ty+lZ7VgzPgNbNOeITM=	2021-01-04 13:34:35.478958+00	2017313120	onow7353@gmail.com	2020-12-31 08:39:32.777395+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["kchexmzn7bnzf8yzonrqu5iz604vh2oz", "v4oe7k8hiom8on612nrst3dajc253b2d", "n3cv51flpvzhrbl100e1zrg8cj7w0xo0"]
20	pbkdf2_sha256$120000$VJv8xfpZxxbt$WjqfhAYC7cAU1xbkIKnPiUAgVdmIRZmhbCSgfWIks+Q=	2020-12-31 08:58:33.087458+00	2018312058	kangdyu99@gmail.com	2020-12-31 08:58:27.542393+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["50xx5m1bh55qvam5iaiyr93dnmkupbtp"]
18	pbkdf2_sha256$120000$GK1i30flFfRD$5gp99oHYtPsdS/KMJ3ozQ7xTq6DdJLZwqfZXxLZpsY0=	2020-12-31 08:49:09.529289+00	2016312332	hojoon0205@gmail.com	2020-12-31 08:48:51.971178+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["961yuxp83a33vfckru6s051bhqhazzwg"]
12	pbkdf2_sha256$120000$nIG2Kuockk9c$FWUVeNleybqUE3B1CdO3gpUBHl7WsUX8sFf2RVQamyM=	2021-01-04 10:07:09.857724+00	2016311327	ploteen@g.skku.edu	2020-12-31 08:39:31.59764+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["9v800kp9byhylowlbwfoc28ez2zra52k", "4nk3rvl8rxi0c2fb1lzvirhia3bwtaax"]
4	pbkdf2_sha256$120000$PGXCKYaTTMi2$AcmQy83f6eFVEm9MGHzrHjltlPVBlh5IY+675B60GVQ=	2021-01-06 12:21:29.316746+00	2020311460	wannapaymoney11@gmail.com	2020-12-31 08:23:39.222362+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["vzaviwrx5zqgh07xh0vw4opcot8v0wh8", "jwyknyuhndokmrjdho6b2jg9k2qlgtnc"]
6	pbkdf2_sha256$120000$gthHQhsX3hsK$+omhjgtiH0YS7URO9UW49b+RhLHL9LUVE8vKlDJ3zVk=	2020-12-31 08:33:45.319368+00	cho seong hyeon	sc4259@naver.com	2020-12-31 08:30:30.377418+00	Regular User	\N	\N	\N	f	d83c2cf9fe11d17ec6f92b3ea9412d47	f	\N	f	None	["6zktdl1k875l2popldjuxe4zazerfhmk", "4k1l8ozcq9b35xnw78o106m3v4ze56m9", "irj8y4mg94gtrc4u62dgv0dj0sgautey"]
14	pbkdf2_sha256$120000$2P96cndGIqg2$N7rF/YW+62VeNm4ajLbna+2jSos2tZWidsTA0H2JYmg=	2021-01-03 19:15:51.079431+00	2015313016	ian.lee.dev@gmail.com	2020-12-31 08:42:41.087954+00	Regular User	\N	\N	\N	f	664a1ada4ee183ad9818c5cd57cce1db	f	\N	f	None	["6u8b1ytgtpjfsbaxr4vu8ox070qep8sp", "vrjj0db8i2v50c77bddftgnx71kppp9f"]
9	pbkdf2_sha256$120000$wTxJUhLwvBbL$3Bx/WFbBMyOnOWeVukohAw8OBE9jWs6GPvb/Bfg7afg=	2020-12-31 08:34:59.90837+00	jinsuby	wlstjq0602@naver.com	2020-12-31 08:34:49.898062+00	Regular User	\N	\N	\N	f	b3a320c4f5379be2a8da54427290f0c3	f	\N	f	None	["a0l17gdhwl3pp34vmct9hgqoykykkght"]
7	pbkdf2_sha256$120000$4oUkbyEzqff9$eSe6ZNrI1ChXBhVccVIOJkwWmtmZlSiVSYnf/cw1EJc=	2020-12-31 08:30:44.350074+00	2015318907	uniqueimaginate@gmail.com	2020-12-31 08:30:31.58174+00	Regular User	\N	\N	\N	f	2c59e52c149bef535f6c7e29efc70d32	f	\N	f	None	["s1uvq5ag4a7xgh21dwsprxvc3q8re6vf"]
5	pbkdf2_sha256$120000$33j4ezug3Hha$pRnAZ9CE5porMwxyejEtShrwaPtqSRh7dIC0LT48Xs8=	2020-12-31 08:31:07.824238+00	dalpengx3	dalpengx3@g.skku.edu	2020-12-31 08:29:51.655351+00	Regular User	\N	\N	\N	f	73c0e5940067f6a56833713316a461a1	f	\N	f	None	["p2e4gz7a1uqgqhg2b4uak5hmqg759til"]
3	pbkdf2_sha256$120000$k1k1qihf5hL6$aFGGFd2dZTWDMt7x+xGg65KMfCQ9Whh+YstpO0tYUWc=	2020-12-29 05:51:11.642433+00	test	test@gmail.com	2020-12-29 05:51:03.134788+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["e1ysnkl0fukdljyf2hpjhwmksf9ixkvz"]
10	pbkdf2_sha256$120000$Flcjd0jBYVeO$MuTwi32xatmlL3qedRiXQZI2e4XvG06FB6vUtd5W58E=	2021-01-04 11:46:37.174873+00	2020311119	st42597@gmail.com	2020-12-31 08:34:55.822173+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["5ronyxug4vtn0x3ty946z4rew8ou8cyt", "wpng77p57lmveltjo7l0r5faos86uaee"]
19	pbkdf2_sha256$120000$CiWhp5ZNvAfT$on0FZcKCvuaxJhaFH0cfy0/9Kil+rLk9e/YAVvGme/g=	2021-01-05 14:52:33.274193+00	2016310249	adornt01@naver.com	2020-12-31 08:52:44.480384+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["ex2iv3k49vaedgep7mti6lu329j1grql", "lg4xbyk7bxk6jlrmhc9v1jzfdyggx36m", "ksgbs02nydj7llcu3ftyddy1qv61c5t8", "ipazlfs22y5h8e3hmifvumrx0b2evqyq", "v074gx3dfih6l22d4xincyyuem29uwn5", "0i9n135x90v887mypvgp739rce411qbl", "gc3yevp8foupuzkrrdrx28i07ndry79n", "s7ms6xinohcvm1oxbif8agtnbjc689ik"]
15	pbkdf2_sha256$120000$lw7FjQA5FPGy$w4zd/wzl+kUt7/43r/H4D6g6ui4zXDANvO3dGSS62Xw=	2020-12-31 08:43:24.593823+00	2017311706	vbnmzx1@skku.edu	2020-12-31 08:43:10.953878+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["fzgjv2b1mex7sqkm5q4q54bwf5eaqceo"]
11	pbkdf2_sha256$120000$6LaS2p11v6GC$TWCUw8ZfWgjXOtOB2H9T+sYY2XZQIaNz5hGBDuC0aco=	2021-01-04 01:54:54.604075+00	2017311005	zxc91911003@gmail.com	2020-12-31 08:35:49.795336+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["n8tlrx9jpdwu9qo8dgivi6sht1irv9lu", "bvqj8lnzd8ntmy5r1zcbhjv8klln6dzc"]
16	pbkdf2_sha256$120000$cp80yUUvaJuV$9Od6mdjXropRuugLBnhKIgn0YzRBEdgMgrZlkUb8yTg=	2021-01-05 19:03:12.88787+00	2020314959	jony2000@g.skku.edu	2020-12-31 08:43:47.461022+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["wcv98dk5h4tlyzik67udmtvzkayhxtjh", "yjqg7buoxz28kr9y5sik3usbhrdeh2d7", "704pfgckrqv50q9lopw9enkoa9bfr2u7", "uwpje7d4kvelqjgiz6a3hioji9zmwu0g"]
17	pbkdf2_sha256$120000$MvcKpRz0gozZ$J9VEqs2KtuDTjnw8JrIh/+h39VQGcE/hNv+O78uXjIo=	2021-01-03 15:10:34.245724+00	2019311277	baksa1849@g.skku.edu	2020-12-31 08:44:26.410957+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["vodf0te4eqkdxgirlvd8g9yxdbyk2mlp", "c0mcyel5x2tm3xgwincdn3eirvyq3srn"]
24	pbkdf2_sha256$120000$xpeSsIx8bqHj$dNYiGKkQca4EPctUaU2n8UQowSlqksaC1ujGO/xGIgI=	2020-12-31 09:22:55.019215+00	2017312475	seryeong971120@gmail.com	2020-12-31 09:22:43.747319+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["4gld7rjui77rt88cws0hb9fgnx78t0aa"]
31	pbkdf2_sha256$120000$ElknxpmxVtf9$iJrNUVJYrrct/t8t5fSUIYEeelxeNvaoCcbHVYFKdsM=	2021-01-04 13:06:47.480702+00	2014311827	zxcvbnm096@g.skku.edu	2020-12-31 15:26:11.166427+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["pnros3i0le5mor0b3uee443cyk5ngv4f", "jydgz3xtfvb999tkpr3guzh39kdvd1zy"]
8	pbkdf2_sha256$120000$huJERu82mivj$F4dOj5z+FFMkrHEaxPFKV16z50rX/76KCMx+rsnwMRM=	2021-01-03 16:44:10.035409+00	2019311680	threedalpeng@gmail.com	2020-12-31 08:32:34.317512+00	Regular User	\N	\N	\N	f	eb78f84a265453f760767923bda006c0	f	\N	f	None	["z36etngxwapl59vudfvqc65hlg2f6x04", "bdikpkhzeo18t5a978v9jbrdxy127dsm"]
25	pbkdf2_sha256$120000$teN1NozB3CXI$eGzSU2bjuO0oVbU8JMGGBnhnwHUM11M4SDr3Sbv5fgo=	2020-12-31 09:45:21.400762+00	2020313223	sjk1117@g.skku.edu	2020-12-31 09:45:09.359692+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["rvpbgq3jxhzfs7ljc5cmvu1950kju8mt"]
28	pbkdf2_sha256$120000$WMqy7sKySLEg$XTZlB3RjmDKWDWcwS9IApQ1mmSpbcHv2fHBfkFUsOjM=	2021-01-03 15:10:19.077872+00	2019310631	onsaemiro@g.skku.edu	2020-12-31 10:42:09.695666+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["met6kun7bjas6o309i88cs3812irt2v4", "t5xgqk0dvtyj781dfedho7vt86abzdpy", "mdztr08wyhbo3tfwucwkf1obc0evcyr2", "3qevaxvef367damgdtrh41vzyk4ddt8e"]
27	pbkdf2_sha256$120000$GRyh92fhIHgN$bAkJE8TsGlAqp6kRNuXzINm12tIMYYGqrxiR1y1osFs=	2020-12-31 10:10:22.654504+00	2016312924	brianjune@naver.com	2020-12-31 10:09:53.856497+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["t3o2kqk4qhmyhqw85tbq4eeki2w5x52i"]
29	pbkdf2_sha256$120000$1LxKahqmR6Gj$1grhYdkN0t32yc+Oz8lMUxqWrMYRwMW9Dx0mWq77CB4=	2020-12-31 14:01:55.147175+00	2019312978	2000daehee@naver.com	2020-12-31 14:01:41.229547+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["eos79n1p529hxxyj5lrckphc5wxtmiep"]
30	pbkdf2_sha256$120000$41UqFLYw93F4$W7EzNmiFA7wuQ8uDfiGX8JTHv3s/RYnkvTqhoaGrwJc=	2020-12-31 14:43:42.987868+00	2019313416	alsgh0986@gmail.com	2020-12-31 14:43:33.390679+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["gkzia1n4gvbrnle5fr3yrfw0s36qgigp"]
41	pbkdf2_sha256$120000$H3OqWfbK06bt$0y/KasN+7IOgxtZcJW4BOQymYHSDsXhORX84Qt7LBk0=	2021-01-02 13:27:40.326411+00	2015312805	kjh105702@g.skku.edu	2021-01-02 13:26:59.177449+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["9z1k2kzd1j6lzansuj5c0rvplir7fs25"]
32	pbkdf2_sha256$120000$MwEixzslglYA$6JIItUjLM+dXA/ZF3fWefsEt1f5ppDz8N2wfFdoydsA=	2021-01-04 10:05:32.041146+00	2020312218	ankim0725@gmail.com	2020-12-31 20:35:56.831344+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["ko2mviayby5wtsvz2br0n05guj61g0ra", "afv63nwkzkgjx0pwuntxyncq8xoy836f"]
43	pbkdf2_sha256$120000$4wo8BuNRUaX0$wnQLOlXhEETBtq/2WwicywX+YBAX+WkZoagcAlWyciA=	2021-01-03 10:57:41.752004+00	2017313264	ghdwlsrl3229@naver.com	2021-01-03 10:57:34.66101+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["ezoz77h0uuiixfcq3tv6naur9rwfqdfn"]
33	pbkdf2_sha256$120000$IO62zzAHBHdl$+XdItoqvhuFp+Nj2U7mKcKB+oQyx3kv2AheLW1QCVSI=	2020-12-31 23:59:35.527278+00	2015313375	bestowing02@gmail.com	2020-12-31 23:59:25.298723+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["6wsrbbqb1pb5hc5ke17knd8w0wzlztxd"]
46	pbkdf2_sha256$120000$WJQg4toPyM9i$mXM8yfOARhxMekasr7VsfagzNUz4h8+wkoNHJdqk1F4=	2021-01-03 14:55:56.512957+00	2019312406	kanges802@g.skku.edu	2021-01-03 14:55:48.848381+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["vxamezzkn1e3ve6axgrlcozr4kuzislj"]
53	pbkdf2_sha256$120000$8BFMpOkjw0AN$W8FfazTJg+6EPvZEO7OEXzYcPA+dw31Mkz8wV5L5E4k=	2021-01-05 10:10:46.492249+00	2017314333	yw5269@naver.com	2021-01-03 15:42:33.111493+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["4wjhwp1av754sag209y7l5vu84gngp11", "tdn3le15l2pl61n4edp2bzk6duq6hz53"]
37	pbkdf2_sha256$120000$ENp5ymIszEqU$nFijLkomOp8QJIK771C/v1rsjsq6+SJQ1xX6mD9WXCk=	\N	전대영	jdy2995@naver.com	2021-01-02 08:10:47.333517+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	[]
34	pbkdf2_sha256$120000$Cc5i6tUpwzvX$QLqGqYKbp4mgD+LmRIcn3kFdyQ+SW6FzGvRyUtS9q6s=	2021-01-01 06:41:22.500591+00	장이준	jangij0824@gmail.com	2021-01-01 06:41:10.303985+00	Regular User	\N	\N	\N	f	97a9e662fd66847316e5d64927849ede	f	\N	f	None	["bs2bbhon67knn1gjnn9xs3kihv2ap0aq"]
49	pbkdf2_sha256$120000$MzAgXb7Rggab$zmTTGm44KxlmLzVpIh80d8gL0VwqTp0CRgB1r4kN/Us=	2021-01-03 15:17:08.778655+00	말랑	doorrock@skku.edu	2021-01-03 15:12:25.178728+00	Regular User	d74b20f89b237a815316edf780a71c16	2021-01-03 15:32:54.598828+00	\N	f	d9540f497b1f233f64cf58272095f6c5	f	\N	f	None	["ey768c9qrn4u6zi22v65dwia5io4loxs", "whtpe7pbw1p3giw9kurv0tvwsq7xyfjp"]
35	pbkdf2_sha256$120000$DMRGnyLEnHfw$BBZL+QWybwR1Q/oLgxyU4Dpf7Ui4AUu56KkysqAvMUk=	2021-01-01 06:46:05.515306+00	2019313491	ijun0824@naver.com	2021-01-01 06:45:53.248564+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["o4m0f8m1yw0eoxi5g9qvv5tsfgqck3i8"]
38	pbkdf2_sha256$120000$AWvBtDcOxUjW$0cBxhoKFcvlO5me7+5OEA+rWiSagE+WZ8MgwtVDF1Yw=	2021-01-02 09:05:37.634+00	서경태	tjrudxo0124@naver.com	2021-01-02 09:05:29.41692+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["pu1mekgju6stwy5nlmtspvyf6jhi9x86"]
55	pbkdf2_sha256$120000$PPghxeZwhCRq$KniMbQ7ck0791ux9AWMlxfovSrmyv/i1TjbB0BD9/C8=	2021-01-04 06:11:36.995336+00	18seongyun	mader0708@gmail.com	2021-01-03 16:50:37.970533+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["bbi5aai8i2zy549xfpd3q7fpdiee7m81", "yw7bs215dlhwh33q2bnxej61p9y0qcqa"]
40	pbkdf2_sha256$120000$N3fQEhNHVkRf$9DHa5n/eO9cTT4APVsyhIv/t62d4eb+zdymedanv1jk=	2021-01-03 05:46:41.962505+00	2019314992	1dotolee@gmail.com	2021-01-02 12:46:23.71419+00	Regular User	\N	\N	\N	f	bacfc14fbdda304ecd025bea9bfcb485	f	\N	f	None	["ehm5kqr1c4kh8h9g8iihxkvtak94efsw", "z498igrtj2rwts69ib8mypid7epn4ky2"]
39	pbkdf2_sha256$120000$mNy6LxWi4XdC$u6ilVfDp0Vzn2x9pb+vBrzuGbEWPkrpZwv6kblAoUaA=	2021-01-04 10:25:01.180701+00	2019312342	leees2000@gmail.com	2021-01-02 12:06:18.878116+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["p3ynyoionwb7sb7iyvsqk6jhhu35egj8", "3b31wtj0hywnw7tkoolxzzswdomgn837"]
36	pbkdf2_sha256$120000$tXnyPRzkH5BS$PxESQ5C+aeOF8UUQw6JRDwI8C6Yu29RFHpxncwc8iuc=	2021-01-06 01:58:47.754458+00	2017313109	dlwnsxo98@naver.com	2021-01-01 18:00:14.863724+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["xcoljbir9836gbjpdvwduirkz9x2mclq", "7q9ldgwt9wxlaiq6rmvdq32j81lfq8py", "2btqzhpvohnvu0hflyw43pn8i4gljs1k"]
44	pbkdf2_sha256$120000$p6d2V2lDsehb$B+125kSxd92k4lacj1iVySe+tg8HKFV5t4zVfnaBS54=	2021-01-03 12:21:56.072731+00	2018314257	seungjun1614@gmail.com	2021-01-03 12:21:39.44363+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["0fqkr3h5aqudh7nwaf56nlu4p0n68yrq"]
42	pbkdf2_sha256$120000$73ZQf5W2Ttqk$YRaq8qwxqgEBxqJuLwD4CROhYi0q/Iy1M1N4Ba2Fe9E=	2021-01-03 09:39:57.239703+00	2019311430	sonho00@naver.com	2021-01-03 09:39:43.90757+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["p1zbw0ybink2ho6lpuvsmw1ux09y11id"]
54	pbkdf2_sha256$120000$lcrNamQ6zX8X$vvWs8Y/v3bQeGhJpLfH0rAKeOwB4BCg4XPNDh4OrzOw=	2021-01-03 15:53:37.023748+00	2017314656	sujae9704@gmail.com	2021-01-03 15:53:31.723136+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["pdh3n2c55du9i1u4z2rq4brxyw0k41rd"]
47	pbkdf2_sha256$120000$hXYFWRcNXwaS$LzkNDbGc15iTgY68fYJ8Pzv2T1d6wor7LBgKqjgF4DQ=	2021-01-04 01:22:08.734846+00	2020312552	kms78900@naver.com	2021-01-03 15:08:45.703795+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["5ie4mbp0oh36tly7bvzge8qbzmlnwtrd", "9k68yzgmyeotmmc6g7jc6i6prsjtoylo"]
45	pbkdf2_sha256$120000$h1LPRh4Ix3qq$OpSo87sf9IQJf5WoG4iUq87SAliGBziZIW9fONyjAno=	2021-01-03 13:13:27.28557+00	2020311715	dy9948@g.skku.edu	2021-01-03 13:13:15.327353+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["163r89eckxfmorzmqstptjz3t03gteht"]
51	pbkdf2_sha256$120000$NarUwNXRi4Z1$Is5NQIrFQ13kdtQQ1ZGuCrVqqVvSaPt0zXOz5hJT++0=	2021-01-03 15:22:26.001622+00	musogi	cneyang@g.skku.edu	2021-01-03 15:22:15.472048+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["2mn4qq5hjnt5tt48ssx1h6a0u6pa2u5b"]
52	pbkdf2_sha256$120000$rNwvoxrwuHoh$uVwDJPD2NCdN7acMMpem3Q3vsw0HfiF975HLn4KabfM=	2021-01-03 15:45:11.654268+00	2018310766	cathy0313@g.skku.edu	2021-01-03 15:38:31.273719+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["7f58dugq2v6k8kot8i1xha8bgyq4jcgb", "c9ho4l05qigamt2copzd66hpclp8gvq3"]
50	pbkdf2_sha256$120000$cyHRGjsjawA2$iLIqdF5uTdVDDrdlA2pCP3mSpv6DPogPw4fk0Y4XeYA=	2021-01-03 15:14:48.34866+00	2017312781	dnjsah1230@g.skku.edu	2021-01-03 15:14:42.069872+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["teqb9zz7vvlf1fjjcf4mijr8jcq715to"]
56	pbkdf2_sha256$120000$LfeeUFowZoKi$hoaxP4FAM0EmTHuyd6F0nF4ZqArCkhHAR9U/faYTIhE=	2021-01-03 18:36:18.456271+00	2020310646	hoya4139@naver.com	2021-01-03 18:36:01.848802+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["3c1xls8kd2c0bcnn2rlvxj6s4imvoqna"]
57	pbkdf2_sha256$120000$NPtaA6gxBltx$yBuO+k+QeGhvBvfv96+UvwDzXOMkBX9eXySxf9R648Q=	2021-01-03 20:03:15.653534+00	2011314262	xero0001@naver.com	2021-01-03 19:23:08.166929+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["fsgtml06z618h4z0j0yfoqyhedpcyim9", "f7hhlzcxtn3ahee701ey91tyiac30qpe"]
58	pbkdf2_sha256$120000$UlBuorPlioeP$vPSWUIqAN1ygWMNWfRmxzeL1kepWwwfABBkNh7hlrC4=	2021-01-04 01:23:04.982968+00	2018312327	cnsanet@gmail.com	2021-01-04 01:22:40.723192+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["89loaweez9s4sotqu4lei4aper4j7ysp"]
59	pbkdf2_sha256$120000$wbiTERl2u13h$Cw/GHifv2jSKLnTHs3lcafIfYMEsCSYFk9KN9dlsBeQ=	2021-01-04 01:24:13.124706+00	2015310874	kangwogus3@gmail.com	2021-01-04 01:24:02.968913+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["h4p3hqrepji7t5w0zajcmclo97nue2j0"]
48	pbkdf2_sha256$120000$tdPeFdyRaSFV$l8xU+12k1PmGKhGX3XlFefv87FrEP6W8H1CSjpccoNE=	2021-01-04 05:45:40.095203+00	2017314875	yyj10137@skku.edu	2021-01-03 15:09:02.72492+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["x56qdtgm4nhw0iaqvf7eyq7eg9gxu4t6", "7j4jtyfphku597a5dkf1bu0gjnsvop14"]
60	pbkdf2_sha256$120000$EvGOdzgoLb9F$cTOf8oU5KSRJ4PSiyfIzZyxYvuactsJzmUsijhwm/U4=	2021-01-04 01:26:16.84254+00	2020313895	nhjbest22@g.skku.edu	2021-01-04 01:26:00.2461+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["sw30tqnp3x32jqhft8ac8xsun6s9grl6"]
61	pbkdf2_sha256$120000$gZqsWfbqqNOl$l3vqeGuqa7qqsT4T+SnIpG7IZubeJMsKXXl5R3Myptk=	2021-01-04 01:40:54.452802+00	lieun123	lieun123@naver.com	2021-01-04 01:40:49.205334+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["3sde3rxr85qqisa069ud9zd03rblwszn"]
68	pbkdf2_sha256$120000$eaMb0RXgk7pU$+zTe4rUozLrh13Vjg7tBCZ/jWS38s2kODBmltMdDVq4=	2021-01-04 04:03:53.625877+00	2018312723	ansol6130@naver.com	2021-01-04 04:03:06.173881+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["xjzqcafxdatp02steorbiyqcnt8car9r"]
62	pbkdf2_sha256$120000$rJDdxdyeUx5X$V7pC3GDucQtytbQXDQELR6Nw6IcwlYEmy2fEUFSMXYg=	2021-01-04 01:51:11.525066+00	2019314665	sustkadl@g.skku.edu	2021-01-04 01:51:01.994676+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["curw5ndguemd25m53jhswhfoir3rcnxd"]
75	pbkdf2_sha256$120000$N9CB8fImCGco$wYya4WdXxbSDcRo5E9YLWhBESszTrXzpLHiGY8SH/1Q=	2021-01-04 05:42:44.252134+00	정민재	wjdalswo0312@naver.com	2021-01-04 05:41:47.74462+00	Regular User	\N	\N	\N	f	c423592570101ff78b88094f377ea502	f	\N	f	None	["9wyuxrakgpr94019oyatg142qh0ieloe"]
63	pbkdf2_sha256$120000$CAydRCX7oUJq$75He30eEu0id5nuBWOmOX7dSfFNLKwlu0so2dVufx7A=	2021-01-04 01:52:21.943176+00	2014311686	lieun123@skku.edu	2021-01-04 01:52:17.187224+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["bc6anf1cy1d56jg9jy5drhherblpa0ah"]
73	pbkdf2_sha256$120000$QQqlY1VJjzJx$JDE3FRoGpCfW5A8ZMGD0UlHfVpkBUKsQFJPceTz3P7E=	2021-01-04 05:17:41.071336+00	2020312990	syh754200@g.skku.edu	2021-01-04 05:17:31.063297+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["279ouqavnx7rj9nf25r6urlxue27cafe"]
69	pbkdf2_sha256$120000$CSpI3EFkSiiV$8tGjllC1SRNyBa82dpIA1dBOT7L0Z/lDtWHrqotozbQ=	2021-01-04 12:30:44.311301+00	2018314788	deuslovelt3@gmail.com	2021-01-04 04:07:04.819575+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["5nbbk793i0fibh40r52n1sy006ziz59z", "lctx4twcxz2tynflfziott1zzzzcjijx"]
64	pbkdf2_sha256$120000$IrYsN5RnspCJ$wx01j2bQ3GGspqKB8rAMhdsWWMiAQnFEhW822v+KFZU=	2021-01-04 01:58:15.341096+00	2017314804	steve305@naver.com	2021-01-04 01:58:06.5996+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["mygifx1edgvzemdxiqfr6w1cvqqd388l"]
83	pbkdf2_sha256$120000$qKsKo3At19LB$NtKq48XcXVlcWilQ9r8mtxu9ydOVIBkVUYGuhvPkJJs=	2021-01-04 09:00:46.137316+00	2016314633	dlqudgus2587@gmail.com	2021-01-04 09:00:40.330889+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["65hfxdd6ktr1r3fj04bdf0xs7o6k99p2"]
65	pbkdf2_sha256$120000$rGnD36GAs9nf$c7tyYcv4oU+/0/I3sWO8EVs7bFQ1Vpq6cTt9jLeV0N4=	2021-01-04 02:21:03.304078+00	2020711601	scvhero9607@gmail.com	2021-01-04 02:20:51.169863+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["kt6mvkih723v4yp03v7y0tb8ownplh3u"]
74	pbkdf2_sha256$120000$goNEE2e24Qtd$un6uRSkKbcxiiWI12hnk/FpwCmKKbVtJO8nOb4c15eI=	2021-01-04 05:32:00.235973+00	2015310543	calvin0420@g.skku.edu	2021-01-04 05:31:58.05348+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["rq05w3u1oxsgu4fbe17lg72hxypef9zs"]
66	pbkdf2_sha256$120000$006kHYdF0ZId$eJxvY9LzUa2R6IVQ/X216t9Ltz2Pj1qJEGuaDGNMrPc=	2021-01-04 02:23:21.674602+00	2019314907	dldpfla1024@naver.com	2021-01-04 02:23:08.387367+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["24dxfsk9r7t95x2mr2iuxd13pse26xsd"]
78	pbkdf2_sha256$120000$azXncTXXkEZN$W4zMx0Q3z+fxviu7KEXALzgblosLQENwHhTe3wZTYZ8=	2021-01-04 07:48:53.293781+00	2016312429	max804@g.skku.edu	2021-01-04 07:48:45.644673+00	Regular User	\N	\N	\N	f	e06d5e87ced1bdeb388702b9d3fd7486	f	\N	f	None	["r43tysc7wmo36bzqfajc2hzxcaw6vaso"]
67	pbkdf2_sha256$120000$iUBKZTxCLIeq$fSi2MSWKqE+wKqObLGav/PDqOD/N+YvFX/QrNZ0/CuI=	2021-01-04 02:39:01.690959+00	2020710560	ls4154.lee@gmail.com	2021-01-04 02:38:51.044391+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["l9gi5fksh7o5plokvsyoz508xqs9oaeh"]
70	pbkdf2_sha256$120000$DOjzdIzMIzQZ$6Dk4r6NnyKpkTpfco2QJ3kXce8e8GCRev3erJLg97Os=	2021-01-04 04:14:35.379257+00	2019711486	crow6316@gmail.com	2021-01-04 04:14:27.755522+00	Regular User	\N	\N	\N	f	94d8988b47dbf83156b6b51be2d7e40a	f	\N	f	None	["7v9yj6l3uhxtl1lzw5hix8eyacz08uzz"]
76	pbkdf2_sha256$120000$MXiboaMifU8s$Pha7dwV3W0TVGw6uv2E59riCCkw7TWTRb2lzobeJ63I=	2021-01-05 11:12:47.405373+00	2020312429	hn0312@g.skku.edu	2021-01-04 05:43:54.636569+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["y55vbbn4luyfkimnsup53glx8xta09nh", "2ydab53yrqzsdy8m390620oxwtonbe1o"]
71	pbkdf2_sha256$120000$EOSEnwP6hYB5$qrQUFgMUXGIlNET1yjWJ/0/33P9cYbBpKqlyoTsfgWs=	2021-01-04 11:18:14.691015+00	2015310673	kimhojun222@naver.com	2021-01-04 04:40:12.394395+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["u91setqmmqf2j6omcg1d9pb63sjhh5le", "g2078ddybmcoet0d8esisxvird1jebsq"]
82	pbkdf2_sha256$120000$9Om3olQG2EpU$nXZya+JAtP3dZSFBEEbhgDsMwi/KTx9YtTbVmNZaEPM=	2021-01-04 08:31:29.832002+00	2020312657	hdh12345@g.skku.edu	2021-01-04 08:31:16.266188+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["eddmid6e5ocmfqmaletv4jf9gw5iotcr"]
79	pbkdf2_sha256$120000$uS7a0XDYet8V$YdsKw9vFk4h5XunfX9xwSTr4BnEar2tBjfhHp11MvKs=	2021-01-05 12:53:34.865015+00	2017312222	cyw7515@naver.com	2021-01-04 08:05:41.661968+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["a538gbib16i57m56ohy3u6umklix4jpv", "su8exxvb82qct4z0pclivzfjj6flkw9r"]
77	pbkdf2_sha256$120000$JURFbqPw5n1a$BG6L2gXz/VLuNfCuTx35htfwqcOZE+zJ00ZFV5YS5pg=	2021-01-04 07:27:29.31319+00	xorms987	taegeun@skku.edu	2021-01-04 07:26:51.703097+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["5d4eznefc5lntftbd8umlsyawc21fal5"]
23	pbkdf2_sha256$120000$iM0INljabZmW$PzgeN26NgAfmdeTzJbb3IaLek9fPs4qDoiLlVMFGdpE=	2021-01-04 08:07:14.745552+00	2016312057	timeslump@naver.com	2020-12-31 09:11:43.269521+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["2xxictyn39hyl2co0g89cbu42e71ggfx", "6g694li1v1piwjgai8znxvaoigzuvq46", "3v5blxadafn1zux8mrwgxx6xkq5oq74p"]
81	pbkdf2_sha256$120000$vWRjAorV2CAF$DtpecbyO203KQjmfNMYheUgTf/90/ZY3uSw5pAvli0M=	2021-01-04 08:19:27.071591+00	khe49260	khe49260@naver.com	2021-01-04 08:19:18.341743+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["06u5ip1o4dpolpe88vdq8bvul1ynh81w"]
80	pbkdf2_sha256$120000$bVyNQqrkLe14$qC5Ap+jbWTQJsjFrdFcsuS7LhIetCoy1jR9WHATBJf8=	2021-01-04 08:30:03.752281+00	hdh12345	ghdehdgml12345@naver.com	2021-01-04 08:12:50.663296+00	Regular User	\N	\N	\N	f	fbc9f5f4ec33d27c181866b2f9634f1c	f	\N	f	None	["9lsryg3ocsxh2wfj8i49xugbtktw56ox", "csx7awfw3eset6ajy0xd9xu301pzhgfv"]
84	pbkdf2_sha256$120000$cbVahh1BeJVN$+1hInXrIkifdHoeFV+km77CxjIvcHs90ZahcaQGIvV0=	2021-01-04 09:11:10.468485+00	soysauce	soysauce@skku.ac.kr	2021-01-04 09:11:03.985989+00	Regular User	\N	\N	\N	f	1f88c31d88755c435004b057d1107fc3	f	\N	f	None	["7xx2pv6p1tnbnrli5t8g580j1h3t31tf"]
72	pbkdf2_sha256$120000$9dBkErx2QZpW$Zl6gIXXwnwi5UFzQ4jzSoz2TH7AHu6Yc2TjF38OtvPk=	2021-01-04 04:55:06.320217+00	9967han	9967han@naver.com	2021-01-04 04:55:00.79813+00	Regular User	\N	\N	\N	f	99833ad9d76e394d24ab9f96d3f41d8c	f	\N	f	None	["rbub4if8a1jwvkzcexg52sy8saqah0l9"]
85	pbkdf2_sha256$120000$zj7qEsB2n0Jx$+RyeIB8QJTjspZzLM5dtgNb4RFis4mFnL3l4et8SSOQ=	2021-01-04 09:27:16.061677+00	2019312316	rjsdn1120@gmail.com	2021-01-04 09:27:10.901396+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["zcfpnu8git666tvkfvvl74diznx3dtur"]
87	pbkdf2_sha256$120000$tUqF5NMWyfFS$lJhn/lvkJkohDJmX7Wbqe6Hgmg8DItH1v5r9h608t70=	2021-01-05 01:14:22.817228+00	2020314086	aplus5040@gmail.com	2021-01-04 09:52:44.588338+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["pmow6nrbirq0hcmsuuw4n4ckdf5oyd8z", "mqaueouebbegox5dqqucin9up0cfk0jr", "48j4vsz6dytht55fveala5y771df4jnr"]
86	pbkdf2_sha256$120000$lMZayf4UyxzD$xQWRhyPZmzEIqOGpF+2pCuytizLqpZaWRVRCuvrz0zI=	\N	송영재	thddudwo1313@gmail.com	2021-01-04 09:51:31.57812+00	Regular User	e06d96fa312478a0e630b63dcc5b89f5	2021-01-04 10:12:56.179674+00	\N	f	\N	f	\N	f	None	[]
144	pbkdf2_sha256$120000$MTLP39RPTNzK$Px4d8Yh71oMthQ416fxob76Zkqn0Z22PCcLRYLvkiP4=	2021-01-05 14:56:31.497234+00	2015311137	rosicky7@g.skku.edu	2021-01-05 14:56:13.317795+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["75was51agadj7u3ya0i58wah0rwkwrcl"]
95	pbkdf2_sha256$120000$gFwoU4PxIXnj$APIj7Fcv4pC6iwD9QrOWkeYIgNDJ3OlrJ/HJ1yEdASk=	2021-01-04 10:49:25.472047+00	2018313091	ekdud7649@naver.com	2021-01-04 10:48:20.614997+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["i8uqighz42a8xsgibuk7u5suoa43wmk5", "1x1y93g0znfckl6vrytg2quyaxyc5mgg"]
88	pbkdf2_sha256$120000$35S0gRVdz1XA$my+QzByBIc8qRljtZwcp5Z0+72jvPxiVSGpOd/N5g5E=	2021-01-04 09:57:12.418518+00	2015312922	yuong13@naver.com	2021-01-04 09:55:25.980379+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["xxe6ngzuu16gjygxmd850oakogxalmt2", "j4semygcxle3nmk1r87247hx4ewxppmn"]
96	pbkdf2_sha256$120000$l4PSucZfxmZW$JbFofaYmndfWbb4iCaLgJ2KZFHr4EY2x2dwMAgYBlc4=	\N	2013321422	gusgh1926@naver.com	2021-01-04 10:50:05.858262+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	[]
89	pbkdf2_sha256$120000$YP5zsImttyc6$GweaKdLhktgGJnMYs+pugNoHPmyR+j/AvRx2QvqTjGA=	2021-01-04 10:00:50.306178+00	2020314257	nan5175@naver.com	2021-01-04 10:00:28.416937+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["xlzipxotqf1x2f81ta5fdp238ott157p"]
106	pbkdf2_sha256$120000$bzkPNUoJyRtW$kr0xXAI9W4eij37dfSM/53qVVmNfb4EpNTwl2U02r9E=	2021-01-04 12:12:31.041396+00	2020312676	cofls525w@naver.com	2021-01-04 12:11:03.390449+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["mtlweue4008bcpzswfsdmlssrm21087x", "dmmkqzlipjd2ky9a373tiezslvlfua2a", "13ss3u9q96rdd2zu9n8aor8zz22q13fz"]
90	pbkdf2_sha256$120000$fmjqOJtiBiNF$QzYlnWM5MucKCLzfK4S9HdsjyJl54kkzeZhoF5BBYnU=	2021-01-04 10:03:55.396626+00	2014310464	chltkrhk@g.skku.edu	2021-01-04 10:03:45.122478+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["rftc6i8jqcz1eelfu845e2xgtjsvsk8f"]
103	pbkdf2_sha256$120000$CXrrSA8lDIwD$qscK6TmY8sOQoxVLhBramWnzC9NW3n0WTAgKUeteiaE=	2021-01-04 11:47:06.198873+00	2017314205	junny980106@gmail.com	2021-01-04 11:47:00.210981+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["hlw9p0l1bivvsakcw4ha70htwfkqai6v"]
97	pbkdf2_sha256$120000$u6mgwtjj9SjN$/E/wkE1jgwpaw7WaigOi8I0UGGoi8rUlYOX9vNZM3kA=	2021-01-04 10:52:01.527667+00	2013314222	gusgh1926@gmail.com	2021-01-04 10:51:55.467306+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["32imxz3d0wnz98xke5rblf1crfbx7eqs"]
91	pbkdf2_sha256$120000$XOtIHDIn0CYs$jcfjk3aWVv4fa1LQVZHqbsz4TpBnAyS/j8/i13k87pU=	2021-01-04 10:07:34.719778+00	2019311521	dbwlspdlqj@naver.com	2021-01-04 10:07:20.964394+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["ke4l24y48o3hqu7vngl9x3cp7qrb1t6k"]
92	pbkdf2_sha256$120000$ZgHGDs8vyIEO$YXg4Rgyz6mYpaNg4xRuqunjkWoyikTEtEjzxVKkjThM=	2021-01-04 10:09:50.157291+00	2016314598	o5046821854@gmail.com	2021-01-04 10:09:44.308562+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["k1axlqv6oc7bvfahvbv4dyes2kqs2nv5"]
99	pbkdf2_sha256$120000$qkaawEXTJylb$POgKXiEskwIr5EFlt4EYgpEDN8C9QxL27irwunShuxs=	2021-01-05 11:55:22.418951+00	2016311522	djrjs47@skku.edu	2021-01-04 10:53:01.009486+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["2yl12no26qq6so4uth6e76l3nsffh27o", "l3tk3rr86e6pj5j5hrr7vqnrzr862v6k"]
104	pbkdf2_sha256$120000$VapKDfh6gIpQ$bV+/gWDcD1kD0Vhfc3MEjrPJKkI6EEJd7G8oYvB2EQo=	2021-01-05 00:43:32.32471+00	2016313857	gmlrhks95@gmail.com	2021-01-04 11:54:23.972093+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["ib4l2rjtu56kbrntsffyi0ofkglue455", "ujjd459dmzfjqegkygt5ccdv5dmtl8h7"]
98	pbkdf2_sha256$120000$IRdIFeGMZY4y$d0Oq8axS3k95UjQyy29v88wNiWR6PE94B2DLw1kDDcg=	2021-01-04 10:53:13.84647+00	2017312681	uvzone@naver.com	2021-01-04 10:52:57.351082+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["6kftw0nquoj0awo50e9vfft0ykd3wwpk"]
94	pbkdf2_sha256$120000$Zbk0LvHLbA9a$WVv1fMlhrVEYfNzQutPdVms6yYiLjJJBLQKVxdG7Fi8=	2021-01-04 10:23:20.456804+00	2019313086	minhwaoh49@naver.com	2021-01-04 10:23:07.051542+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["ejuuol2njei8mv6n95bc85x4rknockt8"]
93	pbkdf2_sha256$120000$1vXKOJBKHXBv$UZhTl4FtuNYeSAm1NDHKAmW/q6fF6O9PJBccZPzsBmI=	2021-01-04 10:47:30.10321+00	이지연	dmsdus0612@naver.com	2021-01-04 10:15:50.280469+00	Regular User	\N	\N	\N	f	5b9e7e81382c666e874cdcd60378b94d	f	\N	f	None	["sxlsth7g3h7zz3e9hvprh05q85h7mr81", "pvj9lcxgbuln3b4psykae13iolejip7w"]
112	pbkdf2_sha256$120000$W04hiFp5Av0v$+nLvr+jhOmyPHAzcGO+AlvezXPLvefNsbgTU6M4cc+4=	2021-01-04 13:31:01.729374+00	2020313744	tim3018@naver.com	2021-01-04 13:30:54.072331+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["8mw9ojk106dqwt2ohix77lykemogz754"]
100	pbkdf2_sha256$120000$2jrZubVJ571J$58s4ery5asXTNdxYKD/TC9mFJMttiGqDu9ElIedxqpI=	2021-01-04 11:16:57.978745+00	2020314863	tt64@naver.com	2021-01-04 11:16:45.768093+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["4egmbm7p3ls2sjfr3o26kdjufyfbok0g"]
107	pbkdf2_sha256$120000$gmsaVgD2F0lO$UzZhWNzEnsPYL4BB/mUFUeF32U308ZeGTb7OppacTSI=	2021-01-04 12:16:14.538408+00	2020311650	yjh8158b@naver.com	2021-01-04 12:16:08.00437+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["p6ugcseun4hgcuajus3pi1ptxxr70q5w"]
105	pbkdf2_sha256$120000$Yd9ZJPL8RWeW$HNc2+1UcaR2GVboVBcFOIiZb9FlWLbrOyVej8vz1qIM=	2021-01-04 12:03:24.884466+00	2018311929	skydnk4332@g.skku.edu	2021-01-04 12:03:14.846018+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["5loa0os7kpsd2jxp8zrp5vzgk6lrgirb"]
101	pbkdf2_sha256$120000$Rbsij3YkvU4e$TyHtmTdnGK2n8zdMlMo0XLfHuPoln6kCpP1fplQ+5Gg=	2021-01-04 11:28:08.833672+00	2019312962	nfs2016@naver.com	2021-01-04 11:27:49.006465+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["xu0j91cqbkhfxoj11dn35zjmzjheph6a"]
102	pbkdf2_sha256$120000$ohk0Fg6Wqhye$wF4hWExd1QLK4Az9rMErutXFRgPmxIOJTelv5nC2kCg=	\N	박성준	tank7113@naver.com	2021-01-04 11:43:40.405593+00	Regular User	957b01f2bae08d862f74b2bc132f38bf	2021-01-04 12:04:32.273661+00	\N	f	\N	f	\N	f	None	[]
109	pbkdf2_sha256$120000$DNBypBqLOeD2$UuqcPP7eeh9OWVGUfcUVPPEYy22bjkvuwrrxWI9tL6E=	2021-01-04 12:23:17.748854+00	2015313348	joqjoq96@naver.com	2021-01-04 12:23:05.754866+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["dra9y2kn6008i61rhbvhz7o98v0ftvkn"]
108	pbkdf2_sha256$120000$BHPWBLHnrx7I$u54/54Lob1e6F77ns3efgW1sR0ENy0k6hZuzs7maBbc=	2021-01-04 12:18:21.332602+00	2019311546	yongw00k@g.skku.edu	2021-01-04 12:17:45.021989+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["0ql6awotkn2xpcp5y70otpy105ojmu0e"]
111	pbkdf2_sha256$120000$eoH8uuCfkbiT$hIdGAbXgbDLoIkjPs+LpKv/g6eH1lMcmEbg3y6ynAdw=	2021-01-04 12:47:22.059023+00	2015313992	gcnml10@g.skku.edu	2021-01-04 12:47:13.589621+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["t4r5pz7qpxewy2m5yc0zgyjx75waa1bc"]
110	pbkdf2_sha256$120000$Ue3D6zhq3eR3$Uwlxnsbyikr8mEAHGClf+vBAExoJoIwIdSoVjjqMcEc=	2021-01-04 12:36:11.461394+00	2018311939	soysauce@g.skku.edu	2021-01-04 12:36:02.175934+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["fo4m0anw6nmwwgvb3hww6x6siitk5r6k"]
113	pbkdf2_sha256$120000$SZqm3GtC6czt$VyuRch/6kfGi7onCTBM30UADAFYmTz+xjZmA1lxFWXE=	2021-01-04 13:33:26.959402+00	2016312810	eaa0305@naver.com	2021-01-04 13:33:12.548621+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["i7goct4smpq9yumom1h169j98v8jg3vy"]
114	pbkdf2_sha256$120000$vu0TaP4UXAbs$ezRRx3spDJqzM8CX/GjLzwlV9kJ87NxOQPSAaigAR+4=	2021-01-04 14:23:25.974235+00	김규진	sidearm46@naver.com	2021-01-04 14:19:40.875002+00	Regular User	\N	\N	\N	f	e2c8721fd567264e917e74fe4fb4b345	f	\N	f	None	["qy3vp4uoi6t36kdlvb7nauqway6p83s0", "s24lu83ayno2oidcnx4e7bhn3v5mpgzm"]
115	pbkdf2_sha256$120000$Y5JFwLANfkT9$3a7bP4zw9JgMrfeOjZPyAA54Hs8ntXL/mJ9z5J+sPV4=	2021-01-04 14:24:41.164412+00	2020311689	jfkimjfkim@gmail.com	2021-01-04 14:24:31.502598+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["odbdv9k1n64vynut9276to5cbnfv7w5c"]
116	pbkdf2_sha256$120000$zXwtccQvDkCt$BO9/7RQmZ2plSw2AgnkjKOyjjkkxFf/Sj48Xq3BfbsY=	2021-01-04 14:42:39.469609+00	katejo2000	katejo2000@gmail.com	2021-01-04 14:42:26.930643+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["msoewza5di1a0ckwyi72xn9qttanyfgf"]
145	pbkdf2_sha256$120000$ciWVf2mSqW07$2P6cVlSxcYjSFKacjR4Bb9RLUKSFBS8eOgnD42KI/2o=	2021-01-05 15:29:38.938047+00	2015314758	hotgake@gmail.com	2021-01-05 15:29:30.70192+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["by5g184vh6zt6q71wzux7aiz91t3ukr8"]
131	pbkdf2_sha256$120000$iVRiUKm16G1y$1k9zvcUe+1ySncYpm+78UYVCY+cqbGqeE6d8qqfuxac=	2021-01-05 06:23:20.06095+00	2020310135	bagger3025@g.skku.edu	2021-01-05 06:22:16.609574+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["lf1gvoji0xvyo1iw1ajm2pp7u5phxa84"]
135	pbkdf2_sha256$120000$aysSfkqzdXKt$t2nxzrAr93QN90P1iM+RG2bs540n2v9ck7VBFlwq0Rs=	2021-01-05 08:38:17.696664+00	zarami1214	zarami12140@naver.com	2021-01-05 08:34:02.674516+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["haabd3am070f8aa5d4t0qfsf7cwrob4u"]
21	pbkdf2_sha256$120000$32kQ9EzmTYpR$lsVGLSMjlJs00F/DFttlKwR3MTyfX3mXQ8qRYZwh0eg=	2021-01-04 05:40:39.558852+00	2020310781	fkddl1436@naver.com	2020-12-31 08:58:49.093816+00	Regular User	\N	\N	\N	f	be2d2fd927fe9c3b7a32984e265424d3	f	\N	f	None	["2erj6u6l6lnb4uokoc3smhg6dgdndjx9", "p70p5qyomkt2we674s8fto3cl36zcmbv"]
124	pbkdf2_sha256$120000$oPrvuR4oqU92$tA693Lwrkn5sdIQ7MeOU+yNkQ445LJsu5Lg1DlK7c8U=	2021-01-05 01:19:14.143116+00	2018311292	pidaoh@g.skku.edu	2021-01-05 01:19:08.942985+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["wufu65p1ttigj6g2t9gp3a53gug3f8pl"]
117	pbkdf2_sha256$120000$X8aHUPKMJKYQ$fslmEzIFFGhKOFhjs23SL/fVVZGQPGd/QPbq/y7lGtE=	2021-01-04 15:26:13.469918+00	2019311602	katejo2000@naver.com	2021-01-04 14:44:45.007665+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["80a6dup29e8ppe2529ka4xgnvy7u368b", "c4n6s0cbv7vxdbhb0r60m382ebj8c1st", "aw9xjjpn6qn8as56i51cepa487x7k0f5"]
121	pbkdf2_sha256$120000$rPxRjOB9LDUq$T6DfwKlEsbg+3Ic0676l1IEy45dgFXaL/QMa+VJeBRY=	2021-01-04 23:38:37.46996+00	2020312731	jasm32@naver.com	2021-01-04 23:33:51.783136+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["g4mrw157a5jz9h22qwer3n21qgry06ne", "q9ad1qhfjenj8w7swlccqwnxnsyix0vg"]
129	pbkdf2_sha256$120000$EsOaODPLave7$O1H0IxzA4JsbXsjX8+N88J2aYRu8+gzx/aU4S5/eW/o=	2021-01-05 04:23:49.485137+00	2020312542	suelim@g.skku.edu	2021-01-05 04:23:40.525205+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["3cy6qrqdc333ig7pg7drfrppfh8f67il"]
119	pbkdf2_sha256$120000$WtiCACqM6xHl$31N4NVXi/8rVz5CYVZ6jAkWHG1YaREinG/5FNwJyhWU=	2021-01-04 15:54:40.471644+00	2019312807	swjhjs2@gmail.com	2021-01-04 15:54:34.880005+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["k67wc5yo2wh6slrtvhvh2i0g6u4iyrli"]
118	pbkdf2_sha256$120000$OFr29gyY60Hm$8D26EaU8UQtSS4k+toL2XRo7JHWa3D7jDiKxccE3s3o=	2021-01-04 15:29:31.224234+00	2019310444	1116khw@gmail.com	2021-01-04 15:28:50.938777+00	Regular User	\N	\N	\N	f	b77c1190e00256b26fad0504c0ad78dd	f	\N	f	None	["ksm0r7d5dx3qkczzss67qcspq6azqpqb"]
134	pbkdf2_sha256$120000$lEnOgukchPb0$9tlL1SOz1qfk5B224KNKEoxC0wDoY3JJwtnkn0uNtuY=	2021-01-05 08:25:22.933138+00	2020312240	tessa1234@naver.com	2021-01-05 08:25:08.722424+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["tmsf9d1ayt2jxktf1go50ewv9nb6zy1c"]
120	pbkdf2_sha256$120000$rQz0hT9TrRET$ATi79bn15HoRw5sKxki+l8CMHEB2GbL0vUG/lC35f+g=	2021-01-04 16:18:10.682021+00	2018314281	dhm06012@naver.com	2021-01-04 16:17:54.800488+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["qzwdqfh8v2ydez7w2cqmzt0zxoiqrwpz"]
125	pbkdf2_sha256$120000$WXsQTDlpuOFS$IMyP2G4QryngN0QXOCOhs2HrAyTIRcMkPXB4giJ9kqw=	2021-01-05 01:56:15.101145+00	2020312393	hanjm113@gmail.com	2021-01-05 01:55:47.978708+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["e3hydy5nkdsca9zdhmk39y71483eownq"]
138	pbkdf2_sha256$120000$KRsT2fshtPsz$awIz2x3IkHOiIEeo/3mGEYnYNK5cpffUTqZReLG5kFc=	2021-01-05 11:32:37.828999+00	2017312332	life1057@naver.com	2021-01-05 11:32:20.157554+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["rqk8gc804x1fr69lzak554bm7mc0g3mx"]
130	pbkdf2_sha256$120000$46SPtpq8QRko$dwsDzuqUH8Pcd1N4smSgS5vMJke8TCqeHm8vuBkQoSU=	2021-01-05 05:47:05.537312+00	2018314915	yms010820@g.skku.edu	2021-01-05 05:46:53.755789+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["kz1cqilhnp6gzzp2o5kmqzu13c8uwwov"]
126	pbkdf2_sha256$120000$PwSuQDxqxJSZ$Xj9sX4ykki2UIQpF28R7zRwt8BPtCeL2UKbD29UeKbg=	2021-01-05 02:26:12.571388+00	2020310012	su01yhun_@naver.com	2021-01-05 02:24:24.21071+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["4by4kdni25lbcrthy7afc29svjtmzu73", "koyt66brify9bbmt8h8wfjcond5e9rv5"]
127	pbkdf2_sha256$120000$Vks0y6JNhWzr$E7gLhK9imZGO9EUEweS3f4gyxZxu35VEIbw+5pD5LOY=	2021-01-05 03:09:04.877672+00	2017314427	aksmfrpdla@skku.edu	2021-01-05 03:08:54.836832+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["26qb7ws372xvbb48ohoi5yrwn53h03lt"]
123	pbkdf2_sha256$120000$54NWUxHscvlE$JYro+3RFYjMlcaVZTgQQdcq5J4Cd/YRon96Te4egtPE=	2021-01-05 01:18:38.059935+00	qo_op	pidaoh@naver.com	2021-01-05 01:17:21.020295+00	Regular User	\N	\N	\N	f	354a9e07529acfdb9f0a660ae978c6f1	f	\N	f	None	["7365912i17jrtwfqux01y5xdqshuuzks", "x52wbz07k8qeliponhho4alpvrxapnn8"]
132	pbkdf2_sha256$120000$2geXa2b7oDVx$y3nPh7UDulbyhggE8UeXZGFPeNvBYrqQhuYBPYLxKv4=	2021-01-05 07:55:30.789595+00	2018311840	seunggu_35@naver.com	2021-01-05 07:55:25.490155+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["0jh44lw2wd066eare58ct7bcp92y7gbr"]
128	pbkdf2_sha256$120000$Xbzn9L82J2Ku$SlPpcHalvqMuB6/jBst5g9CLoSPlhA0dlCBEp70cHLA=	2021-01-05 03:48:13.553848+00	정소연	soyeon0130@g.skku.edu	2021-01-05 03:47:44.054486+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["sd5ou5448tkworxmvs8bpi61monz5jfn"]
122	pbkdf2_sha256$120000$Y0UnCg8sDhdr$FWFtAX0xwiYZdZPstMnWtEpXW8N/IngYNnXcuhmrPD8=	2021-01-05 10:20:10.696601+00	2020313266	010218jhlee@naver.com	2021-01-05 00:24:15.504636+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["97i2q3ls3fs6qnoj2e8jof6ds574wo07", "l5s0fr3vqtpvbv83rx0vyhn2y4ezeez5", "4izweob6wwf3xi5pl0m8ip5r6j73vd1c"]
136	pbkdf2_sha256$120000$M5fVcWnfotav$BxjBMu0pldod52EFxiveTxdhYpXEJCPB6tPSDHMCR90=	2021-01-06 08:44:08.936583+00	2019311778	zarammi1214@g.skku.edu	2021-01-05 08:38:49.628219+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["qn4gzjwmmju4ocuq8rsu2gk1gdntrys2", "g62x9k9gbfe4s8mn9kaqch31a2hnmmp3"]
133	pbkdf2_sha256$120000$0vpAtjkR7FW3$/vI3m+LJv5nindjrN7GbuWMTuZ2tt85zVlIXiTEg+Ds=	2021-01-05 07:57:37.198182+00	2020314792	ojw87104@gmail.com	2021-01-05 07:57:27.063957+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["3h47gcwdklpjbuh4dfsnlo3z11shsph3"]
137	pbkdf2_sha256$120000$wE0neUVoUn2T$77XmYc4ZvYduEC057dxMscBh/eCbP/A3EoSdGOxufRs=	2021-01-05 11:11:18.407217+00	2016310811	cswh0816@g.skku.edu	2021-01-05 11:11:12.225115+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["qkb3pzvd3uu2hrbhmqqk5luc0ovr95zl"]
140	pbkdf2_sha256$120000$dtxbnwazSs67$bBpUHBtg90b/tZjEL4elUY3nP7Z37mktfmBNn4AyGNQ=	2021-01-05 11:54:41.56282+00	creatinnov	lemonl7@naver.com	2021-01-05 11:54:31.861935+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["xxo61j5n3p6oeyn9cdk96yulj4l2jfqq"]
139	pbkdf2_sha256$120000$TZ4DfpCUWHRZ$buObMcVYcULDd3k5uCURpfJqJTt5ocp4yGW2jEPBY+s=	2021-01-05 11:43:35.706112+00	2015312707	wlstjq0602@skku.edu	2021-01-05 11:43:16.246984+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["japoaewgczu5vwtvzco4i4bkkwlcrkar"]
142	pbkdf2_sha256$120000$6O9ICpvqelbZ$tYP6DQ1lTouIX37YmXvWVHpCqtTeb3g8A0RzT+um6PU=	2021-01-05 13:53:32.563917+00	2020311733	sallyj7187@g.skku.edu	2021-01-05 13:53:19.9386+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["79cfu4dchhy2926acs412oe5qk61xk2i"]
143	pbkdf2_sha256$120000$zxT6tWqjmqfu$DdkKmQiXdqrc6A/Vyk1beofyoYLD6qV9gN1aemPaFaY=	2021-01-05 14:04:00.555785+00	2016310790	js970830@naver.com	2021-01-05 14:03:54.708343+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["246n35ee5ie3r33e7yvwhg1h341ffq42"]
141	pbkdf2_sha256$120000$ujmSCicMXFop$5s/jDP6qHbHb/5szUUytfgVU1yc8HT/SHfX3wA18Jkk=	2021-01-05 14:50:41.598643+00	2018312588	vickey043011@gmail.com	2021-01-05 13:14:03.262047+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["9g7rosqrqiwrmz714ylg7yqhviqc64sa"]
146	pbkdf2_sha256$120000$ymoKZAxMvjdi$MNPn7+inUuhWF1c1ihf7sDhCm3B1HF8YwWRsaTWltOM=	2021-01-06 00:45:20.202183+00	2019313301	idpjs2000@g.skku.edu	2021-01-06 00:45:03.78578+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["yfckfxtl2n98x2o8cyrmmow977zbyivo"]
150	pbkdf2_sha256$120000$jB6GRl7rOoQm$Be4/1weYJ/L7816NbIoZvzW6CAyDa/SvLOe/2tRCqG8=	2021-01-06 13:51:15.742047+00	2019314993	jack2025@naver.com	2021-01-06 13:51:07.748589+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["gs6cnyzr41jbgn20w11lc3e3m43v9z3c"]
147	pbkdf2_sha256$120000$lCM7SdhcvmXU$IN19sSS8w2eW3H+jDeTe8uaRlQFmblt5VXwaVkdL4TY=	2021-01-06 05:47:41.296005+00	2018311309	artonezzang@naver.com	2021-01-06 05:47:37.853837+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["xwo477y1vgji1tu9lut99kdrlafjugxf"]
26	pbkdf2_sha256$120000$Sr2O2fncM3Ck$PEyFKI32XRNhswi/PPUcqJN11nwI4v73Ottp4Tj1sC4=	2021-01-06 06:08:52.106785+00	2016311072	shjohw12@skku.edu	2020-12-31 09:47:24.114996+00	Regular User	\N	\N	\N	f	2e8e41a978a3b8ff02e80c1c1af82f44	f	\N	f	None	["1gt4icoav3byopxvvlksbbmvjaw7ck1u", "7lbylw4a26iyqrpe5nprh633rjus4o6t", "qo8bgchdwra48dclpgccas6itjyhkok4", "xrn8bpqcshihlblktvmg53ffud4wojk0", "rzgwryn05a898o44eqq9tyskqycla2ik", "c8v73w55b8nvafbyyj2r77wg41qqp3ow", "06den7sghpqf1b2ffvjjc03ugw48991r", "lc64n1p4etel591q1fh39ysvurkt8931", "7967ua9lgwbfjhoq86zgv5m6g8paj3ox", "txyaytp1j9vkoo9ffqgqwuz6wif3uliq", "e997to78lz5syzyidu2k2uquur4wtezo", "79jjr76gjvj7rayykrb278hthrtuxk5k", "xvwpf2t6k1al3j6kgb2enfhdm8cgbckf", "2ufgr8fmtf62a4lmec0ynv5eafjlr6lj"]
148	pbkdf2_sha256$120000$szy4mE0jmqzq$G/zFEwM1wrRjcqc1KwZme184SlCCpE699ZuX/01xNvI=	2021-01-06 11:10:27.114781+00	2018312800	rhatnsdl5036@gmail.com	2021-01-06 11:10:20.852623+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["2xhxdjyvjc7aakfjkkkxe3734bu61cdi"]
1	pbkdf2_sha256$120000$e2ABV9xQ5DYo$rv4H6Zp4vyJObIOuQ8GNh3J+ivYyFUPOF4/BVu/IHAM=	2021-01-06 11:34:35.467118+00	root	\N	2020-12-17 08:13:42.278834+00	Super Admin	\N	\N	\N	f	\N	f	\N	f	All	["wdlabiagypco1er81u0hx1llukovpyla", "xjtg1r0ya34tb5n1bqrd79aals3eizou", "bpw1tqbvwudigzl4wjvz39s9v3c23mqt", "ra6h0u4cq3738fjbrjktql3fx4vktf35", "cffxf8ptb80edupi0lspelns0sqizt5q", "dkxpw5r4vdsnk8fjtjb2yyycrkwu7hu3", "ky0evzpuxakj6h1tu161verjmo4qk9e8", "ian476tpfgo5ergn3kvexm9zp2u96jjy"]
149	pbkdf2_sha256$120000$NxJElqWgY8U7$ToOn1Ikl03NzC0ICVJlPFZT63xyI9eUE0lfPJNc/cKw=	2021-01-06 12:04:54.53575+00	2019312486	lizyjk@naver.com	2021-01-06 12:04:29.930865+00	Regular User	\N	\N	\N	f	\N	f	\N	f	None	["zmahcs5xw717l5x2gysob66j9biox9r3"]
\.


--
-- Data for Name: user_profile; Type: TABLE DATA; Schema: public; Owner: onlinejudge
--

COPY public.user_profile (id, acm_problems_status, avatar, blog, mood, accepted_number, submission_number, github, school, major, user_id, total_score, oi_problems_status, real_name, language) FROM stdin;
144	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	144	0	{}	\N	\N
147	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	147	0	{}	\N	\N
34	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	34	0	{}	2019313491	\N
98	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	98	0	{}	\N	\N
37	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	37	0	{}	\N	\N
38	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	38	0	{}	\N	\N
124	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	124	0	{}	\N	\N
40	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	40	0	{}	최재민	\N
41	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	41	0	{}	\N	\N
43	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	43	0	{}	\N	\N
44	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	44	0	{}	\N	\N
58	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	58	0	{}	\N	\N
46	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	46	0	{}	\N	\N
49	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	49	0	{}	\N	\N
2	{"problems": {"4": {"_id": "A", "status": -1}}}	/public/avatar/default.png	\N	\N	0	2	\N	\N	\N	2	0	{}	\N	\N
1	{"problems": {"1": {"_id": "1", "status": -2}, "2": {"_id": "2", "status": 0}, "4": {"_id": "A", "status": 0}, "5": {"_id": "2", "status": 0}}}	/public/avatar/default.png	\N	\N	3	18	\N	\N	\N	1	0	{}	\N	\N
3	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	3	0	{}	\N	\N
4	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	4	0	{}	\N	\N
5	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	5	0	{}	\N	\N
6	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	6	0	{}	\N	\N
52	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "15": {"_id": "D", "status": 4}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	52	0	{}	\N	\N
135	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	135	0	{}	\N	\N
130	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	130	0	{}	\N	\N
101	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	101	0	{}	\N	\N
15	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	15	0	{}	\N	\N
108	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	108	0	{}	\N	\N
60	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	60	0	{}	\N	\N
22	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	22	0	{}	\N	\N
24	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	24	0	{}	\N	\N
110	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	110	0	{}	\N	\N
27	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	27	0	{}	\N	\N
29	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	29	0	{}	\N	\N
30	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	30	0	{}	\N	\N
138	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	138	0	{}	\N	\N
14	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	14	0	{}	\N	\N
19	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	19	0	{}	\N	\N
112	{"contest_problems": {"12": {"_id": "A", "status": -2}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	112	0	{}	\N	\N
116	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	116	0	{}	\N	\N
51	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	51	0	{}	\N	\N
54	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	54	0	{}	\N	\N
50	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	50	0	{}	\N	\N
28	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "16": {"_id": "E", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	28	0	{}	\N	\N
53	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	53	0	{}	\N	\N
17	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	17	0	{}	\N	\N
7	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	Good	0	0	\N	성균관대학교	컴퓨터공학과	7	0	{}	이동욱	en-US
61	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	61	0	{}	\N	\N
16	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	16	0	{}	\N	\N
35	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 4}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	35	0	{}	\N	\N
77	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	77	0	{}	\N	\N
67	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	67	0	{}	\N	\N
75	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	75	0	{}	\N	\N
70	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	70	0	{}	\N	\N
74	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	74	0	{}	\N	\N
45	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": -1}, "15": {"_id": "D", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	45	0	{}	\N	\N
23	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "16": {"_id": "E", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	23	0	{}	\N	\N
57	{"contest_problems": {"16": {"_id": "E", "status": 4}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	57	0	{}	\N	\N
20	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	20	0	{}	\N	\N
59	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	59	0	{}	\N	\N
56	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	56	0	{}	\N	\N
21	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "16": {"_id": "E", "status": 0}, "17": {"_id": "F", "status": 0}, "20": {"_id": "G", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	21	0	{}	\N	\N
80	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	80	0	{}	\N	\N
66	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	66	0	{}	\N	\N
65	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "17": {"_id": "F", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	65	0	{}	\N	\N
36	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	36	0	{}	\N	\N
95	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	95	0	{}	\N	\N
47	{"contest_problems": {"12": {"_id": "A", "status": -1}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	47	0	{}	\N	\N
85	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	85	0	{}	\N	\N
26	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "16": {"_id": "E", "status": 0}, "17": {"_id": "F", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	26	0	{}	Junghwan Shin	en-US
148	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	148	0	{}	\N	\N
33	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	33	0	{}	\N	\N
63	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 3}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	63	0	{}	\N	\N
32	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	32	0	{}	\N	\N
55	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	55	0	{}	\N	\N
48	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	48	0	{}	\N	\N
62	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	62	0	{}	\N	\N
131	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	131	0	{}	\N	\N
128	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	128	0	{}	\N	\N
81	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	81	0	{}	\N	\N
83	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	83	0	{}	\N	\N
86	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	86	0	{}	\N	\N
102	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	102	0	{}	\N	\N
78	{"contest_problems": {"17": {"_id": "F", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	78	0	{}	\N	\N
105	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	105	0	{}	\N	\N
87	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	87	0	{}	\N	\N
73	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	73	0	{}	\N	\N
91	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	91	0	{}	\N	\N
76	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 4}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	76	0	{}	\N	\N
94	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	94	0	{}	\N	\N
69	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "16": {"_id": "E", "status": 0}, "17": {"_id": "F", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	69	0	{}	\N	\N
96	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	96	0	{}	\N	\N
71	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	71	0	{}	\N	\N
104	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	104	0	{}	\N	\N
122	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "16": {"_id": "E", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	122	0	{}	\N	\N
25	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	25	0	{}	\N	\N
8	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "16": {"_id": "E", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	소프트웨어대학	소프트웨어학과	8	0	{}	김정원	en-US
143	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	143	0	{}	\N	\N
93	{"contest_problems": {"12": {"_id": "A", "status": -2}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	93	0	{}	\N	\N
106	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	106	0	{}	\N	\N
103	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "15": {"_id": "D", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	103	0	{}	\N	\N
9	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	9	0	{}	\N	\N
109	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	109	0	{}	\N	\N
139	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	139	0	{}	\N	\N
119	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	119	0	{}	\N	\N
113	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	113	0	{}	\N	\N
13	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	13	0	{}	\N	\N
82	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	82	0	{}	\N	\N
79	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	79	0	{}	\N	\N
129	{"contest_problems": {"13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	129	0	{}	\N	\N
132	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	132	0	{}	\N	\N
136	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	136	0	{}	\N	\N
117	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	117	0	{}	\N	\N
127	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	127	0	{}	\N	\N
64	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	64	0	{}	\N	\N
99	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 4}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	99	0	{}	\N	\N
11	{"contest_problems": {"12": {"_id": "A", "status": 0}, "14": {"_id": "C", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	11	0	{}	\N	\N
145	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	145	0	{}	\N	\N
149	{"contest_problems": {"13": {"_id": "B", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	149	0	{}	\N	\N
68	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "16": {"_id": "E", "status": 0}, "17": {"_id": "F", "status": 0}, "20": {"_id": "G", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	68	0	{}	\N	\N
84	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 4}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	84	0	{}	\N	\N
114	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	114	0	{}	\N	\N
42	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	42	0	{}	\N	\N
107	{"contest_problems": {"12": {"_id": "A", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	107	0	{}	\N	\N
92	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	92	0	{}	\N	\N
121	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	121	0	{}	\N	\N
89	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	89	0	{}	\N	\N
18	{"contest_problems": {"12": {"_id": "A", "status": -2}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	18	0	{}	\N	\N
137	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	137	0	{}	\N	\N
123	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	123	0	{}	\N	\N
88	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	88	0	{}	\N	\N
100	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	100	0	{}	\N	\N
39	{"contest_problems": {"12": {"_id": "A", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	39	0	{}	\N	\N
97	{"contest_problems": {"12": {"_id": "A", "status": -1}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	97	0	{}	\N	\N
118	{"contest_problems": {"13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	성균관대학교	\N	118	0	{}	\N	\N
31	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	31	0	{}	\N	\N
126	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	126	0	{}	\N	\N
115	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	115	0	{}	\N	\N
134	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	134	0	{}	\N	\N
120	{"contest_problems": {"12": {"_id": "A", "status": -2}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	120	0	{}	\N	\N
125	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	125	0	{}	\N	\N
133	{"contest_problems": {"12": {"_id": "A", "status": 4}, "13": {"_id": "B", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	133	0	{}	\N	\N
10	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "16": {"_id": "E", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	10	0	{}	\N	\N
12	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "16": {"_id": "E", "status": 1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	12	0	{}	\N	\N
141	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	141	0	{}	\N	\N
140	{"contest_problems": {"12": {"_id": "A", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	140	0	{}	\N	\N
90	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "15": {"_id": "D", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	90	0	{}	\N	\N
111	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": -1}, "16": {"_id": "E", "status": -1}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	111	0	{}	\N	\N
146	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	146	0	{}	\N	\N
142	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 4}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	142	0	{}	\N	\N
72	{"contest_problems": {"12": {"_id": "A", "status": 0}, "13": {"_id": "B", "status": 0}, "14": {"_id": "C", "status": 0}, "15": {"_id": "D", "status": 0}, "16": {"_id": "E", "status": 0}}}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	72	0	{}	\N	\N
150	{}	/public/avatar/default.png	\N	\N	0	0	\N	\N	\N	150	0	{}	\N	\N
\.


--
-- Name: acm_contest_rank_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.acm_contest_rank_id_seq', 94, true);


--
-- Name: announcement_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.announcement_id_seq', 4, true);


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 68, true);


--
-- Name: contest_announcement_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.contest_announcement_id_seq', 4, true);


--
-- Name: contest_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.contest_id_seq', 2, true);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 17, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 65, true);


--
-- Name: judge_server_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.judge_server_id_seq', 4, true);


--
-- Name: oi_contest_rank_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.oi_contest_rank_id_seq', 1, false);


--
-- Name: options_sysoptions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.options_sysoptions_id_seq', 10, true);


--
-- Name: problem_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.problem_id_seq', 20, true);


--
-- Name: problem_tag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.problem_tag_id_seq', 6, true);


--
-- Name: problem_tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.problem_tags_id_seq', 45, true);


--
-- Name: user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.user_id_seq', 150, true);


--
-- Name: user_profile_id_seq; Type: SEQUENCE SET; Schema: public; Owner: onlinejudge
--

SELECT pg_catalog.setval('public.user_profile_id_seq', 150, true);


--
-- Name: acm_contest_rank acm_contest_rank_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.acm_contest_rank
    ADD CONSTRAINT acm_contest_rank_pkey PRIMARY KEY (id);


--
-- Name: acm_contest_rank acm_contest_rank_user_id_contest_id_26151d10_uniq; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.acm_contest_rank
    ADD CONSTRAINT acm_contest_rank_user_id_contest_id_26151d10_uniq UNIQUE (user_id, contest_id);


--
-- Name: announcement announcement_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.announcement
    ADD CONSTRAINT announcement_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: contest_announcement contest_announcement_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.contest_announcement
    ADD CONSTRAINT contest_announcement_pkey PRIMARY KEY (id);


--
-- Name: contest contest_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.contest
    ADD CONSTRAINT contest_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_dramatiq_task django_dramatiq_task_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.django_dramatiq_task
    ADD CONSTRAINT django_dramatiq_task_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: judge_server judge_server_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.judge_server
    ADD CONSTRAINT judge_server_pkey PRIMARY KEY (id);


--
-- Name: oi_contest_rank oi_contest_rank_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.oi_contest_rank
    ADD CONSTRAINT oi_contest_rank_pkey PRIMARY KEY (id);


--
-- Name: oi_contest_rank oi_contest_rank_user_id_contest_id_fe51a302_uniq; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.oi_contest_rank
    ADD CONSTRAINT oi_contest_rank_user_id_contest_id_fe51a302_uniq UNIQUE (user_id, contest_id);


--
-- Name: options_sysoptions options_sysoptions_key_key; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.options_sysoptions
    ADD CONSTRAINT options_sysoptions_key_key UNIQUE (key);


--
-- Name: options_sysoptions options_sysoptions_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.options_sysoptions
    ADD CONSTRAINT options_sysoptions_pkey PRIMARY KEY (id);


--
-- Name: problem problem__id_contest_id_346645fe_uniq; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem
    ADD CONSTRAINT problem__id_contest_id_346645fe_uniq UNIQUE (_id, contest_id);


--
-- Name: problem problem_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem
    ADD CONSTRAINT problem_pkey PRIMARY KEY (id);


--
-- Name: problem_tag problem_tag_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem_tag
    ADD CONSTRAINT problem_tag_pkey PRIMARY KEY (id);


--
-- Name: problem_tags problem_tags_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem_tags
    ADD CONSTRAINT problem_tags_pkey PRIMARY KEY (id);


--
-- Name: problem_tags problem_tags_problem_id_problemtag_id_318459d1_uniq; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem_tags
    ADD CONSTRAINT problem_tags_problem_id_problemtag_id_318459d1_uniq UNIQUE (problem_id, problemtag_id);


--
-- Name: submission submission_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.submission
    ADD CONSTRAINT submission_pkey PRIMARY KEY (id);


--
-- Name: user user_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_pkey PRIMARY KEY (id);


--
-- Name: user_profile user_profile_pkey; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_pkey PRIMARY KEY (id);


--
-- Name: user_profile user_profile_user_id_key; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_user_id_key UNIQUE (user_id);


--
-- Name: user user_username_key; Type: CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_username_key UNIQUE (username);


--
-- Name: acm_contest_rank_contest_id_21030ccd; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX acm_contest_rank_contest_id_21030ccd ON public.acm_contest_rank USING btree (contest_id);


--
-- Name: acm_contest_rank_user_id_40391ab2; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX acm_contest_rank_user_id_40391ab2 ON public.acm_contest_rank USING btree (user_id);


--
-- Name: announcement_created_by_id_359ccf50; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX announcement_created_by_id_359ccf50 ON public.announcement USING btree (created_by_id);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: contest_announcement_contest_id_a8cb419f; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX contest_announcement_contest_id_a8cb419f ON public.contest_announcement USING btree (contest_id);


--
-- Name: contest_announcement_created_by_id_469a14ce; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX contest_announcement_created_by_id_469a14ce ON public.contest_announcement USING btree (created_by_id);


--
-- Name: contest_created_by_id_a763ca7e; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX contest_created_by_id_a763ca7e ON public.contest USING btree (created_by_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: oi_contest_rank_contest_id_171fcdaf; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX oi_contest_rank_contest_id_171fcdaf ON public.oi_contest_rank USING btree (contest_id);


--
-- Name: oi_contest_rank_user_id_0ba36852; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX oi_contest_rank_user_id_0ba36852 ON public.oi_contest_rank USING btree (user_id);


--
-- Name: problem__id_919b1d80; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX problem__id_919b1d80 ON public.problem USING btree (_id);


--
-- Name: problem_contest_id_328e013a; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX problem_contest_id_328e013a ON public.problem USING btree (contest_id);


--
-- Name: problem_created_by_id_cb362143; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX problem_created_by_id_cb362143 ON public.problem USING btree (created_by_id);


--
-- Name: problem_tags_problem_id_866ecb8d; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX problem_tags_problem_id_866ecb8d ON public.problem_tags USING btree (problem_id);


--
-- Name: problem_tags_problemtag_id_72d20571; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX problem_tags_problemtag_id_72d20571 ON public.problem_tags USING btree (problemtag_id);


--
-- Name: submission_contest_id_775716d5; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX submission_contest_id_775716d5 ON public.submission USING btree (contest_id);


--
-- Name: submission_problem_id_76847b55; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX submission_problem_id_76847b55 ON public.submission USING btree (problem_id);


--
-- Name: submission_result_37e2f67a; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX submission_result_37e2f67a ON public.submission USING btree (result);


--
-- Name: submission_user_id_3779a8c1; Type: INDEX; Schema: public; Owner: onlinejudge
--

CREATE INDEX submission_user_id_3779a8c1 ON public.submission USING btree (user_id);


--
-- Name: acm_contest_rank acm_contest_rank_contest_id_21030ccd_fk_contest_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.acm_contest_rank
    ADD CONSTRAINT acm_contest_rank_contest_id_21030ccd_fk_contest_id FOREIGN KEY (contest_id) REFERENCES public.contest(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acm_contest_rank acm_contest_rank_user_id_40391ab2_fk_user_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.acm_contest_rank
    ADD CONSTRAINT acm_contest_rank_user_id_40391ab2_fk_user_id FOREIGN KEY (user_id) REFERENCES public."user"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: announcement announcement_created_by_id_359ccf50_fk_user_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.announcement
    ADD CONSTRAINT announcement_created_by_id_359ccf50_fk_user_id FOREIGN KEY (created_by_id) REFERENCES public."user"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contest_announcement contest_announcement_contest_id_a8cb419f_fk_contest_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.contest_announcement
    ADD CONSTRAINT contest_announcement_contest_id_a8cb419f_fk_contest_id FOREIGN KEY (contest_id) REFERENCES public.contest(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contest_announcement contest_announcement_created_by_id_469a14ce_fk_user_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.contest_announcement
    ADD CONSTRAINT contest_announcement_created_by_id_469a14ce_fk_user_id FOREIGN KEY (created_by_id) REFERENCES public."user"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contest contest_created_by_id_a763ca7e_fk_user_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.contest
    ADD CONSTRAINT contest_created_by_id_a763ca7e_fk_user_id FOREIGN KEY (created_by_id) REFERENCES public."user"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: oi_contest_rank oi_contest_rank_contest_id_171fcdaf_fk_contest_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.oi_contest_rank
    ADD CONSTRAINT oi_contest_rank_contest_id_171fcdaf_fk_contest_id FOREIGN KEY (contest_id) REFERENCES public.contest(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: oi_contest_rank oi_contest_rank_user_id_0ba36852_fk_user_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.oi_contest_rank
    ADD CONSTRAINT oi_contest_rank_user_id_0ba36852_fk_user_id FOREIGN KEY (user_id) REFERENCES public."user"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: problem problem_contest_id_328e013a_fk_contest_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem
    ADD CONSTRAINT problem_contest_id_328e013a_fk_contest_id FOREIGN KEY (contest_id) REFERENCES public.contest(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: problem problem_created_by_id_cb362143_fk_user_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem
    ADD CONSTRAINT problem_created_by_id_cb362143_fk_user_id FOREIGN KEY (created_by_id) REFERENCES public."user"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: problem_tags problem_tags_problem_id_866ecb8d_fk_problem_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem_tags
    ADD CONSTRAINT problem_tags_problem_id_866ecb8d_fk_problem_id FOREIGN KEY (problem_id) REFERENCES public.problem(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: problem_tags problem_tags_problemtag_id_72d20571_fk_problem_tag_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.problem_tags
    ADD CONSTRAINT problem_tags_problemtag_id_72d20571_fk_problem_tag_id FOREIGN KEY (problemtag_id) REFERENCES public.problem_tag(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: submission submission_contest_id_775716d5_fk_contest_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.submission
    ADD CONSTRAINT submission_contest_id_775716d5_fk_contest_id FOREIGN KEY (contest_id) REFERENCES public.contest(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: submission submission_problem_id_76847b55_fk_problem_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.submission
    ADD CONSTRAINT submission_problem_id_76847b55_fk_problem_id FOREIGN KEY (problem_id) REFERENCES public.problem(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: user_profile user_profile_user_id_8fdce8e2_fk_user_id; Type: FK CONSTRAINT; Schema: public; Owner: onlinejudge
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_user_id_8fdce8e2_fk_user_id FOREIGN KEY (user_id) REFERENCES public."user"(id) DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

\connect postgres

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

-- Dumped from database version 10.15
-- Dumped by pg_dump version 10.15

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: DATABASE postgres; Type: COMMENT; Schema: -; Owner: onlinejudge
--

COMMENT ON DATABASE postgres IS 'default administrative connection database';


--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- PostgreSQL database dump complete
--

\connect template1

SET default_transaction_read_only = off;

--
-- PostgreSQL database dump
--

-- Dumped from database version 10.15
-- Dumped by pg_dump version 10.15

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: DATABASE template1; Type: COMMENT; Schema: -; Owner: onlinejudge
--

COMMENT ON DATABASE template1 IS 'default template for new databases';


--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

